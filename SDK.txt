// ============================= //
Class World.Object
	Level* PersistentLevel; // Offset: 0x70
	NetDriver* NetDriver; // Offset: 0x78
	LineBatchComponent* 9c75dda311; // Offset: 0x80
	LineBatchComponent* a01bd77e65; // Offset: 0x88
	LineBatchComponent* f641c00760; // Offset: 0x90
	GameNetworkManager* 1542250a42; // Offset: 0x98
	PhysicsCollisionHandler* PhysicsCollisionHandler; // Offset: 0xa0
	TArray<Object*> 91ee867d71; // Offset: 0xa8
	TArray<Object*> 87a2c306e2; // Offset: 0xb8
	Level* 7a9e9fe09b; // Offset: 0xc8
	TArray<LevelStreaming*> 4852361e31; // Offset: 0xd0
	0119241da4 0119241da4; // Offset: 0xe0
	DemoNetDriver* DemoNetDriver; // Offset: 0x108
	Level* 4e3aa4b50f; // Offset: 0x110
	ParticleEventManager* 4d4c04e93e; // Offset: 0x128
	PhysicsVolume* DefaultPhysicsVolume; // Offset: 0x130
	bool b1f9ff42f7; // Offset: 0x14e
	NavigationSystemBase* NavigationSystem; // Offset: 0x150
	GameModeBase* AuthorityGameMode; // Offset: 0x158
	GameStateBase* GameState; // Offset: 0x160
	AISystemBase* AISystem; // Offset: 0x168
	AvoidanceManager* AvoidanceManager; // Offset: 0x170
	TArray<Level*> Levels; // Offset: 0x178
	TArray<LevelCollection> LevelCollections; // Offset: 0x188
	GameInstance* OwningGameInstance; // Offset: 0x210
	TArray<18bae0abd4*> 513259ec38; // Offset: 0x218
	Canvas* bce3020310; // Offset: 0x228
	Canvas* 65c622c980; // Offset: 0x230
	SetProperty ed744e40ae; // Offset: 0x288
	TArray<ActorComponent*> d9a80d2e2a; // Offset: 0x2d8
	TArray<ActorComponent*> 0645c8677a; // Offset: 0x2e8
	WorldComposition* WorldComposition; // Offset: 0x6c0
	WorldPSCPool e29ff28561; // Offset: 0x750
// ============================= //
Class Object
// ============================= //
Class Level.Object
	TArray<Vector> b2464c056b; // Offset: 0x78
	Model* Model; // Offset: 0xa8
	World* OwningWorld; // Offset: 0xd0
	TArray<79b29f43fb*> 39be532e0f; // Offset: 0xf8
	3bcd64d245* ActorCluster; // Offset: 0x180
	NavigationObjectBase* 65f7de1136; // Offset: 0x1e0
	WorldSettings* WorldSettings; // Offset: 0x220
	TArray<bffacd2636> 2d7d474556; // Offset: 0x238
	bool d788076ed6; // Offset: 0x24c
	bool c1cefc2ab0; // Offset: 0x24c
	bool d452822177; // Offset: 0x24c
	bool bIsVisible; // Offset: 0x24c
	TArray<ModelComponent*> bd40143534; // Offset: 0x250
	NavigationObjectBase* 8a7cf6bba0; // Offset: 0x2a8
	MapBuildDataRegistry* MapBuildData; // Offset: 0x2b8
	TArray<AssetUserData*> AssetUserData; // Offset: 0x328
	TArray<Guid> f241419b84; // Offset: 0x338
	LevelScriptActor* LevelScriptActor; // Offset: 0x3a0
// ============================= //
Struct Vector
	float X; // Offset: 0x0
	float Y; // Offset: 0x4
	float Z; // Offset: 0x8
// ============================= //
Class Model.Object
// ============================= //
Class 79b29f43fb.Object
	FName 07fef54bef; // Offset: 0x68
// ============================= //
Class 3bcd64d245.Object
	TArray<Actor*> Actors; // Offset: 0x68
// ============================= //
Class Actor.Object
	MulticastSparseDelegateProperty OnInputTouchEnter; // Offset: 0x68
	bool d9a1b37a78; // Offset: 0x69
	bool d4a0848783; // Offset: 0x69
	bool bOnlyRelevantToOwner; // Offset: 0x69
	bool bAlwaysRelevant; // Offset: 0x69
	bool 4534834cb8; // Offset: 0x69
	bool bHidden; // Offset: 0x69
	bool bTearOff; // Offset: 0x69
	bool b26e779da4; // Offset: 0x69
	bool d39721de60; // Offset: 0x6a
	bool bNetUseOwnerRelevancy; // Offset: 0x6a
	bool 711d84b35c; // Offset: 0x6a
	bool 8a2e3a0037; // Offset: 0x6a
	bool 97737b1e47; // Offset: 0x6a
	bool 8f06e05539; // Offset: 0x6a
	bool bAutoDestroyWhenFinished; // Offset: 0x6a
	bool bCanBeDamaged; // Offset: 0x6a
	bool 1ae5f04773; // Offset: 0x6b
	bool 360d3bfef6; // Offset: 0x6b
	bool bFindCameraComponentWhenViewTarget; // Offset: 0x6b
	bool bGenerateOverlapEventsDuringLevelStreaming; // Offset: 0x6b
	bool dd0f16388f; // Offset: 0x6b
	bool bEnableAutoLODGeneration; // Offset: 0x6b
	bool c7a35074ee; // Offset: 0x6b
	bool e285187c88; // Offset: 0x6b
	bool bReplicates; // Offset: 0x6c
	bool b8656f7da9; // Offset: 0x6c
	bool 90de11ba18; // Offset: 0x6c
	bool d75fdd115b; // Offset: 0x6d
	bool 949443e825; // Offset: 0x6d
	TEnumAsByte<EActorUpdateOverlapsMethod> UpdateOverlapsMethodDuringLevelStreaming; // Offset: 0x6e
	float NetPriority; // Offset: 0x70
	TArray<ActorComponent*> InstanceComponents; // Offset: 0x78
	TArray<FName> Tags; // Offset: 0x90
	MulticastSparseDelegateProperty OnReleased; // Offset: 0xa0
	TArray<Actor*> Children; // Offset: 0xb0
	TEnumAsByte<ESpawnActorCollisionHandlingMethod> SpawnCollisionHandlingMethod; // Offset: 0xc0
	SceneComponent* RootComponent; // Offset: 0xc8
	TArray<ActorComponent*> BlueprintCreatedComponents; // Offset: 0xd0
	MulticastSparseDelegateProperty OnClicked; // Offset: 0xe0
	MulticastSparseDelegateProperty OnInputTouchLeave; // Offset: 0xe1
	FName NetDriverName; // Offset: 0xe4
	TEnumAsByte<ENetRole> Role; // Offset: 0xec
	TEnumAsByte<ENetDormancy> NetDormancy; // Offset: 0x100
	MulticastSparseDelegateProperty OnActorEndOverlap; // Offset: 0x118
	MulticastSparseDelegateProperty OnDestroyed; // Offset: 0x119
	MulticastSparseDelegateProperty OnEndCursorOver; // Offset: 0x11a
	TArray<MatineeActor*> 6af0070b2d; // Offset: 0x120
	float InitialLifeSpan; // Offset: 0x134
	MulticastSparseDelegateProperty OnEndPlay; // Offset: 0x138
	TEnumAsByte<ENetRole> RemoteRole; // Offset: 0x139
	TEnumAsByte<EActorUpdateOverlapsMethod> DefaultUpdateOverlapsMethodDuringLevelStreaming; // Offset: 0x13a
	MulticastSparseDelegateProperty OnInputTouchBegin; // Offset: 0x13b
	MulticastSparseDelegateProperty OnBeginCursorOver; // Offset: 0x13d
	MulticastSparseDelegateProperty OnActorHit; // Offset: 0x13e
	MulticastSparseDelegateProperty OnTakePointDamage; // Offset: 0x198
	float MinNetUpdateFrequency; // Offset: 0x19c
	MulticastSparseDelegateProperty OnTakeAnyDamage; // Offset: 0x1a0
	float CustomTimeDilation; // Offset: 0x1a4
	float NetCullDistanceSquared; // Offset: 0x1a8
	InputComponent* InputComponent; // Offset: 0x1b0
	RepMovement ReplicatedMovement; // Offset: 0x1bc
	Actor* Owner; // Offset: 0x1f0
	de7d081164 0b7e6ce3d4; // Offset: 0x1f8
	MulticastSparseDelegateProperty OnTakeRadialDamage; // Offset: 0x238
	MulticastSparseDelegateProperty OnInputTouchEnd; // Offset: 0x239
	int b02ee8945a; // Offset: 0x23c
	float NetUpdateFrequency; // Offset: 0x240
	TArray<FName> Layers; // Offset: 0x248
	ChildActorComponent* dfeb5a3974; // Offset: 0x258
	MulticastSparseDelegateProperty OnActorBeginOverlap; // Offset: 0x278
	9e70421366 74e2d3a471; // Offset: 0x280
	Pawn* Instigator; // Offset: 0x2b0
// ============================= //
Enum EActorUpdateOverlapsMethod
	EActorUpdateOverlapsMethod::UseConfigDefault = 0,
	EActorUpdateOverlapsMethod::AlwaysUpdate = 1,
	EActorUpdateOverlapsMethod::OnlyUpdateMovable = 2,
	EActorUpdateOverlapsMethod::NeverUpdate = 3,
	EActorUpdateOverlapsMethod::EActorUpdateOverlapsMethod_MAX = 4;
// ============================= //
Class ActorComponent.Object
	TArray<AssetUserData*> AssetUserData; // Offset: 0x70
	TArray<FName> ComponentTags; // Offset: 0x88
	MulticastSparseDelegateProperty OnComponentDeactivated; // Offset: 0x98
	bool bNetAddressable; // Offset: 0xa0
	bool 142d12c99d; // Offset: 0xa0
	bool bReplicates; // Offset: 0xa0
	bool bAutoActivate; // Offset: 0xa2
	bool bIsActive; // Offset: 0xa2
	bool 9b66bfddd6; // Offset: 0xa2
	bool bCanEverAffectNavigation; // Offset: 0xa2
	bool bIsEditorOnly; // Offset: 0xa2
	TArray<SimpleMemberReference> 5f8ef15dec; // Offset: 0xa8
	TEnumAsByte<EComponentCreationMethod> CreationMethod; // Offset: 0xc8
	b86fc1e07e 4f0f534b4c; // Offset: 0xd0
	MulticastSparseDelegateProperty OnComponentActivated; // Offset: 0x100
// ============================= //
Class AssetUserData.Object
// ============================= //
Struct SimpleMemberReference
	Object* MemberParent; // Offset: 0x0
	FName MemberName; // Offset: 0x8
	Guid MemberGuid; // Offset: 0x10
// ============================= //
Struct Guid
	int A; // Offset: 0x0
	int B; // Offset: 0x4
	int C; // Offset: 0x8
	int D; // Offset: 0xc
// ============================= //
Enum EComponentCreationMethod
	EComponentCreationMethod::Native = 0,
	EComponentCreationMethod::SimpleConstructionScript = 1,
	EComponentCreationMethod::UserConstructionScript = 2,
	EComponentCreationMethod::Instance = 3,
	EComponentCreationMethod::EComponentCreationMethod_MAX = 4;
// ============================= //
Struct b86fc1e07e.7a1a2c8098
// ============================= //
Struct 7a1a2c8098
	TEnumAsByte<ETickingGroup> TickGroup; // Offset: 0x8
	TEnumAsByte<ETickingGroup> c35e92ddf0; // Offset: 0x9
	bool d617994a4f; // Offset: 0xa
	bool bCanEverTick; // Offset: 0xa
	bool 0382fbbbde; // Offset: 0xa
	bool f88a0b641b; // Offset: 0xa
	float TickInterval; // Offset: 0xc
// ============================= //
Enum ETickingGroup
	TG_PrePhysics = 0,
	TG_StartPhysics = 1,
	TG_DuringPhysics = 2,
	TG_EndPhysics = 3,
	TG_PostPhysics = 4,
	TG_PostUpdateWork = 5,
	TG_LastDemotable = 6,
	TG_NewlySpawned = 7,
	TG_MAX = 8;
// ============================= //
Enum ESpawnActorCollisionHandlingMethod
	ESpawnActorCollisionHandlingMethod::Undefined = 0,
	ESpawnActorCollisionHandlingMethod::AlwaysSpawn = 1,
	ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButAlwaysSpawn = 2,
	ESpawnActorCollisionHandlingMethod::AdjustIfPossibleButDontSpawnIfColliding = 3,
	ESpawnActorCollisionHandlingMethod::DontSpawnIfColliding = 4,
	ESpawnActorCollisionHandlingMethod::ESpawnActorCollisionHandlingMethod_MAX = 5;
// ============================= //
Class SceneComponent.ActorComponent.Object
	Rotator RelativeRotation; // Offset: 0x104
	TEnumAsByte<EDetailMode> DetailMode; // Offset: 0x130
	SceneComponent* AttachParent; // Offset: 0x138
	TEnumAsByte<EComponentMobility> Mobility; // Offset: 0x140
	Vector RelativeScale3D; // Offset: 0x144
	TEnumAsByte<EUpdateTransformMode> UpdateTransformMode; // Offset: 0x1f0
	MulticastSparseDelegateProperty PhysicsVolumeChangedDelegate; // Offset: 0x1f1
	bool bComponentToWorldUpdated; // Offset: 0x1f2
	bool bAbsoluteLocation; // Offset: 0x1f2
	bool bAbsoluteRotation; // Offset: 0x1f2
	bool bAbsoluteScale; // Offset: 0x1f2
	bool bVisible; // Offset: 0x1f2
	bool 835aeef87e; // Offset: 0x1f3
	bool 0e6b8e09ea; // Offset: 0x1f3
	bool ab188c9b93; // Offset: 0x1f3
	bool bShouldUpdatePhysicsVolume; // Offset: 0x1f3
	bool bHiddenInGame; // Offset: 0x1f3
	bool 9f606f81b1; // Offset: 0x1f3
	bool bUseAttachParentBound; // Offset: 0x1f3
	TArray<SceneComponent*> AttachChildren; // Offset: 0x218
	PhysicsVolume* PhysicsVolume; // Offset: 0x228
	Vector RelativeLocation; // Offset: 0x24c
	TArray<SceneComponent*> 39a0dd702a; // Offset: 0x258
	FName AttachSocketName; // Offset: 0x270
// ============================= //
Struct Rotator
	float Pitch; // Offset: 0x0
	float Yaw; // Offset: 0x4
	float Roll; // Offset: 0x8
// ============================= //
Enum EDetailMode
	DM_Low = 0,
	DM_Medium = 1,
	DM_High = 2,
	DM_MAX = 3;
// ============================= //
Enum EComponentMobility
	EComponentMobility::Static = 0,
	EComponentMobility::Stationary = 1,
	EComponentMobility::Movable = 2,
	EComponentMobility::EComponentMobility_MAX = 3;
// ============================= //
Enum EUpdateTransformMode
	EUpdateTransformMode::Always = 0,
	EUpdateTransformMode::WhenActive = 1,
	EUpdateTransformMode::WhenVisible = 2,
	EUpdateTransformMode::Manual = 3,
	EUpdateTransformMode::EUpdateTransformMode_MAX = 4;
// ============================= //
Class PhysicsVolume.Volume.Brush.Actor.Object
	float FluidFriction; // Offset: 0x2e8
	int Priority; // Offset: 0x2ec
	float TerminalVelocity; // Offset: 0x2f0
	bool bWaterVolume; // Offset: 0x2f4
	bool bPhysicsOnContact; // Offset: 0x2f4
	bool d64d0ba82f; // Offset: 0x2f5
// ============================= //
Class Volume.Brush.Actor.Object
// ============================= //
Class Brush.Actor.Object
	Model* Brush; // Offset: 0x2b8
	TArray<3773685f36> aeda8243bb; // Offset: 0x2c0
	bool fe67ac4c0e; // Offset: 0x2d1
	bool 1d42dce6e5; // Offset: 0x2d1
	bool 9afaa6a1e1; // Offset: 0x2d1
	bool 0a82bc1148; // Offset: 0x2d1
	bool 798ef77253; // Offset: 0x2dc
	BrushComponent* BrushComponent; // Offset: 0x2e0
// ============================= //
Struct 3773685f36
	int Type; // Offset: 0x0
	int Index; // Offset: 0x4
	int 968489299d; // Offset: 0x8
// ============================= //
Class BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* BrushBodySetup; // Offset: 0x538
	Model* Brush; // Offset: 0x540
// ============================= //
Class PrimitiveComponent.SceneComponent.ActorComponent.Object
	MulticastSparseDelegateProperty OnClicked; // Offset: 0x280
	TEnumAsByte<ERuntimeVirtualTextureMainPassType> VirtualTextureRenderPassType; // Offset: 0x281
	MulticastSparseDelegateProperty OnComponentBeginOverlap; // Offset: 0x282
	TArray<RuntimeVirtualTexture*> RuntimeVirtualTextures; // Offset: 0x288
	MulticastSparseDelegateProperty OnEndCursorOver; // Offset: 0x29c
	int CustomDepthStencilValue; // Offset: 0x2a0
	bool bUseMaxLODAsImposter; // Offset: 0x2a8
	bool bBatchImpostersAsInstances; // Offset: 0x2a8
	bool bNeverDistanceCull; // Offset: 0x2a8
	bool bAlwaysCreatePhysicsState; // Offset: 0x2a8
	bool bGenerateOverlapEvents; // Offset: 0x2a9
	bool bMultiBodyOverlap; // Offset: 0x2a9
	bool bTraceComplexOnMove; // Offset: 0x2a9
	bool bReturnMaterialOnMove; // Offset: 0x2a9
	bool 68dfff080a; // Offset: 0x2a9
	bool bAllowCullDistanceVolume; // Offset: 0x2a9
	bool 7930cbc06f; // Offset: 0x2a9
	bool bVisibleInReflectionCaptures; // Offset: 0x2a9
	bool bVisibleInRealTimeSkyCaptures; // Offset: 0x2aa
	bool bVisibleInRayTracing; // Offset: 0x2aa
	bool bRenderInMainPass; // Offset: 0x2aa
	bool bRenderInDepthPass; // Offset: 0x2aa
	bool bReceivesDecals; // Offset: 0x2aa
	bool bOwnerNoSee; // Offset: 0x2aa
	bool bOnlyOwnerSee; // Offset: 0x2aa
	bool bTreatAsBackgroundForOcclusion; // Offset: 0x2aa
	bool bRenderDepthOnlyPass; // Offset: 0x2ab
	bool bUseAsOccluder; // Offset: 0x2ab
	bool 7d4c499f09; // Offset: 0x2ab
	bool bForceMipStreaming; // Offset: 0x2ab
	bool 718b1c22f3; // Offset: 0x2ab
	bool CastShadow; // Offset: 0x2ab
	bool bHideShadowByScalability; // Offset: 0x2ab
	bool bAffectDynamicIndirectLighting; // Offset: 0x2ab
	bool bAffectDistanceFieldLighting; // Offset: 0x2ac
	bool bCastDynamicShadow; // Offset: 0x2ac
	bool bCastStaticShadow; // Offset: 0x2ac
	bool bAffectDirectionalLightingOnly; // Offset: 0x2ac
	bool bCastVolumetricTranslucentShadow; // Offset: 0x2ac
	bool bCastContactShadow; // Offset: 0x2ac
	bool bSelfShadowOnly; // Offset: 0x2ac
	bool bCastFarShadow; // Offset: 0x2ac
	bool bCastInsetShadow; // Offset: 0x2ad
	bool bCastCinematicShadow; // Offset: 0x2ad
	bool bCastHiddenShadow; // Offset: 0x2ad
	bool bCastShadowAsTwoSided; // Offset: 0x2ad
	bool bLightAsIfStatic; // Offset: 0x2ad
	bool bLightAttachmentsAsGroup; // Offset: 0x2ad
	bool bExcludeFromLightAttachmentGroup; // Offset: 0x2ad
	bool bReceiveMobileCSMShadows; // Offset: 0x2ad
	bool bSingleSampleShadowFromStationaryLights; // Offset: 0x2ae
	bool bIgnoreRadialImpulse; // Offset: 0x2ae
	bool bIgnoreRadialForce; // Offset: 0x2ae
	bool bApplyImpulseOnDamage; // Offset: 0x2ae
	bool bReplicatePhysicsToAutonomousProxy; // Offset: 0x2ae
	bool fc3a2ce0ee; // Offset: 0x2ae
	bool 744a2e4148; // Offset: 0x2ae
	bool 95bfc6d6fc; // Offset: 0x2ae
	bool c04909abf7; // Offset: 0x2af
	bool bRenderCustomDepth; // Offset: 0x2af
	bool 91d29c6d1e; // Offset: 0x2af
	MulticastSparseDelegateProperty OnComponentHit; // Offset: 0x2b0
	bool 09f1b9be4b; // Offset: 0x2b1
	bool bBasePassDrawLast; // Offset: 0x2b1
	TEnumAsByte<ECanBeCharacterBase> CanCharacterStepUpOn; // Offset: 0x2b2
	MulticastSparseDelegateProperty OnBeginCursorOver; // Offset: 0x2bc
	MulticastSparseDelegateProperty OnReleased; // Offset: 0x2d3
	LightingChannels LightingChannels; // Offset: 0x2d4
	float MinDrawDistance; // Offset: 0x2d8
	float LpvBiasMultiplier; // Offset: 0x2dc
	MulticastSparseDelegateProperty OnInputTouchBegin; // Offset: 0x2ec
	MulticastSparseDelegateProperty OnComponentWake; // Offset: 0x2ed
	MulticastSparseDelegateProperty OnInputTouchEnd; // Offset: 0x2f8
	MulticastSparseDelegateProperty OnComponentSleep; // Offset: 0x2f9
	MulticastSparseDelegateProperty OnComponentEndOverlap; // Offset: 0x2fa
	TArray<PrimitiveComponent*> d445aa8c0d; // Offset: 0x300
	float CachedMaxDrawDistance; // Offset: 0x310
	float CullingScreenSize; // Offset: 0x314
	CustomPrimitiveData CustomPrimitiveData; // Offset: 0x320
	TEnumAsByte<ERendererStencilMask> CustomDepthStencilWriteMask; // Offset: 0x330
	MulticastSparseDelegateProperty OnInputTouchEnter; // Offset: 0x331
	PrimitiveComponent* 1532b6db53; // Offset: 0x338
	CustomPrimitiveData 5d92697b72; // Offset: 0x340
	float LDMaxDrawDistance; // Offset: 0x370
	TArray<Actor*> 37dc6708e4; // Offset: 0x378
	BodyInstance BodyInstance; // Offset: 0x388
	MulticastSparseDelegateProperty OnInputTouchLeave; // Offset: 0x524
	int TranslucencySortPriority; // Offset: 0x52c
	bool bEnableDistanceCulling; // Offset: 0x530
	TEnumAsByte<ELightmapType> LightmapType; // Offset: 0x531
	TEnumAsByte<EIndirectLightingCacheQuality> IndirectLightingCacheQuality; // Offset: 0x532
// ============================= //
Enum ERuntimeVirtualTextureMainPassType
	ERuntimeVirtualTextureMainPassType::Never = 0,
	ERuntimeVirtualTextureMainPassType::Exclusive = 1,
	ERuntimeVirtualTextureMainPassType::Always = 2,
	ERuntimeVirtualTextureMainPassType::ERuntimeVirtualTextureMainPassType_MAX = 3;
// ============================= //
Class BodySetup.a9b258c83a.Object
	a82062ca27 AggGeom; // Offset: 0x88
	bool bAlwaysFullAnimWeight; // Offset: 0xe0
	bool bConsiderForBounds; // Offset: 0xe0
	bool 5aa2bdcff3; // Offset: 0xe0
	bool dc6dc42fec; // Offset: 0xe0
	bool bGenerateNonMirroredCollision; // Offset: 0xe0
	bool befdca20e3; // Offset: 0xe0
	bool bGenerateMirroredCollision; // Offset: 0xe0
	bool 59c5a18b78; // Offset: 0xe0
	PhysicalMaterial* PhysMaterial; // Offset: 0xe8
	BodyInstance DefaultInstance; // Offset: 0x120
	WalkableSlopeOverride WalkableSlopeOverride; // Offset: 0x308
// ============================= //
Class a9b258c83a.Object
	FName BoneName; // Offset: 0x6c
// ============================= //
Struct a82062ca27
	TArray<50227fb409> dd13dae6a9; // Offset: 0x0
	TArray<9c02f35ec0> cf351ff955; // Offset: 0x10
	TArray<c7c235f5a2> 7c2626502b; // Offset: 0x20
	TArray<1358bed7d7> ConvexElems; // Offset: 0x30
	TArray<b58d2ae219> d02aa54f6e; // Offset: 0x40
// ============================= //
Struct 50227fb409.af70bc510e
	Vector Center; // Offset: 0x30
	float Radius; // Offset: 0x3c
// ============================= //
Struct af70bc510e
	float RestOffset; // Offset: 0x8
	FName Name; // Offset: 0xc
	bool 141dc63f7a; // Offset: 0x18
	TEnumAsByte<ECollisionEnabled> CollisionEnabled; // Offset: 0x19
// ============================= //
Enum ECollisionEnabled
	ECollisionEnabled::NoCollision = 0,
	ECollisionEnabled::QueryOnly = 1,
	ECollisionEnabled::PhysicsOnly = 2,
	ECollisionEnabled::QueryAndPhysics = 3,
	ECollisionEnabled::ECollisionEnabled_MAX = 4;
// ============================= //
Struct 9c02f35ec0.af70bc510e
	Vector Center; // Offset: 0x30
	Rotator Rotation; // Offset: 0x3c
	float X; // Offset: 0x48
	float Y; // Offset: 0x4c
	float Z; // Offset: 0x50
// ============================= //
Struct c7c235f5a2.af70bc510e
	Vector Center; // Offset: 0x30
	Rotator Rotation; // Offset: 0x3c
	float Radius; // Offset: 0x48
	float Length; // Offset: 0x4c
// ============================= //
Struct 1358bed7d7.af70bc510e
	TArray<Vector> VertexData; // Offset: 0x30
	TArray<int> be5f935ad9; // Offset: 0x40
	Box c5be7c0e88; // Offset: 0x50
	Transform Transform; // Offset: 0x70
// ============================= //
Struct Box
	Vector Min; // Offset: 0x0
	Vector Max; // Offset: 0xc
	uint8_t IsValid; // Offset: 0x18
// ============================= //
Struct Transform
	Quat Rotation; // Offset: 0x0
	Vector Translation; // Offset: 0x10
	Vector Scale3D; // Offset: 0x1c
// ============================= //
Struct Quat
	float X; // Offset: 0x0
	float Y; // Offset: 0x4
	float Z; // Offset: 0x8
	float W; // Offset: 0xc
// ============================= //
Struct b58d2ae219.af70bc510e
	Vector Center; // Offset: 0x30
	Rotator Rotation; // Offset: 0x3c
	float baf004b0d2; // Offset: 0x48
	float 10254aed84; // Offset: 0x4c
	float Length; // Offset: 0x50
// ============================= //
Class PhysicalMaterial.Object
	TEnumAsByte<EFrictionCombineMode> RestitutionCombineMode; // Offset: 0x68
	float SleepAngularVelocityThreshold; // Offset: 0x6c
	float StaticFriction; // Offset: 0x70
	float SleepLinearVelocityThreshold; // Offset: 0x74
	float Friction; // Offset: 0x78
	int SleepCounterThreshold; // Offset: 0x88
	bool bOverrideFrictionCombineMode; // Offset: 0x8c
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty; // Offset: 0x90
	TEnumAsByte<EPhysicalSurface> SurfaceType; // Offset: 0xa8
	bool bOverrideRestitutionCombineMode; // Offset: 0xa9
	TEnumAsByte<EFrictionCombineMode> FrictionCombineMode; // Offset: 0xaa
	float Density; // Offset: 0xac
	float DestructibleDamageThresholdScale; // Offset: 0xb0
	float RaiseMassToPower; // Offset: 0xb4
	float Restitution; // Offset: 0xb8
// ============================= //
Enum EFrictionCombineMode
	EFrictionCombineMode::Average = 0,
	EFrictionCombineMode::Min = 1,
	EFrictionCombineMode::Multiply = 2,
	EFrictionCombineMode::Max = 3;
// ============================= //
Class PhysicalMaterialPropertyBase.Object
// ============================= //
Enum EPhysicalSurface
	SurfaceType_Default = 0,
	SurfaceType1 = 1,
	SurfaceType2 = 2,
	SurfaceType3 = 3,
	SurfaceType4 = 4,
	SurfaceType5 = 5,
	SurfaceType6 = 6,
	SurfaceType7 = 7,
	SurfaceType8 = 8,
	SurfaceType9 = 9,
	SurfaceType10 = 10,
	SurfaceType11 = 11,
	SurfaceType12 = 12,
	SurfaceType13 = 13,
	SurfaceType14 = 14,
	SurfaceType15 = 15,
	SurfaceType16 = 16,
	SurfaceType17 = 17,
	SurfaceType18 = 18,
	SurfaceType19 = 19,
	SurfaceType20 = 20,
	SurfaceType21 = 21,
	SurfaceType22 = 22,
	SurfaceType23 = 23,
	SurfaceType24 = 24,
	SurfaceType25 = 25,
	SurfaceType26 = 26,
	SurfaceType27 = 27,
	SurfaceType28 = 28,
	SurfaceType29 = 29,
	SurfaceType30 = 30,
	SurfaceType31 = 31,
	SurfaceType32 = 32,
	SurfaceType33 = 33,
	SurfaceType34 = 34,
	SurfaceType35 = 35,
	SurfaceType36 = 36,
	SurfaceType37 = 37,
	SurfaceType38 = 38,
	SurfaceType39 = 39,
	SurfaceType40 = 40,
	SurfaceType41 = 41,
	SurfaceType42 = 42,
	SurfaceType43 = 43,
	SurfaceType44 = 44,
	SurfaceType45 = 45,
	SurfaceType46 = 46,
	SurfaceType47 = 47,
	SurfaceType48 = 48,
	SurfaceType49 = 49,
	SurfaceType50 = 50,
	SurfaceType51 = 51,
	SurfaceType52 = 52,
	SurfaceType53 = 53,
	SurfaceType54 = 54,
	SurfaceType55 = 55,
	SurfaceType56 = 56,
	SurfaceType57 = 57,
	SurfaceType58 = 58,
	SurfaceType59 = 59,
	SurfaceType60 = 60,
	SurfaceType61 = 61,
	SurfaceType62 = 62,
	SurfaceType_Max = 63,
	EPhysicalSurface_MAX = 64;
// ============================= //
Struct BodyInstance.45dfbfc440
	TEnumAsByte<ECollisionChannel> ObjectType; // Offset: 0x32
	TEnumAsByte<ECollisionEnabled> CollisionEnabled; // Offset: 0x34
	TEnumAsByte<ESleepFamily> SleepFamily; // Offset: 0x69
	TEnumAsByte<EDOFMode> DOFMode; // Offset: 0x6a
	bool bUseCCD; // Offset: 0x6b
	bool bIgnoreAnalyticCollisions; // Offset: 0x6b
	bool bNotifyRigidBodyCollision; // Offset: 0x6b
	bool 51ea91b2b1; // Offset: 0x6b
	bool bddbfb9676; // Offset: 0x6b
	bool 10331d8392; // Offset: 0x6b
	bool fc663a0d16; // Offset: 0x6b
	bool 43f2c36e91; // Offset: 0x6c
	bool e8a3c70039; // Offset: 0x6c
	bool 797349d801; // Offset: 0x6c
	bool 94acaa34fd; // Offset: 0x6c
	bool bOverrideMaxAngularVelocity; // Offset: 0x6c
	bool bOverrideMaxDepenetrationVelocity; // Offset: 0x6d
	bool bOverrideWalkableSlopeOnInstance; // Offset: 0x6d
	bool 3a2f221db8; // Offset: 0x6d
	FName CollisionProfileName; // Offset: 0x7c
	uint8_t PositionSolverIterationCount; // Offset: 0x84
	uint8_t VelocitySolverIterationCount; // Offset: 0x85
	bb784cb1f5 CollisionResponses; // Offset: 0x88
	float MaxDepenetrationVelocity; // Offset: 0xb8
	float MassInKgOverride; // Offset: 0xbc
	float LinearDamping; // Offset: 0xe0
	float AngularDamping; // Offset: 0xe4
	Vector CustomDOFPlaneNormal; // Offset: 0xe8
	Vector COMNudge; // Offset: 0xf4
	float MassScale; // Offset: 0x100
	Vector InertiaTensorScale; // Offset: 0x104
	WalkableSlopeOverride WalkableSlopeOverride; // Offset: 0x120
	PhysicalMaterial* PhysMaterialOverride; // Offset: 0x130
	float MaxAngularVelocity; // Offset: 0x138
	float CustomSleepThresholdMultiplier; // Offset: 0x13c
	float StabilizationThresholdMultiplier; // Offset: 0x140
	float 221ec48587; // Offset: 0x144
// ============================= //
Struct 45dfbfc440
	bool bSimulatePhysics; // Offset: 0x28
	bool bOverrideMass; // Offset: 0x28
	bool bEnableGravity; // Offset: 0x28
	bool bAutoWeld; // Offset: 0x28
	bool bStartAwake; // Offset: 0x28
	bool bGenerateWakeEvents; // Offset: 0x28
	bool d6acc37f17; // Offset: 0x28
// ============================= //
Enum ECollisionChannel
	ECC_WorldStatic = 0,
	ECC_WorldDynamic = 1,
	ECC_Pawn = 2,
	ECC_Visibility = 3,
	ECC_Camera = 4,
	ECC_PhysicsBody = 5,
	ECC_Vehicle = 6,
	ECC_Destructible = 7,
	ECC_EngineTraceChannel1 = 8,
	ECC_EngineTraceChannel2 = 9,
	ECC_EngineTraceChannel3 = 10,
	ECC_EngineTraceChannel4 = 11,
	ECC_EngineTraceChannel5 = 12,
	ECC_EngineTraceChannel6 = 13,
	ECC_GameTraceChannel1 = 14,
	ECC_GameTraceChannel2 = 15,
	ECC_GameTraceChannel3 = 16,
	ECC_GameTraceChannel4 = 17,
	ECC_GameTraceChannel5 = 18,
	ECC_GameTraceChannel6 = 19,
	ECC_GameTraceChannel7 = 20,
	ECC_GameTraceChannel8 = 21,
	ECC_GameTraceChannel9 = 22,
	ECC_GameTraceChannel10 = 23,
	ECC_GameTraceChannel11 = 24,
	ECC_GameTraceChannel12 = 25,
	ECC_GameTraceChannel13 = 26,
	ECC_GameTraceChannel14 = 27,
	ECC_GameTraceChannel15 = 28,
	ECC_GameTraceChannel16 = 29,
	ECC_GameTraceChannel17 = 30,
	ECC_GameTraceChannel18 = 31,
	ECC_OverlapAll_Deprecated = 32,
	ECC_MAX = 33;
// ============================= //
Enum ESleepFamily
	ESleepFamily::Normal = 0,
	ESleepFamily::Sensitive = 1,
	ESleepFamily::Custom = 2,
	ESleepFamily::ESleepFamily_MAX = 3;
// ============================= //
Enum EDOFMode
	EDOFMode::Default = 0,
	EDOFMode::SixDOF = 1,
	EDOFMode::YZPlane = 2,
	EDOFMode::XZPlane = 3,
	EDOFMode::XYPlane = 4,
	EDOFMode::CustomPlane = 5,
	EDOFMode::None = 6,
	EDOFMode::EDOFMode_MAX = 7;
// ============================= //
Struct bb784cb1f5
	CollisionResponseContainer 659d3a344a; // Offset: 0x0
	TArray<0cb7384959> e42d3bc25d; // Offset: 0x20
// ============================= //
Struct CollisionResponseContainer
	TEnumAsByte<ECollisionResponse> WorldStatic; // Offset: 0x0
	TEnumAsByte<ECollisionResponse> WorldDynamic; // Offset: 0x1
	TEnumAsByte<ECollisionResponse> Pawn; // Offset: 0x2
	TEnumAsByte<ECollisionResponse> Visibility; // Offset: 0x3
	TEnumAsByte<ECollisionResponse> Camera; // Offset: 0x4
	TEnumAsByte<ECollisionResponse> PhysicsBody; // Offset: 0x5
	TEnumAsByte<ECollisionResponse> Vehicle; // Offset: 0x6
	TEnumAsByte<ECollisionResponse> Destructible; // Offset: 0x7
	TEnumAsByte<ECollisionResponse> EngineTraceChannel1; // Offset: 0x8
	TEnumAsByte<ECollisionResponse> EngineTraceChannel2; // Offset: 0x9
	TEnumAsByte<ECollisionResponse> EngineTraceChannel3; // Offset: 0xa
	TEnumAsByte<ECollisionResponse> EngineTraceChannel4; // Offset: 0xb
	TEnumAsByte<ECollisionResponse> EngineTraceChannel5; // Offset: 0xc
	TEnumAsByte<ECollisionResponse> EngineTraceChannel6; // Offset: 0xd
	TEnumAsByte<ECollisionResponse> GameTraceChannel1; // Offset: 0xe
	TEnumAsByte<ECollisionResponse> GameTraceChannel2; // Offset: 0xf
	TEnumAsByte<ECollisionResponse> GameTraceChannel3; // Offset: 0x10
	TEnumAsByte<ECollisionResponse> GameTraceChannel4; // Offset: 0x11
	TEnumAsByte<ECollisionResponse> GameTraceChannel5; // Offset: 0x12
	TEnumAsByte<ECollisionResponse> GameTraceChannel6; // Offset: 0x13
	TEnumAsByte<ECollisionResponse> GameTraceChannel7; // Offset: 0x14
	TEnumAsByte<ECollisionResponse> GameTraceChannel8; // Offset: 0x15
	TEnumAsByte<ECollisionResponse> GameTraceChannel9; // Offset: 0x16
	TEnumAsByte<ECollisionResponse> GameTraceChannel10; // Offset: 0x17
	TEnumAsByte<ECollisionResponse> GameTraceChannel11; // Offset: 0x18
	TEnumAsByte<ECollisionResponse> GameTraceChannel12; // Offset: 0x19
	TEnumAsByte<ECollisionResponse> GameTraceChannel13; // Offset: 0x1a
	TEnumAsByte<ECollisionResponse> GameTraceChannel14; // Offset: 0x1b
	TEnumAsByte<ECollisionResponse> GameTraceChannel15; // Offset: 0x1c
	TEnumAsByte<ECollisionResponse> GameTraceChannel16; // Offset: 0x1d
	TEnumAsByte<ECollisionResponse> GameTraceChannel17; // Offset: 0x1e
	TEnumAsByte<ECollisionResponse> GameTraceChannel18; // Offset: 0x1f
// ============================= //
Enum ECollisionResponse
	ECR_Ignore = 0,
	ECR_Overlap = 1,
	ECR_Block = 2,
	ECR_MAX = 3;
// ============================= //
Struct 0cb7384959
	FName Channel; // Offset: 0x0
	TEnumAsByte<ECollisionResponse> Response; // Offset: 0x8
// ============================= //
Struct WalkableSlopeOverride
	TEnumAsByte<EWalkableSlopeBehavior> WalkableSlopeBehavior; // Offset: 0x0
	float WalkableSlopeAngle; // Offset: 0x4
// ============================= //
Enum EWalkableSlopeBehavior
	WalkableSlope_Default = 0,
	WalkableSlope_Increase = 1,
	WalkableSlope_Decrease = 2,
	WalkableSlope_Unwalkable = 3,
	WalkableSlope_Max = 4;
// ============================= //
Class RuntimeVirtualTexture.Object
	9ecffb1187* StreamingTexture; // Offset: 0x68
	bool bCompressTextures; // Offset: 0x70
	TEnumAsByte<TextureGroup> LODGroup; // Offset: 0xe9
	TEnumAsByte<ERuntimeVirtualTextureMaterialType> MaterialType; // Offset: 0xf0
// ============================= //
Class 9ecffb1187.Texture2D.Texture.638112bfc1.Object
// ============================= //
Class Texture2D.Texture.638112bfc1.Object
	bool 3ee5c8b7a3; // Offset: 0x140
	TEnumAsByte<TextureAddress> AddressY; // Offset: 0x141
	TEnumAsByte<TextureAddress> AddressX; // Offset: 0x142
	int LevelIndex; // Offset: 0x144
// ============================= //
Class Texture.638112bfc1.Object
	TEnumAsByte<ETextureMipLoadOptions> MipLoadOptions; // Offset: 0xb0
	TEnumAsByte<ETextureDownscaleOptions> 02f251ce66; // Offset: 0xc4
	TEnumAsByte<TextureCompressionSettings> CompressionSettings; // Offset: 0xc5
	TArray<AssetUserData*> AssetUserData; // Offset: 0xc8
	PerPlatformFloat Downscale; // Offset: 0xd8
	int LODBias; // Offset: 0xdc
	int InGameLODBias; // Offset: 0xe0
	bool SRGB; // Offset: 0xf0
	bool 1c0346dbce; // Offset: 0xf0
	bool VirtualTextureStreaming; // Offset: 0xf0
	bool 923b619a7a; // Offset: 0xf0
	bool 35e500ee0e; // Offset: 0xf0
	bool 9a20df0c78; // Offset: 0xf0
	TEnumAsByte<TextureGroup> LODGroup; // Offset: 0x130
	TEnumAsByte<TextureFilter> Filter; // Offset: 0x131
// ============================= //
Class 638112bfc1.Object
	int NumCinematicMipLevels; // Offset: 0x78
	int a38c51201a; // Offset: 0x7c
	int 4edfcbbba9; // Offset: 0x88
	bool NeverStream; // Offset: 0x98
	bool bGlobalForceMipLevelsToBeResident; // Offset: 0x98
	bool 314efbe1a0; // Offset: 0x98
	bool bForceMiplevelsToBeResident; // Offset: 0x98
	bool 6890832dff; // Offset: 0x98
	bool 641aecebe9; // Offset: 0x98
	double 8d509835aa; // Offset: 0xa0
// ============================= //
Enum TextureAddress
	TA_Wrap = 0,
	TA_Clamp = 1,
	TA_Mirror = 2,
	TA_MAX = 3;
// ============================= //
Enum ETextureMipLoadOptions
	ETextureMipLoadOptions::Default = 0,
	ETextureMipLoadOptions::AllMips = 1,
	ETextureMipLoadOptions::OnlyFirstMip = 2,
	ETextureMipLoadOptions::ETextureMipLoadOptions_MAX = 3;
// ============================= //
Enum ETextureDownscaleOptions
	ETextureDownscaleOptions::Default = 0,
	ETextureDownscaleOptions::Unfiltered = 1,
	ETextureDownscaleOptions::SimpleAverage = 2,
	ETextureDownscaleOptions::Sharpen0 = 3,
	ETextureDownscaleOptions::Sharpen1 = 4,
	ETextureDownscaleOptions::Sharpen2 = 5,
	ETextureDownscaleOptions::Sharpen3 = 6,
	ETextureDownscaleOptions::Sharpen4 = 7,
	ETextureDownscaleOptions::Sharpen5 = 8,
	ETextureDownscaleOptions::Sharpen6 = 9,
	ETextureDownscaleOptions::Sharpen7 = 10,
	ETextureDownscaleOptions::Sharpen8 = 11,
	ETextureDownscaleOptions::Sharpen9 = 12,
	ETextureDownscaleOptions::Sharpen10 = 13,
	ETextureDownscaleOptions::ETextureDownscaleOptions_MAX = 14;
// ============================= //
Enum TextureCompressionSettings
	TC_Default = 0,
	TC_Normalmap = 1,
	TC_Masks = 2,
	TC_Grayscale = 3,
	TC_Displacementmap = 4,
	TC_VectorDisplacementmap = 5,
	TC_HDR = 6,
	TC_EditorIcon = 7,
	TC_Alpha = 8,
	TC_DistanceFieldFont = 9,
	TC_HDR_Compressed = 10,
	TC_BC7 = 11,
	TC_HalfFloat = 12,
	TC_ReflectionCapture = 13,
	TC_MAX = 14;
// ============================= //
Struct PerPlatformFloat
	float Default; // Offset: 0x0
// ============================= //
Enum TextureGroup
	TEXTUREGROUP_World = 0,
	TEXTUREGROUP_WorldNormalMap = 1,
	TEXTUREGROUP_WorldSpecular = 2,
	TEXTUREGROUP_Character = 3,
	TEXTUREGROUP_CharacterNormalMap = 4,
	TEXTUREGROUP_CharacterSpecular = 5,
	TEXTUREGROUP_Weapon = 6,
	TEXTUREGROUP_WeaponNormalMap = 7,
	TEXTUREGROUP_WeaponSpecular = 8,
	TEXTUREGROUP_Vehicle = 9,
	TEXTUREGROUP_VehicleNormalMap = 10,
	TEXTUREGROUP_VehicleSpecular = 11,
	TEXTUREGROUP_Cinematic = 12,
	TEXTUREGROUP_Effects = 13,
	TEXTUREGROUP_EffectsNotFiltered = 14,
	TEXTUREGROUP_Skybox = 15,
	TEXTUREGROUP_UI = 16,
	TEXTUREGROUP_Lightmap = 17,
	TEXTUREGROUP_RenderTarget = 18,
	TEXTUREGROUP_MobileFlattened = 19,
	TEXTUREGROUP_ProcBuilding_Face = 20,
	TEXTUREGROUP_ProcBuilding_LightMap = 21,
	TEXTUREGROUP_Shadowmap = 22,
	TEXTUREGROUP_ColorLookupTable = 23,
	TEXTUREGROUP_Terrain_Heightmap = 24,
	TEXTUREGROUP_Terrain_Weightmap = 25,
	TEXTUREGROUP_Bokeh = 26,
	TEXTUREGROUP_IESLightProfile = 27,
	TEXTUREGROUP_Pixels2D = 28,
	TEXTUREGROUP_HierarchicalLOD = 29,
	TEXTUREGROUP_Impostor = 30,
	TEXTUREGROUP_ImpostorNormalDepth = 31,
	TEXTUREGROUP_8BitData = 32,
	TEXTUREGROUP_16BitData = 33,
	TEXTUREGROUP_Project01 = 34,
	TEXTUREGROUP_Project02 = 35,
	TEXTUREGROUP_Project03 = 36,
	TEXTUREGROUP_Project04 = 37,
	TEXTUREGROUP_Project05 = 38,
	TEXTUREGROUP_Project06 = 39,
	TEXTUREGROUP_Project07 = 40,
	TEXTUREGROUP_Project08 = 41,
	TEXTUREGROUP_Project09 = 42,
	TEXTUREGROUP_Project10 = 43,
	TEXTUREGROUP_Project11 = 44,
	TEXTUREGROUP_Project12 = 45,
	TEXTUREGROUP_Project13 = 46,
	TEXTUREGROUP_Project14 = 47,
	TEXTUREGROUP_Project15 = 48,
	TEXTUREGROUP_MAX = 49;
// ============================= //
Enum TextureFilter
	TF_Nearest = 0,
	TF_Bilinear = 1,
	TF_Trilinear = 2,
	TF_Default = 3,
	TF_MAX = 4;
// ============================= //
Enum ERuntimeVirtualTextureMaterialType
	ERuntimeVirtualTextureMaterialType::BaseColor = 0,
	ERuntimeVirtualTextureMaterialType::BaseColor_Normal_DEPRECATED = 1,
	ERuntimeVirtualTextureMaterialType::BaseColor_Normal_Specular = 2,
	ERuntimeVirtualTextureMaterialType::BaseColor_Normal_Specular_YCoCg = 3,
	ERuntimeVirtualTextureMaterialType::BaseColor_Normal_Specular_Mask_YCoCg = 4,
	ERuntimeVirtualTextureMaterialType::WorldHeight = 5,
	ERuntimeVirtualTextureMaterialType::Count = 6,
	ERuntimeVirtualTextureMaterialType::ERuntimeVirtualTextureMaterialType_MAX = 7;
// ============================= //
Enum ECanBeCharacterBase
	ECB_No = 0,
	ECB_Yes = 1,
	ECB_Owner = 2,
	ECB_MAX = 3;
// ============================= //
Struct LightingChannels
	bool bChannel0; // Offset: 0x0
	bool bChannel1; // Offset: 0x0
	bool bChannel2; // Offset: 0x0
// ============================= //
Struct CustomPrimitiveData
	TArray<float> Data; // Offset: 0x0
// ============================= //
Enum ERendererStencilMask
	ERendererStencilMask::ERSM_Default = 0,
	ERendererStencilMask::ERSM = 1,
	ERendererStencilMask::ERSM = 2,
	ERendererStencilMask::ERSM = 3,
	ERendererStencilMask::ERSM = 4,
	ERendererStencilMask::ERSM = 5,
	ERendererStencilMask::ERSM = 6,
	ERendererStencilMask::ERSM = 7,
	ERendererStencilMask::ERSM = 8,
	ERendererStencilMask::ERSM = 9,
	ERendererStencilMask::ERSM_MAX = 10;
// ============================= //
Enum ELightmapType
	ELightmapType::Default = 0,
	ELightmapType::ForceSurface = 1,
	ELightmapType::ForceVolumetric = 2,
	ELightmapType::ELightmapType_MAX = 3;
// ============================= //
Enum EIndirectLightingCacheQuality
	ILCQ_Off = 0,
	ILCQ_Point = 1,
	ILCQ_Volume = 2,
	ILCQ_MAX = 3;
// ============================= //
Enum ENetRole
	ROLE_None = 0,
	ROLE_SimulatedProxy = 1,
	ROLE_AutonomousProxy = 2,
	ROLE_Authority = 3,
	ROLE_MAX = 4;
// ============================= //
Enum ENetDormancy
	DORM_Never = 0,
	DORM_Awake = 1,
	DORM_DormantAll = 2,
	DORM_DormantPartial = 3,
	DORM_Initial = 4,
	DORM_MAX = 5;
// ============================= //
Class MatineeActor.Actor.Object
	MulticastInlineDelegateProperty OnStop; // Offset: 0x2b8
	uint8_t 8b9a5d6568; // Offset: 0x2c8
	TArray<9113c1b736> GroupActorInfos; // Offset: 0x2d0
	bool bPlayOnLevelLoad; // Offset: 0x2e0
	bool bForceStartPos; // Offset: 0x2e0
	InterpData* MatineeData; // Offset: 0x2e8
	bool bLooping; // Offset: 0x2f0
	bool bRewindOnPlay; // Offset: 0x2f0
	bool bNoResetOnRewind; // Offset: 0x2f0
	bool bRewindIfAlreadyPlaying; // Offset: 0x2f0
	bool bDisableRadioFilter; // Offset: 0x2f0
	bool bClientSideOnly; // Offset: 0x2f0
	bool bSkipUpdateIfNotVisible; // Offset: 0x2f0
	bool bIsSkippable; // Offset: 0x2f0
	float PlayRate; // Offset: 0x2f4
	bool bDisableMovementInput; // Offset: 0x2f8
	bool bDisableLookAtInput; // Offset: 0x2f8
	bool bHidePlayer; // Offset: 0x2f8
	bool bHideHud; // Offset: 0x2f8
	FName 06b95271e6; // Offset: 0x2fc
	bool c3bb9ec50c; // Offset: 0x304
	float ForceStartPosition; // Offset: 0x308
	int PreferredSplitScreenNum; // Offset: 0x30c
	bool bIsPlaying; // Offset: 0x310
	bool e1e4d1d66d; // Offset: 0x310
	bool 7c94609b60; // Offset: 0x310
	bool 9c879d7ba7; // Offset: 0x310
	TArray<9dac0cd357> 988dfbe982; // Offset: 0x318
	MulticastInlineDelegateProperty OnPause; // Offset: 0x328
	float InterpPosition; // Offset: 0x340
	MulticastInlineDelegateProperty OnPlay; // Offset: 0x348
	TArray<6d4676e0fb*> 921f46a87f; // Offset: 0x358
// ============================= //
Struct 9113c1b736
	FName ObjectName; // Offset: 0x0
	TArray<Actor*> Actors; // Offset: 0x8
// ============================= //
Class InterpData.Object
	TArray<InterpGroup*> InterpGroups; // Offset: 0x68
	TArray<FName> 0db9d72068; // Offset: 0x78
	InterpCurveEdSetup* 47b771eeaa; // Offset: 0x88
	float InterpLength; // Offset: 0x94
	dfd28374d2* 13b67af099; // Offset: 0x98
	bool a8a480bf0c; // Offset: 0xa0
// ============================= //
Class InterpGroup.Object
	FName GroupName; // Offset: 0x70
	TArray<e4400a65be*> InterpTracks; // Offset: 0x78
	bool bCollapsed; // Offset: 0x8c
	bool bVisible; // Offset: 0x8c
	bool 369e006575; // Offset: 0x8c
	bool e94fd8dd70; // Offset: 0x8c
	bool bIsSelected; // Offset: 0x8c
// ============================= //
Class e4400a65be.Object
	4866c69594* acf4a07e80; // Offset: 0x78
	TArray<e4400a65be*> SubTracks; // Offset: 0x88
	bool 4f8e9d4d50; // Offset: 0xa8
	bool 41ed153c41; // Offset: 0xa8
	bool da42657554; // Offset: 0xa8
	bool bIsSelected; // Offset: 0xa8
	bool c1ef31b63f; // Offset: 0xa8
	bool 3d12d33180; // Offset: 0xa8
	bool bVisible; // Offset: 0xa8
	bool a74c8ef92a; // Offset: 0xa8
// ============================= //
Class 4866c69594.Object
// ============================= //
Class InterpCurveEdSetup.Object
	TArray<78ca98a1dc> Tabs; // Offset: 0x70
// ============================= //
Struct 78ca98a1dc
	FString TabName; // Offset: 0x0
	TArray<a23600902a> Curves; // Offset: 0x10
	float d9e149ffa9; // Offset: 0x20
	float ac1c72d8b3; // Offset: 0x24
	float 7345a7b11f; // Offset: 0x28
	float 1801ca8624; // Offset: 0x2c
// ============================= //
Struct a23600902a
	Object* 275eef0c5f; // Offset: 0x0
	Color 123d1449f7; // Offset: 0x8
	FString CurveName; // Offset: 0x10
	int e2c91895b3; // Offset: 0x20
	int 7e97d3e9c3; // Offset: 0x24
	int 556164bbed; // Offset: 0x28
	int 546a5d7364; // Offset: 0x2c
	float 2024850914; // Offset: 0x30
	float 2a173a8179; // Offset: 0x34
// ============================= //
Struct Color
	uint8_t B; // Offset: 0x0
	uint8_t G; // Offset: 0x1
	uint8_t R; // Offset: 0x2
	uint8_t A; // Offset: 0x3
// ============================= //
Class dfd28374d2.InterpGroup.Object
// ============================= //
Struct 9dac0cd357
	Vector Location; // Offset: 0x0
	float Timestamp; // Offset: 0xc
// ============================= //
Class 6d4676e0fb.Object
	TArray<4866c69594*> bfc16cd746; // Offset: 0x68
	InterpGroup* Group; // Offset: 0x78
	Actor* GroupActor; // Offset: 0x80
// ============================= //
Class InputComponent.ActorComponent.Object
	TArray<0c831c6fcf> 0c831c6fcf; // Offset: 0x108
// ============================= //
Struct 0c831c6fcf
	PlayerInput* PlayerInput; // Offset: 0x0
// ============================= //
Class PlayerInput.Object
	TArray<FName> InvertedAxis; // Offset: 0x218
	TArray<KeyBind> DebugExecBindings; // Offset: 0x418
// ============================= //
Struct KeyBind
	Key Key; // Offset: 0x0
	FString Command; // Offset: 0x18
	bool Control; // Offset: 0x28
	bool Shift; // Offset: 0x28
	bool Alt; // Offset: 0x28
	bool Cmd; // Offset: 0x28
	bool bIgnoreCtrl; // Offset: 0x28
	bool bIgnoreShift; // Offset: 0x28
	bool bIgnoreAlt; // Offset: 0x28
	bool bIgnoreCmd; // Offset: 0x28
	bool bDisabled; // Offset: 0x29
// ============================= //
Struct Key
	FName KeyName; // Offset: 0x0
// ============================= //
Struct RepMovement
	Vector LinearVelocity; // Offset: 0x0
	Vector AngularVelocity; // Offset: 0xc
	Vector Location; // Offset: 0x18
	Rotator Rotation; // Offset: 0x24
	bool 712bea001c; // Offset: 0x30
	bool 0bd72fe400; // Offset: 0x30
	TEnumAsByte<EVectorQuantization> b3ed872062; // Offset: 0x31
	TEnumAsByte<EVectorQuantization> 4c4f97c689; // Offset: 0x32
	TEnumAsByte<ERotatorQuantization> 1acc49b87e; // Offset: 0x33
// ============================= //
Enum EVectorQuantization
	EVectorQuantization::RoundWholeNumber = 0,
	EVectorQuantization::RoundOneDecimal = 1,
	EVectorQuantization::RoundTwoDecimals = 2,
	EVectorQuantization::EVectorQuantization_MAX = 3;
// ============================= //
Enum ERotatorQuantization
	ERotatorQuantization::ByteComponents = 0,
	ERotatorQuantization::ShortComponents = 1,
	ERotatorQuantization::ERotatorQuantization_MAX = 2;
// ============================= //
Struct de7d081164
	Actor* AttachParent; // Offset: 0x0
	Vector_NetQuantize100 LocationOffset; // Offset: 0x8
	Vector_NetQuantize100 RelativeScale3D; // Offset: 0x14
	Rotator RotationOffset; // Offset: 0x20
	FName bcd1801e2e; // Offset: 0x2c
	SceneComponent* AttachComponent; // Offset: 0x38
// ============================= //
Struct Vector_NetQuantize100.Vector
// ============================= //
Class ChildActorComponent.SceneComponent.ActorComponent.Object
	3a3edb4d9d 776dc247ec; // Offset: 0x280
	Actor* ChildActor; // Offset: 0x2d8
	CustomPrimitiveData CustomPrimitiveData; // Offset: 0x2e0
	Actor* ChildActorTemplate; // Offset: 0x300
	Actor* ChildActorClass; // Offset: 0x308
// ============================= //
Struct 3a3edb4d9d
	MapProperty 357426c0fc; // Offset: 0x0
// ============================= //
Struct 9e70421366.7a1a2c8098
// ============================= //
Class Pawn.Actor.Object
	bool bUseControllerRotationPitch; // Offset: 0x2c0
	bool bUseControllerRotationYaw; // Offset: 0x2c0
	bool bUseControllerRotationRoll; // Offset: 0x2c0
	bool bCanAffectNavigationGeneration; // Offset: 0x2c0
	TEnumAsByte<EAutoPossessAI> 7981558104; // Offset: 0x2c1
	uint8_t 930e9a40e7; // Offset: 0x2cc
	Controller* AIControllerClass; // Offset: 0x2d0
	XigPtrProperty PlayerState; // Offset: 0x2d8
	XigPtrProperty LastHitBy; // Offset: 0x300
	XigPtrProperty Controller; // Offset: 0x320
	Vector aaaa15c99f; // Offset: 0x344
	Vector 3ed1d9eaa3; // Offset: 0x350
	float BaseEyeHeight; // Offset: 0x35c
// ============================= //
Enum EAutoPossessAI
	EAutoPossessAI::Disabled = 0,
	EAutoPossessAI::PlacedInWorld = 1,
	EAutoPossessAI::Spawned = 2,
	EAutoPossessAI::PlacedInWorldOrSpawned = 3,
	EAutoPossessAI::EAutoPossessAI_MAX = 4;
// ============================= //
Class Controller.Actor.Object
	XigPtrProperty PlayerState; // Offset: 0x2c0
	MulticastInlineDelegateProperty OnInstigatedAnyDamage; // Offset: 0x2e0
	XigPtrProperty Pawn; // Offset: 0x330
	FName StateName; // Offset: 0x350
	SceneComponent* TransformComponent; // Offset: 0x3a0
	bool 77bcc62bfc; // Offset: 0x3a8
// ============================= //
Class NavigationObjectBase.Actor.Object
	BillboardComponent* 391b3f1141; // Offset: 0x2c0
	BillboardComponent* a010e07d2e; // Offset: 0x2c8
	CapsuleComponent* CapsuleComponent; // Offset: 0x2d0
	bool 8df1afe3fc; // Offset: 0x2d8
// ============================= //
Class BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VL; // Offset: 0x534
	bool bIsScreenSizeScaled; // Offset: 0x538
	float ScreenSize; // Offset: 0x53c
	Texture2D* Sprite; // Offset: 0x548
	float U; // Offset: 0x550
	float UL; // Offset: 0x554
	float V; // Offset: 0x558
// ============================= //
Class CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight; // Offset: 0x54c
	float CapsuleRadius; // Offset: 0x550
// ============================= //
Class ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor; // Offset: 0x534
	BodySetup* fbf5775930; // Offset: 0x538
	2571ea275f* AreaClass; // Offset: 0x540
	bool 838ca11431; // Offset: 0x548
	bool 3f6595c7c7; // Offset: 0x548
	bool f605459b0e; // Offset: 0x548
// ============================= //
Class 2571ea275f.Object
// ============================= //
Class WorldSettings.Info.Actor.Object
	float 514596d1df; // Offset: 0x2c4
	bool bPrecomputeVisibility; // Offset: 0x2c8
	bool bPlaceCellsOnlyAlongCameraTracks; // Offset: 0x2c8
	bool bEnableWorldBoundsChecks; // Offset: 0x2c8
	bool bEnableNavigationSystem; // Offset: 0x2c8
	bool bEnableAISystem; // Offset: 0x2c8
	bool bEnableWorldComposition; // Offset: 0x2c8
	bool bUseClientSideLevelStreamingVolumes; // Offset: 0x2c8
	bool bEnableWorldOriginRebasing; // Offset: 0x2c8
	bool bEnableWorldCompositionStreaming3D; // Offset: 0x2c9
	bool afdceb8613; // Offset: 0x2d0
	bool bGlobalGravitySet; // Offset: 0x2d0
	bool e359850ef1; // Offset: 0x2d0
	bool bForceNoPrecomputedLighting; // Offset: 0x2d0
	bool 995a79ef51; // Offset: 0x2d0
	bool 731caaefe0; // Offset: 0x2d0
	bool bOverrideDefaultBroadphaseSettings; // Offset: 0x2d0
	float LandGI_DotAngle; // Offset: 0x2d4
	float LandGI_U_Offset; // Offset: 0x328
	PlayerState* 208f3f9ae3; // Offset: 0x330
	float LandGI_DotMax; // Offset: 0x338
	float MaxUndilatedFrameTime; // Offset: 0x340
	GameModeBase* DefaultGameMode; // Offset: 0x348
	Texture2D* LandGI_Texture; // Offset: 0x350
	int MaxNumberOfBookmarks; // Offset: 0x358
	float GlobalGravityZ; // Offset: 0x35c
	BookmarkBase* DefaultBookmarkClass; // Offset: 0x360
	float LandGI_Intensity; // Offset: 0x368
	float MonoCullingDistance; // Offset: 0x374
	PlayerState* 16ac577d07; // Offset: 0x378
	float MaxGlobalTimeDilation; // Offset: 0x380
	float MinGlobalTimeDilation; // Offset: 0x384
	TArray<0f9b668026> d84d0ad724; // Offset: 0x388
	NavigationSystemConfig* NavigationSystemConfig; // Offset: 0x398
	BroadphaseSettings BroadphaseSettings; // Offset: 0x3b0
	PhysicsCollisionHandler* PhysicsCollisionHandlerClass; // Offset: 0x3d8
	TArray<9359741f93> ImposterMaterialColors; // Offset: 0x3e0
	BookmarkBase* e6e2282ea6; // Offset: 0x3f0
	float LandGI_WorldXYSize; // Offset: 0x3f8
	float LandGI_V_Offset; // Offset: 0x3fc
	Vector DefaultColorScale; // Offset: 0x400
	DefaultPhysicsVolume* DefaultPhysicsVolumeClass; // Offset: 0x460
	float KillZ; // Offset: 0x468
	DamageType* KillZDamageType; // Offset: 0x470
	TArray<AssetUserData*> AssetUserData; // Offset: 0x478
	GameNetworkManager* b0cd50c75a; // Offset: 0x488
	float XtmBuilding_OutdoorLandGIPow; // Offset: 0x490
	0c32194791 DefaultAmbientZoneSettings; // Offset: 0x494
	MapProperty LandMaterialColors; // Offset: 0x4b8
	TArray<BookmarkBase*> 55938eeebd; // Offset: 0x508
	MapProperty FarLandscapeMaterialColors; // Offset: 0x520
	float XtmBuilding_IndoorLightIntensity; // Offset: 0x570
	float DynamicIndirectShadowsSelfShadowingIntensity; // Offset: 0x574
	float WorldCompositionStreamingZOffset; // Offset: 0x578
	float 4427ac95cf; // Offset: 0x57c
	float MinUndilatedFrameTime; // Offset: 0x588
	TArray<9359741f93> GrassMaterialColors; // Offset: 0x5b0
	float TimeDilation; // Offset: 0x5c4
	float 05d6488d0e; // Offset: 0x5c8
	SoundMix* DefaultBaseSoundMix; // Offset: 0x5d0
	NavigationSystemConfig* 9dffda6f4e; // Offset: 0x5d8
	float WorldToMeters; // Offset: 0x5e0
	ReverbSettings DefaultReverbSettings; // Offset: 0x5e8
// ============================= //
Class Info.Actor.Object
// ============================= //
Class PlayerState.Info.Actor.Object
	UniqueNetIdRepl UniqueId; // Offset: 0x2b8
	int StartTime; // Offset: 0x2f0
	bool 435803aabc; // Offset: 0x2f5
	bool bIsSpectator; // Offset: 0x2f5
	bool 0796813876; // Offset: 0x2f5
	bool bIsABot; // Offset: 0x2f5
	bool 7bb3caca51; // Offset: 0x2f5
	bool 1a61dcc47b; // Offset: 0x2f5
	FString 2be1ed4a36; // Offset: 0x2f8
	112ea71b06* 410ea45517; // Offset: 0x308
	int PlayerId; // Offset: 0x310
	uint8_t Ping; // Offset: 0x3a0
	float Score; // Offset: 0x3a4
	Pawn* PawnPrivate; // Offset: 0x3b0
// ============================= //
Struct UniqueNetIdRepl.ee87b0411c
	TArray<uint8_t> 7f95c73e35; // Offset: 0x18
// ============================= //
Struct ee87b0411c
// ============================= //
Class 112ea71b06.Object
// ============================= //
Class GameModeBase.Info.Actor.Object
	FString OptionsString; // Offset: 0x2b8
	PlayerController* PlayerControllerClass; // Offset: 0x2c8
	PlayerController* ReplaySpectatorPlayerControllerClass; // Offset: 0x2d0
	Pawn* DefaultPawnClass; // Offset: 0x2d8
	GameSession* GameSessionClass; // Offset: 0x2e0
	ServerStatReplicator* ServerStatReplicatorClass; // Offset: 0x2e8
	PlayerState* PlayerStateClass; // Offset: 0x308
	GameSession* GameSession; // Offset: 0x310
	GameStateBase* GameStateClass; // Offset: 0x318
	ServerStatReplicator* ServerStatReplicator; // Offset: 0x320
	HUD* HUDClass; // Offset: 0x328
	GameStateBase* GameState; // Offset: 0x340
	bool bUseSeamlessTravel; // Offset: 0x348
	bool bStartPlayersAsSpectators; // Offset: 0x348
	bool bPauseable; // Offset: 0x348
	SpectatorPawn* SpectatorClass; // Offset: 0x350
// ============================= //
Class PlayerController.Controller.Actor.Object
	XigPtrProperty Player; // Offset: 0x3b0
	XigPtrProperty AcknowledgedPawn; // Offset: 0x3d0
	XigPtrProperty PlayerCameraManager; // Offset: 0x420
	NetConnection* NetConnection; // Offset: 0x440
	Rotator 1f4966e91a; // Offset: 0x448
	TArray<Actor*> HiddenActors; // Offset: 0x458
	NetConnection* 72806259b3; // Offset: 0x470
	HUD* 2d65dac5f1; // Offset: 0x478
	float InputRollScale; // Offset: 0x49c
	TEnumAsByte<ECollisionChannel> CurrentClickTraceChannel; // Offset: 0x4c0
	TArray<15e99d5b7f> 76ab39bcca; // Offset: 0x4c8
	CheatManager* CheatManager; // Offset: 0x4d8
	float InputYawScale; // Offset: 0x4e4
	float ForceFeedbackScale; // Offset: 0x4ec
	Rotator b6e509259e; // Offset: 0x4f0
	Vector SpawnLocation; // Offset: 0x4fc
	TouchInterface* cc628423ac; // Offset: 0x528
	bool bPlayerIsWaiting; // Offset: 0x538
	ee291b1e71* 97a5866ece; // Offset: 0x550
	bool bShowMouseCursor; // Offset: 0x588
	bool bEnableClickEvents; // Offset: 0x588
	bool bEnableTouchEvents; // Offset: 0x588
	bool bEnableMouseOverEvents; // Offset: 0x588
	bool bEnableTouchOverEvents; // Offset: 0x588
	bool bForceFeedbackEnabled; // Offset: 0x588
	float HitResultTraceDistance; // Offset: 0x58c
	float SmoothTargetViewRotationSpeed; // Offset: 0x590
	SpectatorPawn* SpectatorPawn; // Offset: 0x598
	TEnumAsByte<ECollisionChannel> DefaultClickTraceChannel; // Offset: 0x5b4
	Vector ee96457766; // Offset: 0x5b8
	PlayerCameraManager* PlayerCameraManagerClass; // Offset: 0x5c8
	TArray<PrimitiveComponent*> 981f95047c; // Offset: 0x740
	bool bShouldPerformFullTickWhenPaused; // Offset: 0x750
	PlayerInput* PlayerInput; // Offset: 0x7b0
	TArray<Key> ClickEventKeys; // Offset: 0x7d0
	TEnumAsByte<EMouseCursor> DefaultMouseCursor; // Offset: 0x7e0
	TEnumAsByte<EMouseCursor> CurrentMouseCursor; // Offset: 0x7e1
	InputComponent* 4d1d538df1; // Offset: 0x7e8
	bool 485c2778b3; // Offset: 0x7f0
	float InputPitchScale; // Offset: 0x7f4
	CheatManager* CheatClass; // Offset: 0x848
// ============================= //
Class NetConnection.Player.Object
	TArray<ChildConnection*> Children; // Offset: 0xa0
	NetDriver* Driver; // Offset: 0xb0
	PackageMap* PackageMapClass; // Offset: 0xb8
	PackageMap* PackageMap; // Offset: 0xc0
	TArray<Channel*> OpenChannels; // Offset: 0xc8
	TArray<Actor*> 3553f0e50b; // Offset: 0xd8
	Actor* ViewTarget; // Offset: 0xe8
	Actor* 575bea43ee; // Offset: 0xf0
	int MaxPacket; // Offset: 0xf8
	bool InternalAck; // Offset: 0xfc
	UniqueNetIdRepl PlayerId; // Offset: 0x1b8
	double 8ba6c7ce12; // Offset: 0x228
	TArray<Channel*> d53d172776; // Offset: 0x1570
// ============================= //
Class Player.Object
	int ConfiguredLanSpeed; // Offset: 0x74
	int ConfiguredInternetSpeed; // Offset: 0x98
// ============================= //
Class ChildConnection.NetConnection.Player.Object
	NetConnection* Parent; // Offset: 0x1b48
// ============================= //
Class NetDriver.Object
	bool bClampListenServerTickRate; // Offset: 0x80
	float ConnectionTimeout; // Offset: 0x8c
	bool bNoTimeouts; // Offset: 0x90
	TArray<Channel*> ActorChannelPool; // Offset: 0xa0
	MapProperty 7579b473e1; // Offset: 0xb8
	int MaxInternetClientRate; // Offset: 0x1e4
	bool bNeverApplyNetworkEmulationSettings; // Offset: 0x1ec
	int RecentlyDisconnectedTrackingTime; // Offset: 0x1fc
	float TimeoutMultiplierForUnoptimizedBuilds; // Offset: 0x224
	Object* 9a0d19d813; // Offset: 0x228
	float SpawnPrioritySeconds; // Offset: 0x238
	TArray<8b5e4839f1> ChannelDefinitions; // Offset: 0x2b8
	World* World; // Offset: 0x3d0
	ReplicationDriver* ReplicationDriver; // Offset: 0x468
	int MaxClientRate; // Offset: 0x4d8
	int MaxDownloadSize; // Offset: 0x4f0
	FString NetConnectionClassName; // Offset: 0x508
	float RelevantTimeout; // Offset: 0x518
	float KeepAliveTime; // Offset: 0x520
	float InitialConnectTimeout; // Offset: 0x528
	FName NetDriverName; // Offset: 0x588
	TArray<NetConnection*> ClientConnections; // Offset: 0x628
	int NetServerMaxTickRate; // Offset: 0x63c
	FString ReplicationDriverClassName; // Offset: 0x660
	NetConnection* ServerConnection; // Offset: 0x6c8
	Object* ReplicationDriverClass; // Offset: 0x6d8
	Package* 13fae84214; // Offset: 0x6e8
	float ServerTravelPause; // Offset: 0x720
	int MaxNetTickRate; // Offset: 0x7fc
// ============================= //
Class Channel.Object
	NetConnection* Connection; // Offset: 0xa0
// ============================= //
Struct 8b5e4839f1
	FName ChannelName; // Offset: 0x0
	FName ClassName; // Offset: 0x8
	Object* fc4d0d6838; // Offset: 0x10
	int StaticChannelIndex; // Offset: 0x18
	bool bTickOnCreate; // Offset: 0x1c
	bool bServerOpen; // Offset: 0x1d
	bool bClientOpen; // Offset: 0x1e
	bool bInitialServer; // Offset: 0x1f
	bool bInitialClient; // Offset: 0x20
// ============================= //
Class ReplicationDriver.Object
// ============================= //
Class Package.Object
// ============================= //
Class PackageMap.Object
// ============================= //
Class HUD.Actor.Object
	TArray<c56b14a4c6> 6561e7853b; // Offset: 0x2b8
	bool bLostFocusPaused; // Offset: 0x2dc
	bool bShowHUD; // Offset: 0x2dc
	bool bShowDebugInfo; // Offset: 0x2dc
	bool bShowHitBoxDebugInfo; // Offset: 0x2dc
	bool bShowOverlays; // Offset: 0x2dc
	bool bEnableDebugTextShadow; // Offset: 0x2dc
	Actor* 33474111a2; // Offset: 0x300
	int 51fd08da40; // Offset: 0x308
	Canvas* 4ee3d84d48; // Offset: 0x310
	TArray<Actor*> 1a7415aad8; // Offset: 0x318
	Canvas* Canvas; // Offset: 0x328
	TArray<FName> ToggledDebugCategories; // Offset: 0x330
	Actor* 0582bd356f; // Offset: 0x390
	TArray<FName> DebugDisplay; // Offset: 0x398
// ============================= //
Struct c56b14a4c6
	Actor* a7c488d087; // Offset: 0x0
	Vector 45100d1597; // Offset: 0x8
	Vector 8a9d2f44b6; // Offset: 0x14
	FString 09072188fd; // Offset: 0x20
	float TimeRemaining; // Offset: 0x30
	float Duration; // Offset: 0x34
	Color TextColor; // Offset: 0x38
	bool bAbsoluteLocation; // Offset: 0x3c
	bool 38d54e8899; // Offset: 0x3c
	bool b982e063da; // Offset: 0x3c
	Vector 39988a7b51; // Offset: 0x40
	Font* Font; // Offset: 0x50
	float 2568c5b563; // Offset: 0x58
// ============================= //
Class Font.Object
	TArray<Texture2D*> Textures; // Offset: 0x78
	int 99b7c3e4fd; // Offset: 0x88
	5ac7ab7375 ImportOptions; // Offset: 0x98
	TArray<int> 8a322bda1e; // Offset: 0x140
	TArray<d1cf0bcb45> Characters; // Offset: 0x158
	FName 715a083473; // Offset: 0x1b8
	TEnumAsByte<EFontCacheType> 209213a777; // Offset: 0x1c4
	49e642cb30 49e642cb30; // Offset: 0x1d0
// ============================= //
Struct 5ac7ab7375
	FString FontName; // Offset: 0x0
	float Height; // Offset: 0x10
	bool 95d2dd3507; // Offset: 0x14
	bool 7b5958f700; // Offset: 0x14
	bool e73f923aa4; // Offset: 0x14
	bool 1f4ae33f89; // Offset: 0x14
	bool 44e8831a48; // Offset: 0x14
	TEnumAsByte<EFontImportCharacterSet> 82e0ce4199; // Offset: 0x15
	FString Chars; // Offset: 0x18
	FString UnicodeRange; // Offset: 0x28
	FString ba6124b537; // Offset: 0x38
	FString ac6d3565d9; // Offset: 0x48
	bool de294988ee; // Offset: 0x58
	bool bb51add48b; // Offset: 0x58
	LinearColor ForegroundColor; // Offset: 0x5c
	bool 7507a72ed6; // Offset: 0x6c
	int e0972f8e5e; // Offset: 0x70
	int 84daba59ed; // Offset: 0x74
	int 339c6f1538; // Offset: 0x78
	int 0ad98ea657; // Offset: 0x7c
	int ffe9203589; // Offset: 0x80
	int 4f0dbc686d; // Offset: 0x84
	int 32900a494a; // Offset: 0x88
	int a09198c8f0; // Offset: 0x8c
	bool bb3a2670d2; // Offset: 0x90
	int Kerning; // Offset: 0x94
	bool bUseDistanceFieldAlpha; // Offset: 0x98
	int d5af6c0519; // Offset: 0x9c
	float ba274e2860; // Offset: 0xa0
// ============================= //
Enum EFontImportCharacterSet
	FontICS_Default = 0,
	FontICS_Ansi = 1,
	FontICS_Symbol = 2,
	FontICS_MAX = 3;
// ============================= //
Struct LinearColor
	float R; // Offset: 0x0
	float G; // Offset: 0x4
	float B; // Offset: 0x8
	float A; // Offset: 0xc
// ============================= //
Struct d1cf0bcb45
	int faba64faf6; // Offset: 0x0
	int 1e47f7b0d7; // Offset: 0x4
	int USize; // Offset: 0x8
	int VSize; // Offset: 0xc
	uint8_t TextureIndex; // Offset: 0x10
	int 375f112494; // Offset: 0x14
// ============================= //
Enum EFontCacheType
	EFontCacheType::Offline = 0,
	EFontCacheType::Runtime = 1,
	EFontCacheType::EFontCacheType_MAX = 2;
// ============================= //
Struct 49e642cb30
	Typeface 6fddd4d5c3; // Offset: 0x0
	90810c6dd3 bb9112b024; // Offset: 0x10
	TArray<ada2671fcb> 7b2e0884f4; // Offset: 0x28
// ============================= //
Struct Typeface
	TArray<fe3707f514> Fonts; // Offset: 0x0
// ============================= //
Struct fe3707f514
	FName Name; // Offset: 0x0
	FontData Font; // Offset: 0x8
// ============================= //
Struct FontData
	FString 2f9595e994; // Offset: 0x0
	TEnumAsByte<EFontHinting> Hinting; // Offset: 0x10
	TEnumAsByte<EFontLoadingPolicy> LoadingPolicy; // Offset: 0x11
	int 39a75b002a; // Offset: 0x14
	Object* 1ef2007adb; // Offset: 0x18
// ============================= //
Enum EFontHinting
	EFontHinting::Default = 0,
	EFontHinting::Auto = 1,
	EFontHinting::AutoLight = 2,
	EFontHinting::Monochrome = 3,
	EFontHinting::None = 4,
	EFontHinting::EFontHinting_MAX = 5;
// ============================= //
Enum EFontLoadingPolicy
	EFontLoadingPolicy::LazyLoad = 0,
	EFontLoadingPolicy::Stream = 1,
	EFontLoadingPolicy::Inline = 2,
	EFontLoadingPolicy::EFontLoadingPolicy_MAX = 3;
// ============================= //
Struct 90810c6dd3
	Typeface Typeface; // Offset: 0x0
	float ScalingFactor; // Offset: 0x10
// ============================= //
Struct ada2671fcb.90810c6dd3
	TArray<Int32Range> 08fe40693c; // Offset: 0x18
	FString Cultures; // Offset: 0x28
// ============================= //
Struct Int32Range
	360ed47b03 LowerBound; // Offset: 0x0
	360ed47b03 UpperBound; // Offset: 0x8
// ============================= //
Struct 360ed47b03
	TEnumAsByte<ERangeBoundTypes> Type; // Offset: 0x0
	int Value; // Offset: 0x4
// ============================= //
Enum ERangeBoundTypes
	ERangeBoundTypes::Exclusive = 0,
	ERangeBoundTypes::Inclusive = 1,
	ERangeBoundTypes::Open = 2,
	ERangeBoundTypes::ERangeBoundTypes_MAX = 3;
// ============================= //
Class Canvas.Object
	bool 974cc7da9e; // Offset: 0x98
	bool 440bf0a666; // Offset: 0x98
	bool ddcfe6b0a0; // Offset: 0x98
	Texture2D* DefaultTexture; // Offset: 0xa0
	a73a699a3a* a73a699a3a; // Offset: 0xa8
	Texture2D* GradientTexture0; // Offset: 0x120
// ============================= //
Class a73a699a3a.ddd6d896cd.Object
// ============================= //
Class ddd6d896cd.Object
// ============================= //
Struct 15e99d5b7f
	ForceFeedbackEffect* ForceFeedbackEffect; // Offset: 0x0
// ============================= //
Class ForceFeedbackEffect.Object
	float Duration; // Offset: 0x68
	TArray<edd92c8b83> ChannelDetails; // Offset: 0x70
// ============================= //
Struct edd92c8b83
	bool bAffectsLeftLarge; // Offset: 0x0
	bool bAffectsLeftSmall; // Offset: 0x0
	bool bAffectsRightLarge; // Offset: 0x0
	bool bAffectsRightSmall; // Offset: 0x0
	RuntimeFloatCurve Curve; // Offset: 0x8
// ============================= //
Struct RuntimeFloatCurve
	RichCurve EditorCurveData; // Offset: 0x0
	CurveFloat* ExternalCurve; // Offset: 0x80
// ============================= //
Struct RichCurve.eea7c66749.34f697d219
	TArray<4acacef6f8> Keys; // Offset: 0x70
// ============================= //
Struct eea7c66749.34f697d219
	float DefaultValue; // Offset: 0x68
	TEnumAsByte<ERichCurveExtrapolation> PreInfinityExtrap; // Offset: 0x6c
	TEnumAsByte<ERichCurveExtrapolation> PostInfinityExtrap; // Offset: 0x6d
// ============================= //
Struct 34f697d219
	5c4a91f0fb ca62bcde59; // Offset: 0x8
// ============================= //
Enum ERichCurveExtrapolation
	RCCE_Cycle = 0,
	RCCE_CycleWithOffset = 1,
	RCCE_Oscillate = 2,
	RCCE_Linear = 3,
	RCCE_Constant = 4,
	RCCE_None = 5,
	RCCE_MAX = 6;
// ============================= //
Struct 5c4a91f0fb
// ============================= //
Struct 4acacef6f8
	TEnumAsByte<ERichCurveInterpMode> InterpMode; // Offset: 0x0
	TEnumAsByte<ERichCurveTangentMode> TangentMode; // Offset: 0x1
	TEnumAsByte<ERichCurveTangentWeightMode> TangentWeightMode; // Offset: 0x2
	float Time; // Offset: 0x4
	float Value; // Offset: 0x8
	float ArriveTangent; // Offset: 0xc
	float ArriveTangentWeight; // Offset: 0x10
	float LeaveTangent; // Offset: 0x14
	float LeaveTangentWeight; // Offset: 0x18
// ============================= //
Enum ERichCurveInterpMode
	RCIM_Linear = 0,
	RCIM_Constant = 1,
	RCIM_Cubic = 2,
	RCIM_None = 3,
	RCIM_MAX = 4;
// ============================= //
Enum ERichCurveTangentMode
	RCTM_Auto = 0,
	RCTM_User = 1,
	RCTM_Break = 2,
	RCTM_None = 3,
	RCTM_MAX = 4;
// ============================= //
Enum ERichCurveTangentWeightMode
	RCTWM_WeightedNone = 0,
	RCTWM_WeightedArrive = 1,
	RCTWM_WeightedLeave = 2,
	RCTWM_WeightedBoth = 3,
	RCTWM_MAX = 4;
// ============================= //
Class CurveFloat.CurveBase.Object
	RichCurve FloatCurve; // Offset: 0x78
// ============================= //
Class CurveBase.Object
// ============================= //
Class CheatManager.Object
	DebugCameraController* DebugCameraControllerClass; // Offset: 0x88
	DebugCameraController* aacc297087; // Offset: 0x90
// ============================= //
Class DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo; // Offset: 0x850
	bool e726617685; // Offset: 0x850
	bool e310f77284; // Offset: 0x850
	bool a12c997e67; // Offset: 0x850
	bool 0bf8a4ad0e; // Offset: 0x850
	bool 28f6f3fc11; // Offset: 0x850
	bool 80db77f499; // Offset: 0x850
	bool 4424840c83; // Offset: 0x850
	float InitialDecel; // Offset: 0x854
	Actor* e18ed76877; // Offset: 0x858
	float SpeedScale; // Offset: 0x864
	float InitialAccel; // Offset: 0x868
	HitResult ad251893ad; // Offset: 0x894
	DrawFrustumComponent* 5c6184437f; // Offset: 0x968
	float InitialMaxSpeed; // Offset: 0x97c
	Player* c01c5fbdab; // Offset: 0x980
	PlayerController* 110b7fab04; // Offset: 0x988
	PrimitiveComponent* SelectedComponent; // Offset: 0x990
// ============================= //
Struct HitResult
	bool bBlockingHit; // Offset: 0x0
	bool bStartPenetrating; // Offset: 0x0
	int FaceIndex; // Offset: 0x4
	float Time; // Offset: 0x8
	float Distance; // Offset: 0xc
	Vector_NetQuantize Location; // Offset: 0x10
	Vector_NetQuantize ImpactPoint; // Offset: 0x1c
	Vector_NetQuantizeNormal Normal; // Offset: 0x28
	Vector_NetQuantizeNormal ImpactNormal; // Offset: 0x34
	Vector_NetQuantize TraceStart; // Offset: 0x40
	Vector_NetQuantize TraceEnd; // Offset: 0x4c
	float PenetrationDepth; // Offset: 0x58
	int Item; // Offset: 0x5c
	uint8_t ElementIndex; // Offset: 0x60
	PhysicalMaterial* PhysMaterial; // Offset: 0x64
	Actor* Actor; // Offset: 0x84
	PrimitiveComponent* Component; // Offset: 0xa4
	FName BoneName; // Offset: 0xc4
	FName 4d09fb6ede; // Offset: 0xcc
// ============================= //
Struct Vector_NetQuantize.Vector
// ============================= //
Struct Vector_NetQuantizeNormal.Vector
// ============================= //
Class DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture* Texture; // Offset: 0x538
	Color FrustumColor; // Offset: 0x540
	float FrustumAngle; // Offset: 0x544
	float FrustumEndDist; // Offset: 0x548
	float FrustumAspectRatio; // Offset: 0x54c
	float FrustumStartDist; // Offset: 0x550
// ============================= //
Class TouchInterface.Object
	TArray<0f75773c71> Controls; // Offset: 0x70
// ============================= //
Struct 0f75773c71
	Texture2D* Image1; // Offset: 0x0
	Texture2D* Image2; // Offset: 0x8
	Vector2D Center; // Offset: 0x10
	Vector2D 807ccfc4b0; // Offset: 0x18
	Vector2D 0805eb44a3; // Offset: 0x20
	Vector2D ceda6e9f11; // Offset: 0x28
	Vector2D 15b8b6a6f2; // Offset: 0x30
	Key a10086d9ce; // Offset: 0x38
	Key c4b48530e3; // Offset: 0x50
// ============================= //
Struct Vector2D
	float X; // Offset: 0x0
	float Y; // Offset: 0x4
// ============================= //
Class ee291b1e71.4866c69594.Object
	Actor* 02c5d98e58; // Offset: 0x68
// ============================= //
Class SpectatorPawn.DefaultPawn.Pawn.Actor.Object
// ============================= //
Class DefaultPawn.Pawn.Actor.Object
	StaticMeshComponent* MeshComponent; // Offset: 0x360
	SphereComponent* CollisionComponent; // Offset: 0x368
	float BaseTurnRate; // Offset: 0x370
	float BaseLookUpRate; // Offset: 0x374
	PawnMovementComponent* MovementComponent; // Offset: 0x378
	bool bAddDefaultMovementBindings; // Offset: 0x380
// ============================= //
Class StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<96af5f29df> a5ee055e36; // Offset: 0x560
	Color WireframeColorOverride; // Offset: 0x570
	float DistanceFieldIndirectShadowMinVisibility; // Offset: 0x574
	int MinLOD; // Offset: 0x578
	3a3edb4d9d 776dc247ec; // Offset: 0x580
	bool bEvaluateWorldPositionOffset; // Offset: 0x5e0
	int ForcedLodModel; // Offset: 0x5e4
	bool bOverrideWireframeColor; // Offset: 0x5e8
	bool bOverrideMinLOD; // Offset: 0x5e8
	bool bOverrideCullingScreenSize; // Offset: 0x5e8
	bool bOverrideEnableDistanceCulling; // Offset: 0x5e8
	bool 5059b96e68; // Offset: 0x5e8
	bool 32b78f55ec; // Offset: 0x5e8
	bool bDisallowMeshPaintPerInstance; // Offset: 0x5e8
	bool bIgnoreInstanceForTextureStreaming; // Offset: 0x5e8
	bool bOverrideLightMapRes; // Offset: 0x5e9
	bool bCastDistanceFieldIndirectShadow; // Offset: 0x5e9
	bool bOverrideDistanceFieldSelfShadowBias; // Offset: 0x5e9
	bool a350f148ba; // Offset: 0x5e9
	bool 316a8e378c; // Offset: 0x5e9
	bool bReverseCulling; // Offset: 0x5e9
	bool bOccludedByOthers; // Offset: 0x5e9
	bool ExcludedObjectFromVolume; // Offset: 0x5ea
	f28c6334fd LightmassSettings; // Offset: 0x5f0
	TArray<2f691f5465> c5eecce647; // Offset: 0x608
	StaticMesh* StaticMesh; // Offset: 0x618
	int OverriddenLightMapRes; // Offset: 0x624
	float DistanceFieldSelfShadowBias; // Offset: 0x628
	float StreamingDistanceMultiplier; // Offset: 0x62c
// ============================= //
Class MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<MaterialInterface*> OverrideMaterials; // Offset: 0x538
	bool bEnableMaterialParameterCaching; // Offset: 0x558
// ============================= //
Struct 96af5f29df
// ============================= //
Struct f28c6334fd
	bool c5c6f7c576; // Offset: 0x0
	bool 61732ecbc5; // Offset: 0x0
	bool 460e6d9c7b; // Offset: 0x0
	bool 281c8c49db; // Offset: 0x0
	float 23d1b22eed; // Offset: 0x4
	float c2b995dc97; // Offset: 0x8
	float EmissiveBoost; // Offset: 0xc
	float DiffuseBoost; // Offset: 0x10
	float 2b80a6c46d; // Offset: 0x14
// ============================= //
Struct 2f691f5465
	UInt32Property ea1faf79dd; // Offset: 0x0
	int 98f51a68c2; // Offset: 0x4
	float TexelFactor; // Offset: 0x8
// ============================= //
Class MaterialInterface.Object
	TArray<139deb8b16> e1ac48fe96; // Offset: 0x78
	SubsurfaceProfile* SubsurfaceProfile; // Offset: 0x88
	TArray<AssetUserData*> AssetUserData; // Offset: 0x90
	a5cab3774e LightmassSettings; // Offset: 0xb8
// ============================= //
Struct 139deb8b16
	float 1c70e34848; // Offset: 0x0
	int UVChannelIndex; // Offset: 0x4
	FName TextureName; // Offset: 0x8
// ============================= //
Class SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings; // Offset: 0x68
// ============================= //
Struct SubsurfaceProfileStruct
	LinearColor SurfaceAlbedo; // Offset: 0x0
	LinearColor MeanFreePathColor; // Offset: 0x10
	float MeanFreePathDistance; // Offset: 0x20
	float WorldUnitScale; // Offset: 0x24
	bool bEnableBurley; // Offset: 0x28
	float ScatterRadius; // Offset: 0x2c
	LinearColor SubsurfaceColor; // Offset: 0x30
	LinearColor FalloffColor; // Offset: 0x40
	LinearColor BoundaryColorBleed; // Offset: 0x50
	float ExtinctionScale; // Offset: 0x60
	float NormalScale; // Offset: 0x64
	float ScatteringDistribution; // Offset: 0x68
	float IOR; // Offset: 0x6c
	float Roughness0; // Offset: 0x70
	float Roughness1; // Offset: 0x74
	float LobeMix; // Offset: 0x78
	LinearColor TransmissionTintColor; // Offset: 0x7c
// ============================= //
Struct a5cab3774e
	float EmissiveBoost; // Offset: 0x0
	float DiffuseBoost; // Offset: 0x4
	float ExportResolutionScale; // Offset: 0x8
	bool 995878457d; // Offset: 0xc
	bool d3eefef241; // Offset: 0xc
	bool d51e2b6b88; // Offset: 0xc
	bool ddc223c677; // Offset: 0xc
	bool 13209eab1e; // Offset: 0xc
// ============================= //
Class StaticMesh.638112bfc1.Object
	bool bEnableInstancing; // Offset: 0xc0
	float e4113fd5ea; // Offset: 0xc4
	float LpvBiasMultiplier; // Offset: 0xc8
	PerPlatformInt MinLOD; // Offset: 0xd0
	int LODForCollision; // Offset: 0xe0
	Object* EditableMesh; // Offset: 0x100
	float CullingScreenSize; // Offset: 0x11c
	bool bEnableDistanceCulling; // Offset: 0x120
	bool 11465cb247; // Offset: 0x121
	bool bStripComplexCollisionForConsole; // Offset: 0x121
	bool af15b73fb1; // Offset: 0x121
	bool bSupportUniformlyDistributedSampling; // Offset: 0x121
	bool c73190bd16; // Offset: 0x121
	bool 195822f606; // Offset: 0x121
	bool bAllowCPUAccess; // Offset: 0x121
	bool 3d47320613; // Offset: 0x122
	TArray<ab742e9a1c*> Sockets; // Offset: 0x128
	BodySetup* BodySetup; // Offset: 0x138
	TArray<4cbc794a88> StaticMaterials; // Offset: 0x140
	NavCollisionBase* NavCollision; // Offset: 0x150
	bool bUseScreenSizeModifier; // Offset: 0x1a0
	TArray<AssetUserData*> AssetUserData; // Offset: 0x1a8
// ============================= //
Struct PerPlatformInt
	int Default; // Offset: 0x0
// ============================= //
Class ab742e9a1c.Object
	Rotator RelativeRotation; // Offset: 0x68
	Vector RelativeScale; // Offset: 0x74
	Vector RelativeLocation; // Offset: 0x80
	FName SocketName; // Offset: 0x8c
	FString Tag; // Offset: 0x98
// ============================= //
Struct 4cbc794a88
	MaterialInterface* MaterialInterface; // Offset: 0x0
	FName MaterialSlotName; // Offset: 0x8
	FName ImportedMaterialSlotName; // Offset: 0x10
	be45415f38 UVChannelData; // Offset: 0x18
	MaterialInterface* 1b687978a5; // Offset: 0x30
// ============================= //
Struct be45415f38
	bool bInitialized; // Offset: 0x0
	bool bOverrideDensities; // Offset: 0x1
	float 9dbbc9ccea; // Offset: 0x4
// ============================= //
Class NavCollisionBase.Object
	bool bIsDynamicObstacle; // Offset: 0x68
// ============================= //
Class SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius; // Offset: 0x54c
// ============================= //
Class PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* d6dfa901c0; // Offset: 0x190
// ============================= //
Class NavMovementComponent.MovementComponent.ActorComponent.Object
	Object* 1a5b586891; // Offset: 0x148
	bool c48eb55512; // Offset: 0x154
	bool bUseAccelerationForPaths; // Offset: 0x154
	bool bUseFixedBrakingDistanceForPaths; // Offset: 0x154
	a057bbcf4b NavAgentProps; // Offset: 0x158
	ebc7160fb5 6d8e9ddaba; // Offset: 0x188
// ============================= //
Class MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent; // Offset: 0x108
	Vector Velocity; // Offset: 0x110
	Vector PlaneConstraintOrigin; // Offset: 0x11c
	TEnumAsByte<EPlaneConstraintAxisSetting> 0f4bb812b1; // Offset: 0x128
	bool bUpdateOnlyIfRendered; // Offset: 0x129
	bool bAutoUpdateTickRegistration; // Offset: 0x129
	bool bTickBeforeOwner; // Offset: 0x129
	bool bAutoRegisterUpdatedComponent; // Offset: 0x129
	bool bConstrainToPlane; // Offset: 0x129
	bool bSnapToPlaneAtStart; // Offset: 0x129
	bool bAutoRegisterPhysicsVolumeUpdates; // Offset: 0x129
	bool bComponentShouldUpdatePhysicsVolume; // Offset: 0x129
	Vector PlaneConstraintNormal; // Offset: 0x12c
	PrimitiveComponent* UpdatedPrimitive; // Offset: 0x140
// ============================= //
Struct a057bbcf4b.ebc7160fb5
	float AgentRadius; // Offset: 0x4
	float AgentHeight; // Offset: 0x8
	float AgentStepHeight; // Offset: 0xc
	float NavWalkingSearchHeightScale; // Offset: 0x10
	SoftClassPath PreferredNavData; // Offset: 0x18
// ============================= //
Struct ebc7160fb5
	bool bCanCrouch; // Offset: 0x0
	bool bCanJump; // Offset: 0x0
	bool bCanWalk; // Offset: 0x0
	bool bCanSwim; // Offset: 0x0
	bool bCanFly; // Offset: 0x0
// ============================= //
Struct SoftClassPath.SoftObjectPath
// ============================= //
Struct SoftObjectPath
	FName AssetPathName; // Offset: 0x0
	FString 747172ad6c; // Offset: 0x8
// ============================= //
Enum EPlaneConstraintAxisSetting
	EPlaneConstraintAxisSetting::Custom = 0,
	EPlaneConstraintAxisSetting::X = 1,
	EPlaneConstraintAxisSetting::Y = 2,
	EPlaneConstraintAxisSetting::Z = 3,
	EPlaneConstraintAxisSetting::UseGlobalPhysicsSetting = 4,
	EPlaneConstraintAxisSetting::EPlaneConstraintAxisSetting_MAX = 5;
// ============================= //
Class PlayerCameraManager.Actor.Object
	af8c01cac6* d87d1567d0; // Offset: 0x2b8
	10687dde7f CameraCache; // Offset: 0x310
	10687dde7f LastFrameCameraCache; // Offset: 0x920
	float FreeCamDistance; // Offset: 0xf30
	float ServerUpdateCameraTimeout; // Offset: 0xf48
	float DefaultOrthoWidth; // Offset: 0xf50
	float ViewRollMax; // Offset: 0xf58
	TArray<af8c01cac6*> 7b9a819c0e; // Offset: 0xf60
	10687dde7f 3f0ae445d7; // Offset: 0xf80
	float DefaultAspectRatio; // Offset: 0x1590
	float ViewYawMax; // Offset: 0x1594
	float DefaultFOV; // Offset: 0x1598
	c9d1258728 PendingViewTarget; // Offset: 0x15a0
	SceneComponent* TransformComponent; // Offset: 0x1be0
	Vector ViewTargetOffset; // Offset: 0x1c18
	TArray<af8c01cac6*> 98a6d1f57d; // Offset: 0x1c28
	CameraActor* bd5205d172; // Offset: 0x1c40
	float ViewRollMin; // Offset: 0x1c60
	10687dde7f 4afbb5f663; // Offset: 0x1c70
	TArray<8e247eeffb*> DefaultModifiers; // Offset: 0x2288
	TArray<EmitterCameraLensEffectBase*> 01749b1afb; // Offset: 0x2298
	4337f6934c* fed1e025b5; // Offset: 0x22a8
	float ViewPitchMax; // Offset: 0x22b8
	TArray<PostProcessSettings> 9814823de1; // Offset: 0x22c0
	bool bIsOrthographic; // Offset: 0x22d8
	bool bDefaultConstrainAspectRatio; // Offset: 0x22d8
	bool bClientSimulatingViewTarget; // Offset: 0x22d8
	bool bUseClientSideCameraUpdates; // Offset: 0x22d8
	bool bGameCameraCutThisFrame; // Offset: 0x22d9
	float ViewYawMin; // Offset: 0x22dc
	TArray<8e247eeffb*> 33fcf5b4b0; // Offset: 0x22e0
	Vector FreeCamOffset; // Offset: 0x22f0
	float ViewPitchMin; // Offset: 0x230c
	c9d1258728 ViewTarget; // Offset: 0x2310
	MulticastInlineDelegateProperty OnAudioFadeChangeEvent; // Offset: 0x2938
// ============================= //
Class af8c01cac6.Object
	CameraAnim* abaeb8dc60; // Offset: 0x70
	float PlayRate; // Offset: 0x88
	8f4a6b634c* 43f86d120e; // Offset: 0x98
	TEnumAsByte<ECameraShakePlaySpace> PlaySpace; // Offset: 0xa0
	6d4676e0fb* 6d4676e0fb; // Offset: 0xf8
	0170217033* 46b6cfa85a; // Offset: 0x140
// ============================= //
Class CameraAnim.Object
	PostProcessSettings 9634871059; // Offset: 0x70
	bool 7a3c0b1590; // Offset: 0x600
	bool fc79e6af97; // Offset: 0x600
	InterpGroup* 2e2b8a3a4c; // Offset: 0x610
// ============================= //
Struct PostProcessSettings
	bool bOverride_WhiteTemp; // Offset: 0x0
	bool bOverride_WhiteTint; // Offset: 0x0
	bool bOverride_ColorSaturation; // Offset: 0x0
	bool bOverride_ColorContrast; // Offset: 0x0
	bool bOverride_ColorGamma; // Offset: 0x0
	bool bOverride_ColorGain; // Offset: 0x0
	bool bOverride_ColorOffset; // Offset: 0x0
	bool bOverride_ColorSaturationShadows; // Offset: 0x0
	bool bOverride_ColorContrastShadows; // Offset: 0x1
	bool bOverride_ColorGammaShadows; // Offset: 0x1
	bool bOverride_ColorGainShadows; // Offset: 0x1
	bool bOverride_ColorOffsetShadows; // Offset: 0x1
	bool bOverride_ColorSaturationMidtones; // Offset: 0x1
	bool bOverride_ColorContrastMidtones; // Offset: 0x1
	bool bOverride_ColorGammaMidtones; // Offset: 0x1
	bool bOverride_ColorGainMidtones; // Offset: 0x1
	bool bOverride_ColorOffsetMidtones; // Offset: 0x2
	bool bOverride_ColorSaturationHighlights; // Offset: 0x2
	bool bOverride_ColorContrastHighlights; // Offset: 0x2
	bool bOverride_ColorGammaHighlights; // Offset: 0x2
	bool bOverride_ColorGainHighlights; // Offset: 0x2
	bool bOverride_ColorOffsetHighlights; // Offset: 0x2
	bool bOverride_ColorCorrectionShadowsMax; // Offset: 0x2
	bool bOverride_ColorCorrectionHighlightsMin; // Offset: 0x2
	bool bOverride_BlueCorrection; // Offset: 0x3
	bool bOverride_ExpandGamut; // Offset: 0x3
	bool bOverride_ToneCurveAmount; // Offset: 0x3
	bool bOverride_FilmWhitePoint; // Offset: 0x3
	bool bOverride_FilmSaturation; // Offset: 0x3
	bool bOverride_FilmChannelMixerRed; // Offset: 0x3
	bool bOverride_FilmChannelMixerGreen; // Offset: 0x3
	bool bOverride_FilmChannelMixerBlue; // Offset: 0x3
	bool bOverride_FilmContrast; // Offset: 0x4
	bool bOverride_FilmDynamicRange; // Offset: 0x4
	bool bOverride_FilmHealAmount; // Offset: 0x4
	bool bOverride_FilmToeAmount; // Offset: 0x4
	bool bOverride_FilmShadowTint; // Offset: 0x4
	bool bOverride_FilmShadowTintBlend; // Offset: 0x4
	bool bOverride_FilmShadowTintAmount; // Offset: 0x4
	bool bOverride_FilmSlope; // Offset: 0x4
	bool bOverride_FilmToe; // Offset: 0x5
	bool bOverride_FilmShoulder; // Offset: 0x5
	bool bOverride_FilmBlackClip; // Offset: 0x5
	bool bOverride_FilmWhiteClip; // Offset: 0x5
	bool bOverride_SceneColorTint; // Offset: 0x5
	bool bOverride_SceneFringeIntensity; // Offset: 0x5
	bool bOverride_ChromaticAberrationStartOffset; // Offset: 0x5
	bool bOverride_AmbientCubemapTint; // Offset: 0x5
	bool bOverride_AmbientCubemapIntensity; // Offset: 0x6
	bool bOverride_BloomMethod; // Offset: 0x6
	bool bOverride_BloomIntensity; // Offset: 0x6
	bool bOverride_BloomThreshold; // Offset: 0x6
	bool bOverride_Bloom1Tint; // Offset: 0x6
	bool bOverride_Bloom1Size; // Offset: 0x6
	bool bOverride_Bloom2Size; // Offset: 0x6
	bool bOverride_Bloom2Tint; // Offset: 0x6
	bool bOverride_Bloom3Tint; // Offset: 0x7
	bool bOverride_Bloom3Size; // Offset: 0x7
	bool bOverride_Bloom4Tint; // Offset: 0x7
	bool bOverride_Bloom4Size; // Offset: 0x7
	bool bOverride_Bloom5Tint; // Offset: 0x7
	bool bOverride_Bloom5Size; // Offset: 0x7
	bool bOverride_Bloom6Tint; // Offset: 0x7
	bool bOverride_Bloom6Size; // Offset: 0x7
	bool bOverride_BloomSizeScale; // Offset: 0x8
	bool bOverride_BloomConvolutionTexture; // Offset: 0x8
	bool bOverride_BloomConvolutionSize; // Offset: 0x8
	bool bOverride_BloomConvolutionCenterUV; // Offset: 0x8
	bool bOverride_BloomConvolutionPreFilter; // Offset: 0x8
	bool bOverride_BloomConvolutionPreFilterMin; // Offset: 0x8
	bool bOverride_BloomConvolutionPreFilterMax; // Offset: 0x8
	bool bOverride_BloomConvolutionPreFilterMult; // Offset: 0x8
	bool bOverride_BloomConvolutionBufferScale; // Offset: 0x9
	bool bOverride_BloomDirtMaskIntensity; // Offset: 0x9
	bool bOverride_BloomDirtMaskTint; // Offset: 0x9
	bool bOverride_BloomDirtMask; // Offset: 0x9
	bool bOverride_CameraShutterSpeed; // Offset: 0x9
	bool bOverride_CameraISO; // Offset: 0x9
	bool bOverride_AutoExposureMethod; // Offset: 0x9
	bool bOverride_AutoExposureLowPercent; // Offset: 0x9
	bool bOverride_AutoExposureHighPercent; // Offset: 0xa
	bool bOverride_AutoExposureMinBrightness; // Offset: 0xa
	bool bOverride_AutoExposureMaxBrightness; // Offset: 0xa
	bool bOverride_AutoExposureCalibrationConstant; // Offset: 0xa
	bool bOverride_AutoExposureSpeedUp; // Offset: 0xa
	bool bOverride_AutoExposureSpeedDown; // Offset: 0xa
	bool bOverride_AutoExposureBias; // Offset: 0xa
	bool bOverride_AutoExposureBiasCurve; // Offset: 0xa
	bool bOverride_AutoExposureMeterMask; // Offset: 0xb
	bool bOverride_AutoExposureApplyPhysicalCameraExposure; // Offset: 0xb
	bool bOverride_HistogramLogMin; // Offset: 0xb
	bool bOverride_HistogramLogMax; // Offset: 0xb
	bool bOverride_LensFlareIntensity; // Offset: 0xb
	bool bOverride_LensFlareTint; // Offset: 0xb
	bool bOverride_LensFlareTints; // Offset: 0xb
	bool bOverride_LensFlareToggle; // Offset: 0xb
	bool bOverride_LensFlareAtlasOffsets; // Offset: 0xc
	bool bOverride_LensFlareBokehSizes; // Offset: 0xc
	bool bOverride_LensFlareBokehSize; // Offset: 0xc
	bool bOverride_LensFlareBokehShape; // Offset: 0xc
	bool bOverride_LensFlareThreshold; // Offset: 0xc
	bool bOverride_LensFlareBokehDistance; // Offset: 0xc
	bool bOverride_LensFlareAtlasSize; // Offset: 0xc
	bool bOverride_VignetteIntensity; // Offset: 0xc
	bool bOverride_GrainIntensity; // Offset: 0xd
	bool bOverride_GrainJitter; // Offset: 0xd
	bool bOverride_AmbientOcclusionIntensity; // Offset: 0xd
	bool bOverride_AmbientOcclusionRadius; // Offset: 0xd
	bool bOverride_AmbientOcclusionFadeDistance; // Offset: 0xd
	bool bOverride_AmbientOcclusionPower; // Offset: 0xd
	bool bOverride_AmbientOcclusionBias; // Offset: 0xd
	bool bOverride_AmbientOcclusionDownScale; // Offset: 0xd
	bool bOverride_AmbientOcclusionDepthDownScale; // Offset: 0xe
	bool bOverride_AmbientOcclusionBlurSize; // Offset: 0xe
	bool bOverride_AmbientOcclusionSteps; // Offset: 0xe
	bool bOverride_AmbientOcclusionStaticFraction; // Offset: 0xe
	bool bOverride_AmbientOcclusionRadiusInWS; // Offset: 0xe
	bool bOverride_AmbientOcclusionFadeRadius; // Offset: 0xe
	bool bOverride_AmbientOcclusionDistance; // Offset: 0xe
	bool bOverride_AmbientOcclusionQuality; // Offset: 0xe
	bool bOverride_AmbientOcclusionMipBlend; // Offset: 0xf
	bool bOverride_AmbientOcclusionMipScale; // Offset: 0xf
	bool bOverride_AmbientOcclusionMipThreshold; // Offset: 0xf
	bool bOverride_DepthFadeSmokeDistance; // Offset: 0xf
	bool bOverride_DepthFadeSmokeColor; // Offset: 0xf
	bool bOverride_AmbientOcclusionTemporalBlendWeight; // Offset: 0xf
	bool bOverride_RayTracingAO; // Offset: 0xf
	bool bOverride_RayTracingAOSamplesPerPixel; // Offset: 0xf
	bool bOverride_RayTracingAOIntensity; // Offset: 0x10
	bool bOverride_RayTracingAORadius; // Offset: 0x10
	bool bOverride_LPVIntensity; // Offset: 0x10
	bool bOverride_LPVDirectionalOcclusionIntensity; // Offset: 0x10
	bool bOverride_LPVDirectionalOcclusionRadius; // Offset: 0x10
	bool bOverride_LPVDiffuseOcclusionExponent; // Offset: 0x10
	bool bOverride_LPVSpecularOcclusionExponent; // Offset: 0x10
	bool bOverride_LPVDiffuseOcclusionIntensity; // Offset: 0x10
	bool bOverride_LPVSpecularOcclusionIntensity; // Offset: 0x11
	bool bOverride_LPVSize; // Offset: 0x11
	bool bOverride_LPVSecondaryOcclusionIntensity; // Offset: 0x11
	bool bOverride_LPVSecondaryBounceIntensity; // Offset: 0x11
	bool bOverride_LPVGeometryVolumeBias; // Offset: 0x11
	bool bOverride_LPVVplInjectionBias; // Offset: 0x11
	bool bOverride_LPVEmissiveInjectionIntensity; // Offset: 0x11
	bool bOverride_LPVFadeRange; // Offset: 0x11
	bool bOverride_LPVDirectionalOcclusionFadeRange; // Offset: 0x12
	bool bOverride_IndirectLightingColor; // Offset: 0x12
	bool bOverride_IndirectLightingIntensity; // Offset: 0x12
	bool bOverride_ColorGradingIntensity; // Offset: 0x12
	bool bOverride_ColorGradingLUT; // Offset: 0x12
	bool bOverride_DepthOfFieldFocalDistance; // Offset: 0x12
	bool bOverride_DepthOfFieldFstop; // Offset: 0x12
	bool bOverride_DepthOfFieldMinFstop; // Offset: 0x12
	bool bOverride_DepthOfFieldBladeCount; // Offset: 0x13
	bool bOverride_DepthOfFieldSensorWidth; // Offset: 0x13
	bool bOverride_DepthOfFieldDepthBlurRadius; // Offset: 0x13
	bool bOverride_DepthOfFieldDepthBlurAmount; // Offset: 0x13
	bool bOverride_DepthOfFieldFocalRegion; // Offset: 0x13
	bool bOverride_DepthOfFieldNearTransitionRegion; // Offset: 0x13
	bool bOverride_DepthOfFieldFarTransitionRegion; // Offset: 0x13
	bool bOverride_DepthOfFieldScale; // Offset: 0x13
	bool bOverride_DepthOfFieldNearBlurSize; // Offset: 0x14
	bool bOverride_DepthOfFieldFarBlurSize; // Offset: 0x14
	bool bOverride_MobileHQGaussian; // Offset: 0x14
	bool bOverride_DepthOfFieldOcclusion; // Offset: 0x14
	bool bOverride_DepthOfFieldSkyFocusDistance; // Offset: 0x14
	bool bOverride_DepthOfFieldVignetteSize; // Offset: 0x14
	bool bOverride_MotionBlurAmount; // Offset: 0x14
	bool bOverride_MotionBlurMax; // Offset: 0x14
	bool bOverride_MotionBlurTargetFPS; // Offset: 0x15
	bool bOverride_MotionBlurPerObjectSize; // Offset: 0x15
	bool bOverride_ScreenPercentage; // Offset: 0x15
	bool bOverride_ScreenSpaceReflectionIntensity; // Offset: 0x15
	bool bOverride_ScreenSpaceReflectionQuality; // Offset: 0x15
	bool bOverride_ScreenSpaceReflectionMaxRoughness; // Offset: 0x15
	bool bOverride_ScreenSpaceReflectionRoughnessScale; // Offset: 0x15
	bool bOverride_ReflectionsType; // Offset: 0x15
	bool bOverride_RayTracingReflectionsMaxRoughness; // Offset: 0x16
	bool bOverride_RayTracingReflectionsMaxBounces; // Offset: 0x16
	bool bOverride_RayTracingReflectionsSamplesPerPixel; // Offset: 0x16
	bool bOverride_RayTracingReflectionsShadows; // Offset: 0x16
	bool bOverride_RayTracingReflectionsTranslucency; // Offset: 0x16
	bool bOverride_TranslucencyType; // Offset: 0x16
	bool bOverride_RayTracingTranslucencyMaxRoughness; // Offset: 0x16
	bool bOverride_RayTracingTranslucencyRefractionRays; // Offset: 0x16
	bool bOverride_RayTracingTranslucencySamplesPerPixel; // Offset: 0x17
	bool bOverride_RayTracingTranslucencyShadows; // Offset: 0x17
	bool bOverride_RayTracingTranslucencyRefraction; // Offset: 0x17
	bool bOverride_RayTracingGI; // Offset: 0x17
	bool bOverride_RayTracingGIMaxBounces; // Offset: 0x17
	bool bOverride_RayTracingGISamplesPerPixel; // Offset: 0x17
	bool bOverride_PathTracingMaxBounces; // Offset: 0x17
	bool bOverride_PathTracingSamplesPerPixel; // Offset: 0x17
	bool bMobileHQGaussian; // Offset: 0x18
	TEnumAsByte<EBloomMethod> BloomMethod; // Offset: 0x19
	TEnumAsByte<EAutoExposureMethod> AutoExposureMethod; // Offset: 0x1a
	float WhiteTemp; // Offset: 0x1c
	float WhiteTint; // Offset: 0x20
	Vector4 ColorSaturation; // Offset: 0x30
	Vector4 ColorContrast; // Offset: 0x40
	Vector4 ColorGamma; // Offset: 0x50
	Vector4 ColorGain; // Offset: 0x60
	Vector4 ColorOffset; // Offset: 0x70
	Vector4 ColorSaturationShadows; // Offset: 0x80
	Vector4 ColorContrastShadows; // Offset: 0x90
	Vector4 ColorGammaShadows; // Offset: 0xa0
	Vector4 ColorGainShadows; // Offset: 0xb0
	Vector4 ColorOffsetShadows; // Offset: 0xc0
	Vector4 ColorSaturationMidtones; // Offset: 0xd0
	Vector4 ColorContrastMidtones; // Offset: 0xe0
	Vector4 ColorGammaMidtones; // Offset: 0xf0
	Vector4 ColorGainMidtones; // Offset: 0x100
	Vector4 ColorOffsetMidtones; // Offset: 0x110
	Vector4 ColorSaturationHighlights; // Offset: 0x120
	Vector4 ColorContrastHighlights; // Offset: 0x130
	Vector4 ColorGammaHighlights; // Offset: 0x140
	Vector4 ColorGainHighlights; // Offset: 0x150
	Vector4 ColorOffsetHighlights; // Offset: 0x160
	float ColorCorrectionHighlightsMin; // Offset: 0x170
	float ColorCorrectionShadowsMax; // Offset: 0x174
	float BlueCorrection; // Offset: 0x178
	float ExpandGamut; // Offset: 0x17c
	float ToneCurveAmount; // Offset: 0x180
	float FilmSlope; // Offset: 0x184
	float FilmToe; // Offset: 0x188
	float FilmShoulder; // Offset: 0x18c
	float FilmBlackClip; // Offset: 0x190
	float FilmWhiteClip; // Offset: 0x194
	LinearColor FilmWhitePoint; // Offset: 0x198
	LinearColor FilmShadowTint; // Offset: 0x1a8
	float FilmShadowTintBlend; // Offset: 0x1b8
	float FilmShadowTintAmount; // Offset: 0x1bc
	float FilmSaturation; // Offset: 0x1c0
	LinearColor FilmChannelMixerRed; // Offset: 0x1c4
	LinearColor FilmChannelMixerGreen; // Offset: 0x1d4
	LinearColor FilmChannelMixerBlue; // Offset: 0x1e4
	float FilmContrast; // Offset: 0x1f4
	float FilmToeAmount; // Offset: 0x1f8
	float FilmHealAmount; // Offset: 0x1fc
	float FilmDynamicRange; // Offset: 0x200
	LinearColor SceneColorTint; // Offset: 0x204
	float SceneFringeIntensity; // Offset: 0x214
	float ChromaticAberrationStartOffset; // Offset: 0x218
	float BloomIntensity; // Offset: 0x21c
	float BloomThreshold; // Offset: 0x220
	float BloomSizeScale; // Offset: 0x224
	float Bloom1Size; // Offset: 0x228
	float Bloom2Size; // Offset: 0x22c
	float Bloom3Size; // Offset: 0x230
	float Bloom4Size; // Offset: 0x234
	float Bloom5Size; // Offset: 0x238
	float Bloom6Size; // Offset: 0x23c
	LinearColor Bloom1Tint; // Offset: 0x240
	LinearColor Bloom2Tint; // Offset: 0x250
	LinearColor Bloom3Tint; // Offset: 0x260
	LinearColor Bloom4Tint; // Offset: 0x270
	LinearColor Bloom5Tint; // Offset: 0x280
	LinearColor Bloom6Tint; // Offset: 0x290
	float BloomConvolutionSize; // Offset: 0x2a0
	Texture2D* BloomConvolutionTexture; // Offset: 0x2a8
	Vector2D BloomConvolutionCenterUV; // Offset: 0x2b0
	float BloomConvolutionPreFilterMin; // Offset: 0x2b8
	float BloomConvolutionPreFilterMax; // Offset: 0x2bc
	float BloomConvolutionPreFilterMult; // Offset: 0x2c0
	float BloomConvolutionBufferScale; // Offset: 0x2c4
	Texture* BloomDirtMask; // Offset: 0x2c8
	float BloomDirtMaskIntensity; // Offset: 0x2d0
	LinearColor BloomDirtMaskTint; // Offset: 0x2d4
	LinearColor AmbientCubemapTint; // Offset: 0x2e4
	float AmbientCubemapIntensity; // Offset: 0x2f4
	TextureCube* AmbientCubemap; // Offset: 0x2f8
	float CameraShutterSpeed; // Offset: 0x300
	float CameraISO; // Offset: 0x304
	float DepthOfFieldFstop; // Offset: 0x308
	float DepthOfFieldMinFstop; // Offset: 0x30c
	int DepthOfFieldBladeCount; // Offset: 0x310
	float AutoExposureBias; // Offset: 0x314
	float DefaultAutoExposureBias; // Offset: 0x318
	float 21f1a8d681; // Offset: 0x31c
	float 5de580c096; // Offset: 0x320
	bool 15dc339bc5; // Offset: 0x324
	bool AutoExposureApplyPhysicalCameraExposure; // Offset: 0x324
	CurveFloat* AutoExposureBiasCurve; // Offset: 0x328
	Texture* AutoExposureMeterMask; // Offset: 0x330
	float AutoExposureLowPercent; // Offset: 0x338
	float AutoExposureHighPercent; // Offset: 0x33c
	float AutoExposureMinBrightness; // Offset: 0x340
	float AutoExposureMaxBrightness; // Offset: 0x344
	float AutoExposureSpeedUp; // Offset: 0x348
	float AutoExposureSpeedDown; // Offset: 0x34c
	float HistogramLogMin; // Offset: 0x350
	float HistogramLogMax; // Offset: 0x354
	float AutoExposureCalibrationConstant; // Offset: 0x358
	float LensFlareIntensity; // Offset: 0x35c
	bool bUseLensFlareAttenuation; // Offset: 0x360
	float LensFlareIntensityNormal; // Offset: 0x364
	float LensFlareIntensityOnAircraft; // Offset: 0x368
	float LensFlareAttenuationStartHeight; // Offset: 0x36c
	float LensFlareAttenuationDuration; // Offset: 0x370
	LinearColor LensFlareTint; // Offset: 0x374
	float LensFlareBokehSize; // Offset: 0x384
	float LensFlareThreshold; // Offset: 0x388
	Texture* LensFlareBokehShape; // Offset: 0x390
	TArray<LinearColor> LensFlareTints; // Offset: 0x398
	TArray<IntPoint> 11b7d7fdca; // Offset: 0x3a8
	TArray<bool> 4a789aca44; // Offset: 0x3b8
	TArray<bool> 41063e0cfa; // Offset: 0x3c8
	TArray<Vector2D> d32c660430; // Offset: 0x3d8
	float LensFlareBokehDistance; // Offset: 0x3e8
	int LensFlareAtlasSize; // Offset: 0x3ec
	float VignetteIntensity; // Offset: 0x3f0
	float GrainJitter; // Offset: 0x3f4
	float GrainIntensity; // Offset: 0x3f8
	float AmbientOcclusionIntensity; // Offset: 0x3fc
	float AmbientOcclusionRadius; // Offset: 0x400
	float AmbientOcclusionFadeDistance; // Offset: 0x404
	float AmbientOcclusionPower; // Offset: 0x408
	float AmbientOcclusionBias; // Offset: 0x40c
	int AmbientOcclusionDownScale; // Offset: 0x410
	int AmbientOcclusionDepthDownScale; // Offset: 0x414
	int AmbientOcclusionBlurSize; // Offset: 0x418
	int AmbientOcclusionSteps; // Offset: 0x41c
	float AmbientOcclusionStaticFraction; // Offset: 0x420
	bool AmbientOcclusionRadiusInWS; // Offset: 0x424
	float AmbientOcclusionFadeRadius; // Offset: 0x428
	float AmbientOcclusionDistance; // Offset: 0x42c
	float AmbientOcclusionQuality; // Offset: 0x430
	float AmbientOcclusionMipBlend; // Offset: 0x434
	float AmbientOcclusionMipScale; // Offset: 0x438
	float AmbientOcclusionMipThreshold; // Offset: 0x43c
	float DepthFadeSmokeDistance; // Offset: 0x440
	LinearColor DepthFadeSmokeColor; // Offset: 0x444
	float AmbientOcclusionTemporalBlendWeight; // Offset: 0x454
	bool RayTracingAO; // Offset: 0x458
	int RayTracingAOSamplesPerPixel; // Offset: 0x45c
	float RayTracingAOIntensity; // Offset: 0x460
	float RayTracingAORadius; // Offset: 0x464
	LinearColor IndirectLightingColor; // Offset: 0x468
	float IndirectLightingIntensity; // Offset: 0x478
	TEnumAsByte<ERayTracingGlobalIlluminationType> RayTracingGIType; // Offset: 0x47c
	int RayTracingGIMaxBounces; // Offset: 0x480
	int RayTracingGISamplesPerPixel; // Offset: 0x484
	float ColorGradingIntensity; // Offset: 0x488
	Texture* ColorGradingLUT; // Offset: 0x490
	float DepthOfFieldSensorWidth; // Offset: 0x498
	float DepthOfFieldFocalDistance; // Offset: 0x49c
	float DepthOfFieldDepthBlurAmount; // Offset: 0x4a0
	float DepthOfFieldDepthBlurRadius; // Offset: 0x4a4
	float DepthOfFieldFocalRegion; // Offset: 0x4a8
	float DepthOfFieldNearTransitionRegion; // Offset: 0x4ac
	float DepthOfFieldFarTransitionRegion; // Offset: 0x4b0
	float DepthOfFieldScale; // Offset: 0x4b4
	float DepthOfFieldNearBlurSize; // Offset: 0x4b8
	float DepthOfFieldFarBlurSize; // Offset: 0x4bc
	float DepthOfFieldOcclusion; // Offset: 0x4c0
	float DepthOfFieldSkyFocusDistance; // Offset: 0x4c4
	float DepthOfFieldVignetteSize; // Offset: 0x4c8
	float MotionBlurAmount; // Offset: 0x4cc
	float MotionBlurMax; // Offset: 0x4d0
	int MotionBlurTargetFPS; // Offset: 0x4d4
	float MotionBlurPerObjectSize; // Offset: 0x4d8
	float LPVIntensity; // Offset: 0x4dc
	float LPVVplInjectionBias; // Offset: 0x4e0
	float LPVSize; // Offset: 0x4e4
	float LPVSecondaryOcclusionIntensity; // Offset: 0x4e8
	float LPVSecondaryBounceIntensity; // Offset: 0x4ec
	float LPVGeometryVolumeBias; // Offset: 0x4f0
	float LPVEmissiveInjectionIntensity; // Offset: 0x4f4
	float LPVDirectionalOcclusionIntensity; // Offset: 0x4f8
	float LPVDirectionalOcclusionRadius; // Offset: 0x4fc
	float LPVDiffuseOcclusionExponent; // Offset: 0x500
	float LPVSpecularOcclusionExponent; // Offset: 0x504
	float LPVDiffuseOcclusionIntensity; // Offset: 0x508
	float LPVSpecularOcclusionIntensity; // Offset: 0x50c
	TEnumAsByte<EReflectionsType> ReflectionsType; // Offset: 0x510
	float ScreenSpaceReflectionIntensity; // Offset: 0x514
	float ScreenSpaceReflectionQuality; // Offset: 0x518
	float ScreenSpaceReflectionMaxRoughness; // Offset: 0x51c
	float RayTracingReflectionsMaxRoughness; // Offset: 0x520
	int RayTracingReflectionsMaxBounces; // Offset: 0x524
	int RayTracingReflectionsSamplesPerPixel; // Offset: 0x528
	TEnumAsByte<EReflectedAndRefractedRayTracedShadows> RayTracingReflectionsShadows; // Offset: 0x52c
	bool RayTracingReflectionsTranslucency; // Offset: 0x52d
	TEnumAsByte<ETranslucencyType> TranslucencyType; // Offset: 0x52e
	float RayTracingTranslucencyMaxRoughness; // Offset: 0x530
	int RayTracingTranslucencyRefractionRays; // Offset: 0x534
	int RayTracingTranslucencySamplesPerPixel; // Offset: 0x538
	TEnumAsByte<EReflectedAndRefractedRayTracedShadows> RayTracingTranslucencyShadows; // Offset: 0x53c
	bool RayTracingTranslucencyRefraction; // Offset: 0x53d
	int PathTracingMaxBounces; // Offset: 0x540
	int PathTracingSamplesPerPixel; // Offset: 0x544
	float LPVFadeRange; // Offset: 0x548
	float LPVDirectionalOcclusionFadeRange; // Offset: 0x54c
	float ScreenPercentage; // Offset: 0x550
	WeightedBlendables WeightedBlendables; // Offset: 0x558
// ============================= //
Enum EBloomMethod
	BM_SOG = 0,
	BM_FFT = 1,
	BM_MAX = 2;
// ============================= //
Enum EAutoExposureMethod
	AEM_Histogram = 0,
	AEM_Basic = 1,
	AEM_Manual = 2,
	AEM_MAX = 3;
// ============================= //
Struct Vector4
	float X; // Offset: 0x0
	float Y; // Offset: 0x4
	float Z; // Offset: 0x8
	float W; // Offset: 0xc
// ============================= //
Class TextureCube.Texture.638112bfc1.Object
// ============================= //
Struct IntPoint
	int X; // Offset: 0x0
	int Y; // Offset: 0x4
// ============================= //
Enum ERayTracingGlobalIlluminationType
	ERayTracingGlobalIlluminationType::Disabled = 0,
	ERayTracingGlobalIlluminationType::BruteForce = 1,
	ERayTracingGlobalIlluminationType::FinalGather = 2,
	ERayTracingGlobalIlluminationType::ERayTracingGlobalIlluminationType_MAX = 3;
// ============================= //
Enum EReflectionsType
	EReflectionsType::ScreenSpace = 0,
	EReflectionsType::RayTracing = 1,
	EReflectionsType::EReflectionsType_MAX = 2;
// ============================= //
Enum EReflectedAndRefractedRayTracedShadows
	EReflectedAndRefractedRayTracedShadows::Disabled = 0,
	EReflectedAndRefractedRayTracedShadows::Hard_shadows = 1,
	EReflectedAndRefractedRayTracedShadows::Area_shadows = 2,
	EReflectedAndRefractedRayTracedShadows::EReflectedAndRefractedRayTracedShadows_MAX = 3;
// ============================= //
Enum ETranslucencyType
	ETranslucencyType::Raster = 0,
	ETranslucencyType::RayTracing = 1,
	ETranslucencyType::ETranslucencyType_MAX = 2;
// ============================= //
Struct WeightedBlendables
	TArray<WeightedBlendable> Array; // Offset: 0x0
// ============================= //
Struct WeightedBlendable
	float Weight; // Offset: 0x0
	Object* Object; // Offset: 0x8
// ============================= //
Class 8f4a6b634c.4866c69594.Object
// ============================= //
Enum ECameraShakePlaySpace
	ECameraShakePlaySpace::CameraLocal = 0,
	ECameraShakePlaySpace::World = 1,
	ECameraShakePlaySpace::UserDefined = 2,
	ECameraShakePlaySpace::ECameraShakePlaySpace_MAX = 3;
// ============================= //
Class 0170217033.e4400a65be.Object
	f4fa4aabc8 ceb85540c7; // Offset: 0xb0
	InterpCurveVector 32e75c237a; // Offset: 0xc8
	FName e8954c801d; // Offset: 0xe0
	bool f2c3e95ba7; // Offset: 0xec
	bool 711841af0e; // Offset: 0xec
	bool 3f748bde7a; // Offset: 0xec
	bool e61bc4286d; // Offset: 0xec
	bool ff10b5be04; // Offset: 0xec
	bool 7e8d785ed4; // Offset: 0xec
	InterpCurveVector PosTrack; // Offset: 0xf0
// ============================= //
Struct f4fa4aabc8
	TArray<fc83b67b5e> Points; // Offset: 0x0
// ============================= //
Struct fc83b67b5e
	FName GroupName; // Offset: 0x0
	float Time; // Offset: 0x8
// ============================= //
Struct InterpCurveVector
	TArray<InterpCurvePointVector> Points; // Offset: 0x0
	bool bIsLooped; // Offset: 0x10
	float LoopKeyOffset; // Offset: 0x14
// ============================= //
Struct InterpCurvePointVector
	float InVal; // Offset: 0x0
	Vector OutVal; // Offset: 0x4
	Vector ArriveTangent; // Offset: 0x10
	Vector LeaveTangent; // Offset: 0x1c
	TEnumAsByte<EInterpCurveMode> InterpMode; // Offset: 0x28
// ============================= //
Enum EInterpCurveMode
	CIM_Linear = 0,
	CIM_CurveAuto = 1,
	CIM_Constant = 2,
	CIM_CurveUser = 3,
	CIM_CurveBreak = 4,
	CIM_CurveAutoClamped = 5,
	CIM_MAX = 6;
// ============================= //
Struct 10687dde7f
	float Timestamp; // Offset: 0x0
	9f0e012e9c POV; // Offset: 0x10
// ============================= //
Struct 9f0e012e9c
	float 4b01305fb1; // Offset: 0x0
	Rotator Rotation; // Offset: 0x4
	Vector2D OffCenterProjectionOffset; // Offset: 0x10
	float OrthoWidth; // Offset: 0x18
	float AspectRatio; // Offset: 0x1c
	float OrthoFarClipPlane; // Offset: 0x20
	float FOV; // Offset: 0x24
	TEnumAsByte<ECameraProjectionMode> ProjectionMode; // Offset: 0x28
	bool bConstrainAspectRatio; // Offset: 0x29
	bool bUseFieldOfViewForLOD; // Offset: 0x29
	PostProcessSettings PostProcessSettings; // Offset: 0x30
	float OrthoNearClipPlane; // Offset: 0x5a0
	Vector Location; // Offset: 0x5a4
	float PostProcessBlendWeight; // Offset: 0x5f0
// ============================= //
Enum ECameraProjectionMode
	ECameraProjectionMode::Perspective = 0,
	ECameraProjectionMode::Orthographic = 1,
	ECameraProjectionMode::ECameraProjectionMode_MAX = 2;
// ============================= //
Struct c9d1258728
	Actor* Target; // Offset: 0x0
	9f0e012e9c POV; // Offset: 0x10
	PlayerState* PlayerState; // Offset: 0x610
// ============================= //
Class CameraActor.Actor.Object
	PostProcessSettings PostProcessSettings; // Offset: 0x2e0
	bool bConstrainAspectRatio; // Offset: 0x858
	SceneComponent* SceneComponent; // Offset: 0x860
	CameraComponent* CameraComponent; // Offset: 0x870
// ============================= //
Class CameraComponent.SceneComponent.ActorComponent.Object
	float OrthoWidth; // Offset: 0x278
	float OrthoNearClipPlane; // Offset: 0x27c
	float FieldOfView; // Offset: 0x290
	float OrthoFarClipPlane; // Offset: 0x294
	bool bConstrainAspectRatio; // Offset: 0x298
	bool bUseFieldOfViewForLOD; // Offset: 0x298
	bool bLockToHmd; // Offset: 0x298
	bool bUsePawnControlRotation; // Offset: 0x298
	TEnumAsByte<ECameraProjectionMode> ProjectionMode; // Offset: 0x299
	PostProcessSettings PostProcessSettings; // Offset: 0x2b0
	float AspectRatio; // Offset: 0x820
	float PostProcessBlendWeight; // Offset: 0x824
// ============================= //
Class 8e247eeffb.Object
	bool bDebug; // Offset: 0x68
	bool bExclusive; // Offset: 0x68
	float Alpha; // Offset: 0x6c
	PlayerCameraManager* CameraOwner; // Offset: 0x70
	float AlphaInTime; // Offset: 0x78
	uint8_t Priority; // Offset: 0x7c
	float AlphaOutTime; // Offset: 0x80
// ============================= //
Class EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* 0811ccd6bf; // Offset: 0x308
	Transform RelativeTransform; // Offset: 0x310
	ParticleSystem* PS_CameraEffectNonExtremeContent; // Offset: 0x348
	PlayerCameraManager* d3817f31ec; // Offset: 0x350
	bool 67d8019442; // Offset: 0x358
	bool e49bcbe833; // Offset: 0x358
	TArray<EmitterCameraLensEffectBase*> 2d0a9643d1; // Offset: 0x360
// ============================= //
Class Emitter.Actor.Object
	MulticastInlineDelegateProperty OnParticleSpawn; // Offset: 0x2b8
	bool 9742ca0f68; // Offset: 0x2c8
	bool bPostUpdateTickGroup; // Offset: 0x2c8
	bool 169f479dce; // Offset: 0x2c8
	MulticastInlineDelegateProperty OnParticleBurst; // Offset: 0x2d0
	ParticleSystemComponent* ParticleSystemComponent; // Offset: 0x2e0
	MulticastInlineDelegateProperty OnParticleCollide; // Offset: 0x2e8
	MulticastInlineDelegateProperty OnParticleDeath; // Offset: 0x2f8
// ============================= //
Class ParticleSystem.efe5f889cf.Object
	TArray<float> LODDistances; // Offset: 0x78
	TEnumAsByte<EParticleSignificanceLevel> 4274e3b746; // Offset: 0x90
	TEnumAsByte<EParticleSystemInsignificanceReaction> 925bddb461; // Offset: 0xb0
	ParticleSystemComponent* 81a11fac75; // Offset: 0xc8
	bool d3d91c1028; // Offset: 0xdc
	bool 4e5b4dfa54; // Offset: 0xdc
	bool 83f1dc0f52; // Offset: 0xdc
	bool cd5e10e6f1; // Offset: 0xdc
	bool 12d1615d25; // Offset: 0xdc
	bool b898797736; // Offset: 0xdc
	bool 000b3a362f; // Offset: 0xdd
	bool b5c9e8b110; // Offset: 0xdd
	bool 8d35213af2; // Offset: 0xdd
	bool 9850550032; // Offset: 0xdd
	bool a515640659; // Offset: 0xe4
	bool 4aa3391526; // Offset: 0xe4
	TArray<b9f822b5e4> LODSettings; // Offset: 0xe8
	TArray<ba83a48ab8> 8ffa81e74d; // Offset: 0xf8
	InterpCurveEdSetup* 47b771eeaa; // Offset: 0x130
	TArray<6f37549947> b6d5512a62; // Offset: 0x138
	TArray<ParticleEmitter*> Emitters; // Offset: 0x150
// ============================= //
Class efe5f889cf.Object
// ============================= //
Enum EParticleSignificanceLevel
	EParticleSignificanceLevel::Low = 0,
	EParticleSignificanceLevel::Medium = 1,
	EParticleSignificanceLevel::High = 2,
	EParticleSignificanceLevel::Critical = 3,
	EParticleSignificanceLevel::Num = 4,
	EParticleSignificanceLevel::EParticleSignificanceLevel_MAX = 5;
// ============================= //
Enum EParticleSystemInsignificanceReaction
	EParticleSystemInsignificanceReaction::Auto = 0,
	EParticleSystemInsignificanceReaction::Complete = 1,
	EParticleSystemInsignificanceReaction::DisableTick = 2,
	EParticleSystemInsignificanceReaction::DisableTickAndKill = 3,
	EParticleSystemInsignificanceReaction::Num = 4,
	EParticleSystemInsignificanceReaction::EParticleSystemInsignificanceReaction_MAX = 5;
// ============================= //
Class ParticleSystemComponent.FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnParticleSpawn; // Offset: 0x550
	bool bResetOnDetach; // Offset: 0x561
	bool 5c770809a1; // Offset: 0x561
	bool bAllowRecycling; // Offset: 0x561
	bool bAutoManageAttachment; // Offset: 0x561
	bool bAutoAttachWeldSimulatedBodies; // Offset: 0x561
	bool b87117b913; // Offset: 0x562
	bool bOverrideLODMethod; // Offset: 0x562
	bool be722cfe47; // Offset: 0x562
	TArray<ParticleSysParam> InstanceParameters; // Offset: 0x580
	TEnumAsByte<EAttachmentRule> AutoAttachLocationRule; // Offset: 0x590
	bool a11b007bbb; // Offset: 0x591
	float SecondsBeforeInactive; // Offset: 0x5c4
	SceneComponent* AutoAttachParent; // Offset: 0x5d8
	MulticastInlineDelegateProperty OnSystemFinished; // Offset: 0x610
	TEnumAsByte<EAttachmentRule> AutoAttachScaleRule; // Offset: 0x620
	MulticastInlineDelegateProperty OnParticleCollide; // Offset: 0x648
	ParticleSystem* Template; // Offset: 0x658
	TEnumAsByte<EAttachmentRule> AutoAttachRotationRule; // Offset: 0x66c
	FName AutoAttachSocketName; // Offset: 0x690
	TEnumAsByte<EParticleSignificanceLevel> fdfd3b418d; // Offset: 0x6a8
	TEnumAsByte<ParticleSystemLODMethod> LODMethod; // Offset: 0x6b0
	TArray<MaterialInterface*> f0c2818a15; // Offset: 0x6b8
	MulticastInlineDelegateProperty OnParticleBurst; // Offset: 0x6e0
	TArray<317fb3b125*> bad21d61b8; // Offset: 0x710
	TArray<SkeletalMeshComponent*> 575e727856; // Offset: 0x768
	MulticastInlineDelegateProperty OnParticleDeath; // Offset: 0x778
	float CustomTimeDilation; // Offset: 0x7b8
// ============================= //
Class FXSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
// ============================= //
Struct ParticleSysParam
	FName Name; // Offset: 0x0
	TEnumAsByte<EParticleSysParamType> ParamType; // Offset: 0x8
	float Scalar; // Offset: 0xc
	float Scalar_Low; // Offset: 0x10
	Vector Vector; // Offset: 0x14
	Vector Vector_Low; // Offset: 0x20
	Color Color; // Offset: 0x2c
	Actor* Actor; // Offset: 0x30
	MaterialInterface* Material; // Offset: 0x38
// ============================= //
Enum EParticleSysParamType
	PSPT_None = 0,
	PSPT_Scalar = 1,
	PSPT_ScalarRand = 2,
	PSPT_Vector = 3,
	PSPT_VectorRand = 4,
	PSPT_Color = 5,
	PSPT_Actor = 6,
	PSPT_Material = 7,
	PSPT_VectorUnitRand = 8,
	PSPT_MAX = 9;
// ============================= //
Enum EAttachmentRule
	EAttachmentRule::KeepRelative = 0,
	EAttachmentRule::KeepWorld = 1,
	EAttachmentRule::SnapToTarget = 2,
	EAttachmentRule::EAttachmentRule_MAX = 3;
// ============================= //
Enum ParticleSystemLODMethod
	PARTICLESYSTEMLODMETHOD_Automatic = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 2,
	PARTICLESYSTEMLODMETHOD_MAX = 3;
// ============================= //
Class 317fb3b125.Object
	int 864cb4e557; // Offset: 0x78
// ============================= //
Class SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float ShapeTargetStiffness; // Offset: 0x880
	TArray<Transform> 3423c1986e; // Offset: 0x888
	ClothingSimulationFactory* ClothingSimulationFactory; // Offset: 0x8a0
	float EdgeStiffness; // Offset: 0x8a8
	float BendingStiffness; // Offset: 0x8ac
	float TeleportRotationThreshold; // Offset: 0x940
	TEnumAsByte<EPhysicsTransformUpdateMode> PhysicsTransformUpdateMode; // Offset: 0x944
	9e71cdf1e8 AnimationData; // Offset: 0x948
	TEnumAsByte<EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType; // Offset: 0x960
	float TeleportDistanceThreshold; // Offset: 0x964
	AnimInstance* 190432bfef; // Offset: 0x968
	TEnumAsByte<EClothMassMode> MassMode; // Offset: 0x970
	TArray<AnimInstance*> 8093cfa774; // Offset: 0x978
	TArray<FName> e0ce72bd87; // Offset: 0xa20
	float TotalMass; // Offset: 0xa30
	bool bDisablePostProcessBlueprint; // Offset: 0xa34
	bool 561ad523ae; // Offset: 0xa34
	bool 5b7a85db4d; // Offset: 0xa34
	bool bd43f04a6e; // Offset: 0xa34
	bool bEnablePhysicsOnDedicatedServer; // Offset: 0xa34
	bool bUpdateJointsFromAnimation; // Offset: 0xa34
	bool bDisableClothSimulation; // Offset: 0xa35
	bool 6dc484552e; // Offset: 0xa40
	bool 0a408429d7; // Offset: 0xa40
	bool bDisableAnimCurves; // Offset: 0xa40
	bool bCollideWithEnvironment; // Offset: 0xa41
	bool bCollideWithAttachedChildren; // Offset: 0xa41
	bool bLocalSpaceSimulation; // Offset: 0xa41
	bool bResetAfterTeleport; // Offset: 0xa41
	bool bDeferKinematicBoneUpdate; // Offset: 0xa41
	bool bNoSkeletonUpdate; // Offset: 0xa41
	bool bPauseAnims; // Offset: 0xa41
	bool 020e7a8b0b; // Offset: 0xa42
	bool bEnablePerPolyCollision; // Offset: 0xa42
	bool 0663508d38; // Offset: 0xa42
	bool 2e57a976bc; // Offset: 0xa42
	bool ff7f6eaa19; // Offset: 0xa42
	bool 3023bed44a; // Offset: 0xa42
	bool 4f6c8d285a; // Offset: 0xa42
	bool f11293706b; // Offset: 0xa42
	bool 05f5e8889c; // Offset: 0xa43
	bool bIncludeComponentLocationIntoBounds; // Offset: 0xa43
	bool d226a7bffc; // Offset: 0xa43
	bool bUseBendingElements; // Offset: 0xa43
	bool bUseTetrahedralConstraints; // Offset: 0xa43
	bool bUseThinShellVolumeConstraints; // Offset: 0xa43
	bool bUseSelfCollisions; // Offset: 0xa43
	bool bUseContinuousCollisionDetection; // Offset: 0xa43
	bool bPropagateCurvesToSlaves; // Offset: 0xa44
	bool bSkipKinematicUpdateWhenInterpolating; // Offset: 0xa44
	bool bSkipBoundsUpdateWhenInterpolating; // Offset: 0xa44
	bool 0fe2914d0c; // Offset: 0xa44
	8b15d9c47d* 3a499508cd; // Offset: 0xa48
	Vector c451c75707; // Offset: 0xb00
	float UniformMass; // Offset: 0xb30
	TEnumAsByte<EAnimationMode> AnimationMode; // Offset: 0xb34
	float StrainLimitingStiffness; // Offset: 0xb38
	MulticastInlineDelegateProperty OnConstraintBroken; // Offset: 0xb40
	uint16_t 3977fde2db; // Offset: 0xb50
	MulticastInlineDelegateProperty OnAnimInitialized; // Offset: 0xbd0
	bool bWaitForParallelClothTask; // Offset: 0xbe1
	TArray<Transform> 1cbbe7dfb9; // Offset: 0xcb0
	float Density; // Offset: 0xce8
	Object* AnimBlueprintGeneratedClass; // Offset: 0xd00
	float ClothBlendWeight; // Offset: 0xd18
	UInt32Property e7455bcd72; // Offset: 0xd80
	AnimInstance* AnimClass; // Offset: 0xd88
	float VolumeStiffness; // Offset: 0xd98
	float GlobalAnimRateScale; // Offset: 0xfb0
	TArray<AnimInstance*> LinkedInstances; // Offset: 0x10d8
	float MinPerParticleMass; // Offset: 0x10e8
	float AreaStiffness; // Offset: 0x1108
	BodySetup* BodySetup; // Offset: 0x1110
// ============================= //
Class SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<TEnumAsByte<ESkinCacheUsage>> SkinCacheUsage; // Offset: 0x578
	float CapsuleIndirectShadowMinVisibility; // Offset: 0x588
	PhysicsAsset* PhysicsAssetOverride; // Offset: 0x5c8
	int ForcedLodModel; // Offset: 0x608
	float StreamingDistanceMultiplier; // Offset: 0x60c
	int MinLodModel; // Offset: 0x64c
	SkeletalMesh* SkeletalMesh; // Offset: 0x678
	TArray<VertexOffsetUsage> VertexOffsetUsage; // Offset: 0x6a0
	SkinnedMeshComponent* MasterPoseComponent; // Offset: 0x6c8
	bool bOverrideMinLOD; // Offset: 0x740
	bool bOverrideCullingScreenSize; // Offset: 0x740
	bool bOverrideEnableDistanceCulling; // Offset: 0x740
	bool bUseBoundsFromMasterPoseComponent; // Offset: 0x740
	bool 5e64dc7e44; // Offset: 0x740
	bool bDisplayBones; // Offset: 0x741
	bool bDisableMorphTarget; // Offset: 0x741
	bool 98c56e4602; // Offset: 0x741
	bool bPerBoneMotionBlur; // Offset: 0x741
	bool bComponentUseFixedSkelBounds; // Offset: 0x741
	bool bConsiderAllBodiesForBounds; // Offset: 0x741
	bool bSyncAttachParentLOD; // Offset: 0x741
	bool 9e5632ea2d; // Offset: 0x741
	bool 7b67902fd3; // Offset: 0x742
	bool bCastCapsuleDirectShadow; // Offset: 0x742
	bool bCastCapsuleIndirectShadow; // Offset: 0x742
	bool bCPUSkinning; // Offset: 0x742
	bool bEnableUpdateRateOptimizations; // Offset: 0x742
	bool bDisplayDebugUpdateRateOptimizations; // Offset: 0x742
	bool bRenderStatic; // Offset: 0x742
	bool bIgnoreMasterPoseComponentLOD; // Offset: 0x742
	bool 8b1287c84e; // Offset: 0x743
	bool 0bb19795b7; // Offset: 0x743
	bool bIgnoreLODBias; // Offset: 0x744
	TArray<54ec12850a> LODInfo; // Offset: 0x748
	BoxSphereBounds ceaa1697e4; // Offset: 0x760
	Matrix 0004a58ed1; // Offset: 0x780
	TEnumAsByte<EVisibilityBasedAnimTickOption> VisibilityBasedAnimTickOption; // Offset: 0x7c0
// ============================= //
Enum ESkinCacheUsage
	ESkinCacheUsage::Auto = 0,
	ESkinCacheUsage::Disabled = 255,
	ESkinCacheUsage::Enabled = 1,
	ESkinCacheUsage::ESkinCacheUsage_MAX = 256;
// ============================= //
Class DestructibleComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bFractureEffectOverride; // Offset: 0x838
	float LargeChunkThreshold; // Offset: 0x840
	MulticastInlineDelegateProperty OnComponentFracture; // Offset: 0x848
	bool bEnableHardSleeping; // Offset: 0x8e0
	TArray<7c6e881b8c> FractureEffects; // Offset: 0x8e8
// ============================= //
Struct 7c6e881b8c
	ParticleSystem* ParticleSystem; // Offset: 0x0
	SoundBase* Sound; // Offset: 0x8
// ============================= //
Class SoundBase.Object
	5c9cf0fb95* SourceEffectChain; // Offset: 0x70
	float MaxDistance; // Offset: 0x78
	9706fb6b1f ConcurrencyOverrides; // Offset: 0x7c
	bool bDebug; // Offset: 0xa0
	bool bOverrideConcurrency; // Offset: 0xa0
	bool bOutputToBusOnly; // Offset: 0xa0
	bool f55ec17825; // Offset: 0xa0
	bool d203f51b7f; // Offset: 0xa0
	bool bBypassVolumeScaleForPriority; // Offset: 0xa0
	TArray<c4106845fa> BusSends; // Offset: 0xa8
	float Duration; // Offset: 0xb8
	TEnumAsByte<EVirtualizationMode> VirtualizationMode; // Offset: 0xbc
	float Priority; // Offset: 0xc0
	SoundModulationDefaultRoutingSettings ModulationSettings; // Offset: 0x118
	TArray<d9dab5379a> SoundSubmixSends; // Offset: 0x160
	TArray<AssetUserData*> AssetUserData; // Offset: 0x170
	7a330b57f1* SoundSubmixObject; // Offset: 0x180
	SoundClass* SoundClassObject; // Offset: 0x188
	SetProperty ConcurrencySet; // Offset: 0x190
	float TotalSamples; // Offset: 0x1e0
	f47d21218f* AttenuationSettings; // Offset: 0x1e8
	TArray<c4106845fa> PreEffectBusSends; // Offset: 0x1f0
// ============================= //
Class 5c9cf0fb95.Object
	TArray<8dcfa86bd3> Chain; // Offset: 0x68
	bool 42e70ad28e; // Offset: 0x78
// ============================= //
Struct 8dcfa86bd3
	fc06589e11* PRESET; // Offset: 0x0
	bool bBypass; // Offset: 0x8
// ============================= //
Class fc06589e11.SoundEffectPreset.Object
// ============================= //
Class SoundEffectPreset.Object
// ============================= //
Struct 9706fb6b1f
	int MaxCount; // Offset: 0x0
	bool bLimitToOwner; // Offset: 0x4
	TEnumAsByte<EMaxConcurrentResolutionRule> ResolutionRule; // Offset: 0x5
	float RetriggerTime; // Offset: 0x8
	float 6ccb351d39; // Offset: 0xc
	TEnumAsByte<EConcurrencyVolumeScaleMode> VolumeScaleMode; // Offset: 0x10
	float VolumeScaleAttackTime; // Offset: 0x14
	bool bVolumeScaleCanRelease; // Offset: 0x18
	float VolumeScaleReleaseTime; // Offset: 0x1c
	float VoiceStealReleaseTime; // Offset: 0x20
// ============================= //
Enum EMaxConcurrentResolutionRule
	EMaxConcurrentResolutionRule::PreventNew = 0,
	EMaxConcurrentResolutionRule::StopOldest = 1,
	EMaxConcurrentResolutionRule::StopFarthestThenPreventNew = 2,
	EMaxConcurrentResolutionRule::StopFarthestThenOldest = 3,
	EMaxConcurrentResolutionRule::StopLowestPriority = 4,
	EMaxConcurrentResolutionRule::StopQuietest = 5,
	EMaxConcurrentResolutionRule::StopLowestPriorityThenPreventNew = 6,
	EMaxConcurrentResolutionRule::Count = 7,
	EMaxConcurrentResolutionRule::EMaxConcurrentResolutionRule_MAX = 8;
// ============================= //
Enum EConcurrencyVolumeScaleMode
	EConcurrencyVolumeScaleMode::Default = 0,
	EConcurrencyVolumeScaleMode::Distance = 1,
	EConcurrencyVolumeScaleMode::Priority = 2,
	EConcurrencyVolumeScaleMode::EConcurrencyVolumeScaleMode_MAX = 3;
// ============================= //
Struct c4106845fa
	TEnumAsByte<ESourceBusSendLevelControlMethod> da0ce4af27; // Offset: 0x0
	SoundSourceBus* SoundSourceBus; // Offset: 0x8
	AudioBus* AudioBus; // Offset: 0x10
	float SendLevel; // Offset: 0x18
	float MinSendLevel; // Offset: 0x1c
	float MaxSendLevel; // Offset: 0x20
	float MinSendDistance; // Offset: 0x24
	float MaxSendDistance; // Offset: 0x28
	RuntimeFloatCurve CustomSendLevelCurve; // Offset: 0x30
// ============================= //
Enum ESourceBusSendLevelControlMethod
	ESourceBusSendLevelControlMethod::Linear = 0,
	ESourceBusSendLevelControlMethod::CustomCurve = 1,
	ESourceBusSendLevelControlMethod::Manual = 2,
	ESourceBusSendLevelControlMethod::ESourceBusSendLevelControlMethod_MAX = 3;
// ============================= //
Class SoundSourceBus.SoundWave.SoundBase.Object
	AudioBus* AudioBus; // Offset: 0x3e0
	TEnumAsByte<ESourceBusChannels> 47a2acc315; // Offset: 0x3e8
	bool c8ec8acb3b; // Offset: 0x3e9
// ============================= //
Class SoundWave.SoundBase.Object
	TEnumAsByte<ESoundwaveSampleRateSettings> dc2a0494f7; // Offset: 0x200
	TArray<0978ada2c8> 841dc6f109; // Offset: 0x208
	bool bLooping; // Offset: 0x224
	bool bStreaming; // Offset: 0x224
	bool d3a96d0d32; // Offset: 0x224
	TEnumAsByte<ESoundWaveLoadingBehavior> LoadingBehavior; // Offset: 0x225
	bool bMature; // Offset: 0x226
	bool bManualWordWrap; // Offset: 0x226
	bool bSingleLine; // Offset: 0x227
	bool 969c3dfacd; // Offset: 0x227
	TArray<98af55bcb8> 8533b595c0; // Offset: 0x250
	TArray<4a94776987> Subtitles; // Offset: 0x268
	float SubtitlePriority; // Offset: 0x2b8
	CurveTable* de2f3296eb; // Offset: 0x2e0
	CurveTable* Curves; // Offset: 0x350
	TArray<float> ea6e0019c9; // Offset: 0x358
	FString SpokenText; // Offset: 0x390
// ============================= //
Enum ESoundwaveSampleRateSettings
	ESoundwaveSampleRateSettings::Max = 0,
	ESoundwaveSampleRateSettings::High = 1,
	ESoundwaveSampleRateSettings::Medium = 2,
	ESoundwaveSampleRateSettings::Low = 3,
	ESoundwaveSampleRateSettings::Min = 4,
	ESoundwaveSampleRateSettings::MatchDevice = 5;
// ============================= //
Struct 0978ada2c8
	TArray<c18765806b> Data; // Offset: 0x0
	float TimeSec; // Offset: 0x10
// ============================= //
Struct c18765806b
	float Magnitude; // Offset: 0x0
	float NormalizedMagnitude; // Offset: 0x4
// ============================= //
Enum ESoundWaveLoadingBehavior
	ESoundWaveLoadingBehavior::Inherited = 0,
	ESoundWaveLoadingBehavior::RetainOnLoad = 1,
	ESoundWaveLoadingBehavior::PrimeOnLoad = 2,
	ESoundWaveLoadingBehavior::LoadOnDemand = 3,
	ESoundWaveLoadingBehavior::ForceInline = 4,
	ESoundWaveLoadingBehavior::Uninitialized = 255,
	ESoundWaveLoadingBehavior::ESoundWaveLoadingBehavior_MAX = 256;
// ============================= //
Struct 98af55bcb8
	float Amplitude; // Offset: 0x0
	float TimeSec; // Offset: 0x4
// ============================= //
Struct 4a94776987
	FText Text; // Offset: 0x0
	float Time; // Offset: 0x18
// ============================= //
Class AudioBus.Object
	TEnumAsByte<EAudioBusChannels> c2b62fe188; // Offset: 0x69
// ============================= //
Enum EAudioBusChannels
	EAudioBusChannels::Mono = 0,
	EAudioBusChannels::Stereo = 1,
	EAudioBusChannels::EAudioBusChannels_MAX = 2;
// ============================= //
Enum ESourceBusChannels
	ESourceBusChannels::Mono = 0,
	ESourceBusChannels::Stereo = 1,
	ESourceBusChannels::ESourceBusChannels_MAX = 2;
// ============================= //
Class CurveTable.Object
// ============================= //
Enum EVirtualizationMode
	EVirtualizationMode::Disabled = 0,
	EVirtualizationMode::PlayWhenSilent = 1,
	EVirtualizationMode::Restart = 2,
	EVirtualizationMode::EVirtualizationMode_MAX = 3;
// ============================= //
Struct SoundModulationDefaultRoutingSettings.SoundModulationDefaultSettings
	TEnumAsByte<EModulationRouting> VolumeRouting; // Offset: 0x40
	TEnumAsByte<EModulationRouting> PitchRouting; // Offset: 0x41
	TEnumAsByte<EModulationRouting> HighpassRouting; // Offset: 0x42
	TEnumAsByte<EModulationRouting> LowpassRouting; // Offset: 0x43
// ============================= //
Struct SoundModulationDefaultSettings
	SoundModulationDestinationSettings VolumeModulationDestination; // Offset: 0x0
	SoundModulationDestinationSettings PitchModulationDestination; // Offset: 0x10
	SoundModulationDestinationSettings HighpassModulationDestination; // Offset: 0x20
	SoundModulationDestinationSettings LowpassModulationDestination; // Offset: 0x30
// ============================= //
Enum EModulationRouting
	EModulationRouting::Disable = 0,
	EModulationRouting::Inherit = 1,
	EModulationRouting::Override = 2,
	EModulationRouting::EModulationRouting_MAX = 3;
// ============================= //
Struct SoundModulationDestinationSettings
	float Value; // Offset: 0x0
	900609d6fb* Modulator; // Offset: 0x8
// ============================= //
Class 900609d6fb.Object
// ============================= //
Struct d9dab5379a
	TEnumAsByte<ESendLevelControlMethod> SendLevelControlMethod; // Offset: 0x0
	TEnumAsByte<ESubmixSendStage> SendStage; // Offset: 0x1
	7a330b57f1* SoundSubmix; // Offset: 0x8
	float SendLevel; // Offset: 0x10
	float MinSendLevel; // Offset: 0x14
	float MaxSendLevel; // Offset: 0x18
	float MinSendDistance; // Offset: 0x1c
	float MaxSendDistance; // Offset: 0x20
	RuntimeFloatCurve CustomSendLevelCurve; // Offset: 0x28
// ============================= //
Enum ESendLevelControlMethod
	ESendLevelControlMethod::Linear = 0,
	ESendLevelControlMethod::CustomCurve = 1,
	ESendLevelControlMethod::Manual = 2,
	ESendLevelControlMethod::ESendLevelControlMethod_MAX = 3;
// ============================= //
Enum ESubmixSendStage
	ESubmixSendStage::PostDistanceAttenuation = 0,
	ESubmixSendStage::PreDistanceAttenuation = 1,
	ESubmixSendStage::ESubmixSendStage_MAX = 2;
// ============================= //
Class 7a330b57f1.Object
	TArray<7a330b57f1*> ChildSubmixes; // Offset: 0x68
// ============================= //
Class SoundClass.Object
	TArray<SoundClass*> ChildClasses; // Offset: 0x68
	TArray<PassiveSoundMixModifier> PassiveSoundMixModifiers; // Offset: 0x78
	SoundClass* ParentClass; // Offset: 0x88
	eb313d9bce Properties; // Offset: 0x90
// ============================= //
Struct PassiveSoundMixModifier
	SoundMix* SoundMix; // Offset: 0x0
	float MinVolumeThreshold; // Offset: 0x8
	float MaxVolumeThreshold; // Offset: 0xc
// ============================= //
Class SoundMix.Object
	bool 23fc6e0079; // Offset: 0x68
	AudioEQEffect bd2953b1df; // Offset: 0x70
	TArray<0e915daf05> SoundClassEffects; // Offset: 0xb8
// ============================= //
Struct AudioEQEffect.89c434ed66
	float FrequencyCenter0; // Offset: 0x10
	float Gain0; // Offset: 0x14
	float Bandwidth0; // Offset: 0x18
	float FrequencyCenter1; // Offset: 0x1c
	float Gain1; // Offset: 0x20
	float Bandwidth1; // Offset: 0x24
	float FrequencyCenter2; // Offset: 0x28
	float Gain2; // Offset: 0x2c
	float Bandwidth2; // Offset: 0x30
	float FrequencyCenter3; // Offset: 0x34
	float Gain3; // Offset: 0x38
	float Bandwidth3; // Offset: 0x3c
// ============================= //
Struct 89c434ed66
// ============================= //
Struct 0e915daf05
	SoundClass* SoundClassObject; // Offset: 0x0
	float VolumeAdjuster; // Offset: 0x8
	float PitchAdjuster; // Offset: 0xc
	float LowPassFilterFrequency; // Offset: 0x10
	bool bApplyToChildren; // Offset: 0x14
	float VoiceCenterChannelVolumeAdjuster; // Offset: 0x18
// ============================= //
Struct eb313d9bce
	float Volume; // Offset: 0x0
	float Pitch; // Offset: 0x4
	float LowPassFilterFrequency; // Offset: 0x8
	float AttenuationDistanceScale; // Offset: 0xc
	float StereoBleed; // Offset: 0x10
	float LFEBleed; // Offset: 0x14
	float VoiceCenterChannelVolume; // Offset: 0x18
	float RadioFilterVolume; // Offset: 0x1c
	float RadioFilterVolumeThreshold; // Offset: 0x20
	bool bApplyEffects; // Offset: 0x24
	bool bAlwaysPlay; // Offset: 0x24
	bool bIsUISound; // Offset: 0x24
	bool bIsMusic; // Offset: 0x24
	bool bCenterChannelOnly; // Offset: 0x24
	bool bApplyAmbientVolumes; // Offset: 0x24
	bool bReverb; // Offset: 0x24
	float Default2DReverbSendAmount; // Offset: 0x28
	SoundModulationDefaultSettings ModulationSettings; // Offset: 0x30
	TEnumAsByte<EAudioOutputTarget> OutputTarget; // Offset: 0x70
	TEnumAsByte<ESoundWaveLoadingBehavior> LoadingBehavior; // Offset: 0x71
	SoundSubmix* DefaultSubmix; // Offset: 0x78
// ============================= //
Enum EAudioOutputTarget
	EAudioOutputTarget::Speaker = 0,
	EAudioOutputTarget::Controller = 1,
	EAudioOutputTarget::ControllerFallbackToSpeaker = 2,
	EAudioOutputTarget::EAudioOutputTarget_MAX = 3;
// ============================= //
Class SoundSubmix.45c37c58d6.7a330b57f1.Object
	bool bMuteWhenBackgrounded; // Offset: 0x80
	float WetLevel; // Offset: 0x84
	int EnvelopeFollowerAttackTime; // Offset: 0x88
	int EnvelopeFollowerReleaseTime; // Offset: 0x8c
	float DryLevel; // Offset: 0x90
	TEnumAsByte<EGainParamMode> GainMode; // Offset: 0x94
	246714623b* AmbisonicsPluginSettings; // Offset: 0x98
	TArray<71068657ac*> SubmixEffectChain; // Offset: 0xa0
	float OutputVolume; // Offset: 0xb0
	MulticastInlineDelegateProperty OnSubmixRecordedFileDone; // Offset: 0xc0
// ============================= //
Class 45c37c58d6.7a330b57f1.Object
	7a330b57f1* ParentSubmix; // Offset: 0x78
// ============================= //
Enum EGainParamMode
	EGainParamMode::Linear = 0,
	EGainParamMode::Decibels = 1,
	EGainParamMode::EGainParamMode_MAX = 2;
// ============================= //
Class 246714623b.Object
// ============================= //
Class 71068657ac.SoundEffectPreset.Object
// ============================= //
Class f47d21218f.Object
	SoundAttenuationSettings Attenuation; // Offset: 0x68
// ============================= //
Struct SoundAttenuationSettings.ca9f11d811
	bool bAttenuate; // Offset: 0xb0
	bool bSpatialize; // Offset: 0xb0
	bool bAttenuateWithLPF; // Offset: 0xb0
	bool bEnableListenerFocus; // Offset: 0xb0
	bool bEnableFocusInterpolation; // Offset: 0xb0
	bool bEnableOcclusion; // Offset: 0xb0
	bool bUseComplexCollisionForOcclusion; // Offset: 0xb0
	bool bEnableReverbSend; // Offset: 0xb0
	bool bEnablePriorityAttenuation; // Offset: 0xb1
	bool bApplyNormalizationToStereoSounds; // Offset: 0xb1
	bool bEnableLogFrequencyScaling; // Offset: 0xb1
	bool bEnableSubmixSends; // Offset: 0xb1
	TEnumAsByte<ESoundSpatializationAlgorithm> SpatializationAlgorithm; // Offset: 0xb2
	float BinauralRadius; // Offset: 0xb4
	TEnumAsByte<EAirAbsorptionMethod> AbsorptionMethod; // Offset: 0xb8
	TEnumAsByte<ECollisionChannel> OcclusionTraceChannel; // Offset: 0xb9
	TEnumAsByte<EReverbSendMethod> ReverbSendMethod; // Offset: 0xba
	TEnumAsByte<EPriorityAttenuationMethod> PriorityAttenuationMethod; // Offset: 0xbb
	float OmniRadius; // Offset: 0xbc
	float StereoSpread; // Offset: 0xc0
	float LPFRadiusMin; // Offset: 0xc4
	float LPFRadiusMax; // Offset: 0xc8
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve; // Offset: 0xd0
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve; // Offset: 0x158
	float LPFFrequencyAtMin; // Offset: 0x1e0
	float LPFFrequencyAtMax; // Offset: 0x1e4
	float HPFFrequencyAtMin; // Offset: 0x1e8
	float HPFFrequencyAtMax; // Offset: 0x1ec
	float FocusAzimuth; // Offset: 0x1f0
	float NonFocusAzimuth; // Offset: 0x1f4
	float FocusDistanceScale; // Offset: 0x1f8
	float NonFocusDistanceScale; // Offset: 0x1fc
	float FocusPriorityScale; // Offset: 0x200
	float NonFocusPriorityScale; // Offset: 0x204
	float FocusVolumeAttenuation; // Offset: 0x208
	float NonFocusVolumeAttenuation; // Offset: 0x20c
	float FocusAttackInterpSpeed; // Offset: 0x210
	float FocusReleaseInterpSpeed; // Offset: 0x214
	float OcclusionLowPassFilterFrequency; // Offset: 0x218
	float OcclusionVolumeAttenuation; // Offset: 0x21c
	float OcclusionInterpolationTime; // Offset: 0x220
	float ReverbWetLevelMin; // Offset: 0x224
	float ReverbWetLevelMax; // Offset: 0x228
	float ReverbDistanceMin; // Offset: 0x22c
	float ReverbDistanceMax; // Offset: 0x230
	float ManualReverbSendLevel; // Offset: 0x234
	RuntimeFloatCurve CustomReverbSendCurve; // Offset: 0x238
	TArray<5233f8dcd0> SubmixSendSettings; // Offset: 0x2c0
	float PriorityAttenuationMin; // Offset: 0x2d0
	float PriorityAttenuationMax; // Offset: 0x2d4
	float PriorityAttenuationDistanceMin; // Offset: 0x2d8
	float PriorityAttenuationDistanceMax; // Offset: 0x2dc
	float ManualPriorityAttenuation; // Offset: 0x2e0
	RuntimeFloatCurve CustomPriorityAttenuationCurve; // Offset: 0x2e8
	cada0e31f5 PluginSettings; // Offset: 0x370
// ============================= //
Struct ca9f11d811
	TEnumAsByte<EAttenuationDistanceModel> DistanceAlgorithm; // Offset: 0x8
	TEnumAsByte<EAttenuationShape> AttenuationShape; // Offset: 0x9
	float dBAttenuationAtMax; // Offset: 0xc
	TEnumAsByte<ENaturalSoundFalloffMode> FalloffMode; // Offset: 0x10
	Vector AttenuationShapeExtents; // Offset: 0x14
	float ConeOffset; // Offset: 0x20
	float FalloffDistance; // Offset: 0x24
	RuntimeFloatCurve CustomAttenuationCurve; // Offset: 0x28
// ============================= //
Enum EAttenuationDistanceModel
	EAttenuationDistanceModel::Linear = 0,
	EAttenuationDistanceModel::Logarithmic = 1,
	EAttenuationDistanceModel::Inverse = 2,
	EAttenuationDistanceModel::LogReverse = 3,
	EAttenuationDistanceModel::NaturalSound = 4,
	EAttenuationDistanceModel::Custom = 5,
	EAttenuationDistanceModel::EAttenuationDistanceModel_MAX = 6;
// ============================= //
Enum EAttenuationShape
	EAttenuationShape::Sphere = 0,
	EAttenuationShape::Capsule = 1,
	EAttenuationShape::Box = 2,
	EAttenuationShape::Cone = 3,
	EAttenuationShape::EAttenuationShape_MAX = 4;
// ============================= //
Enum ENaturalSoundFalloffMode
	ENaturalSoundFalloffMode::Continues = 0,
	ENaturalSoundFalloffMode::Silent = 1,
	ENaturalSoundFalloffMode::Hold = 2,
	ENaturalSoundFalloffMode::ENaturalSoundFalloffMode_MAX = 3;
// ============================= //
Enum ESoundSpatializationAlgorithm
	SPATIALIZATION_Default = 0,
	SPATIALIZATION_HRTF = 1,
	SPATIALIZATION_MAX = 2;
// ============================= //
Enum EAirAbsorptionMethod
	EAirAbsorptionMethod::Linear = 0,
	EAirAbsorptionMethod::CustomCurve = 1,
	EAirAbsorptionMethod::EAirAbsorptionMethod_MAX = 2;
// ============================= //
Enum EReverbSendMethod
	EReverbSendMethod::Linear = 0,
	EReverbSendMethod::CustomCurve = 1,
	EReverbSendMethod::Manual = 2,
	EReverbSendMethod::EReverbSendMethod_MAX = 3;
// ============================= //
Enum EPriorityAttenuationMethod
	EPriorityAttenuationMethod::Linear = 0,
	EPriorityAttenuationMethod::CustomCurve = 1,
	EPriorityAttenuationMethod::Manual = 2,
	EPriorityAttenuationMethod::EPriorityAttenuationMethod_MAX = 3;
// ============================= //
Struct 5233f8dcd0
	7a330b57f1* Submix; // Offset: 0x0
	TEnumAsByte<ESubmixSendMethod> SubmixSendMethod; // Offset: 0x8
	float SubmixSendLevelMin; // Offset: 0xc
	float SubmixSendLevelMax; // Offset: 0x10
	float SubmixSendDistanceMin; // Offset: 0x14
	float SubmixSendDistanceMax; // Offset: 0x18
	float ManualSubmixSendLevel; // Offset: 0x1c
	RuntimeFloatCurve CustomSubmixSendCurve; // Offset: 0x20
// ============================= //
Enum ESubmixSendMethod
	ESubmixSendMethod::Linear = 0,
	ESubmixSendMethod::CustomCurve = 1,
	ESubmixSendMethod::Manual = 2,
	ESubmixSendMethod::ESubmixSendMethod_MAX = 3;
// ============================= //
Struct cada0e31f5
	TArray<44de54b749*> SpatializationPluginSettingsArray; // Offset: 0x0
	TArray<6ba266a355*> OcclusionPluginSettingsArray; // Offset: 0x10
	TArray<3c2c7626d3*> ReverbPluginSettingsArray; // Offset: 0x20
// ============================= //
Class 44de54b749.Object
// ============================= //
Class 6ba266a355.Object
// ============================= //
Class 3c2c7626d3.Object
// ============================= //
Class ClothingSimulationFactory.Object
// ============================= //
Enum EPhysicsTransformUpdateMode
	EPhysicsTransformUpdateMode::SimulationUpatesComponentTransform = 0,
	EPhysicsTransformUpdateMode::ComponentTransformIsKinematic = 1,
	EPhysicsTransformUpdateMode::EPhysicsTransformUpdateMode_MAX = 2;
// ============================= //
Struct 9e71cdf1e8
	AnimationAsset* AnimToPlay; // Offset: 0x0
	bool bSavedLooping; // Offset: 0x8
	bool bSavedPlaying; // Offset: 0x8
	float SavedPosition; // Offset: 0xc
	float SavedPlayRate; // Offset: 0x10
// ============================= //
Class AnimationAsset.Object
	TArray<AssetUserData*> AssetUserData; // Offset: 0x78
	TArray<fe8e67460b*> MetaData; // Offset: 0x98
	Skeleton* Skeleton; // Offset: 0xb8
// ============================= //
Class fe8e67460b.Object
// ============================= //
Class Skeleton.Object
	0012013a7d 77f851d1dc; // Offset: 0x78
	TArray<Transform> RefLocalPoses; // Offset: 0x240
	TArray<BlendProfile*> dd294c3991; // Offset: 0x2b8
	TArray<AssetUserData*> AssetUserData; // Offset: 0x2d8
	TArray<SkeletalMeshSocket*> Sockets; // Offset: 0x2e8
	TArray<9924569aaa> e6740061dd; // Offset: 0x348
	TArray<1164e83f47> VirtualBones; // Offset: 0x3b8
	TArray<346842d564> 1fb3c2b48f; // Offset: 0x3e8
// ============================= //
Struct 0012013a7d
// ============================= //
Class BlendProfile.Object
	TArray<50a708a5e4> 1fdd6b7e9e; // Offset: 0x70
	Skeleton* b163e61d5b; // Offset: 0x80
// ============================= //
Struct 50a708a5e4
	BoneReference BoneReference; // Offset: 0x0
	float c85324d664; // Offset: 0x10
// ============================= //
Struct BoneReference
	FName BoneName; // Offset: 0x0
// ============================= //
Class SkeletalMeshSocket.Object
	bool bForceAlwaysAnimated; // Offset: 0x68
	Rotator RelativeRotation; // Offset: 0x6c
	Vector RelativeLocation; // Offset: 0x78
	FName BoneName; // Offset: 0x84
	FName SocketName; // Offset: 0x8c
	Vector RelativeScale; // Offset: 0x94
// ============================= //
Struct 9924569aaa
	FName Name; // Offset: 0x0
	int ParentIndex; // Offset: 0x8
	TEnumAsByte<EBoneTranslationRetargetingMode> 6042067c66; // Offset: 0xc
// ============================= //
Enum EBoneTranslationRetargetingMode
	EBoneTranslationRetargetingMode::Animation = 0,
	EBoneTranslationRetargetingMode::Skeleton = 1,
	EBoneTranslationRetargetingMode::AnimationScaled = 2,
	EBoneTranslationRetargetingMode::AnimationRelative = 3,
	EBoneTranslationRetargetingMode::OrientAndScale = 4,
	EBoneTranslationRetargetingMode::EBoneTranslationRetargetingMode_MAX = 5;
// ============================= //
Struct 1164e83f47
	FName SourceBoneName; // Offset: 0x0
	FName TargetBoneName; // Offset: 0x8
	FName 9a0391d1ce; // Offset: 0x10
// ============================= //
Struct 346842d564
	FName GroupName; // Offset: 0x0
	TArray<FName> SlotNames; // Offset: 0x8
// ============================= //
Enum EKinematicBonesUpdateToPhysics
	EKinematicBonesUpdateToPhysics::SkipSimulatingBones = 0,
	EKinematicBonesUpdateToPhysics::SkipAllBones = 1,
	EKinematicBonesUpdateToPhysics::EKinematicBonesUpdateToPhysics_MAX = 2;
// ============================= //
Class AnimInstance.Object
	MulticastInlineDelegateProperty OnAllMontageInstancesEnded; // Offset: 0xb0
	bool bUseMultiThreadedAnimationUpdate; // Offset: 0xc0
	bool 8f77b183d9; // Offset: 0xc0
	bool cd52beb2da; // Offset: 0xc0
	bool 4aa018f851; // Offset: 0xc0
	bool 3dc9c8e041; // Offset: 0xc0
	Skeleton* CurrentSkeleton; // Offset: 0x118
	MulticastInlineDelegateProperty OnMontageStarted; // Offset: 0x150
	674d0a3af0 1986c1ad26; // Offset: 0x170
	TArray<AnimNotifyEvent> ActiveAnimNotifyState; // Offset: 0x240
	MulticastInlineDelegateProperty OnMontageBlendingOut; // Offset: 0x2a0
	MulticastInlineDelegateProperty OnMontageEnded; // Offset: 0x2f0
// ============================= //
Struct 674d0a3af0
	TArray<16750eba46> AnimNotifies; // Offset: 0x10
	MapProperty 89887d1e16; // Offset: 0x20
// ============================= //
Struct 16750eba46
	Object* 97aebfa4d0; // Offset: 0x8
// ============================= //
Struct AnimNotifyEvent.AnimLinkableElement
	float DisplayTime; // Offset: 0x30
	float a4d8fbe2f9; // Offset: 0x34
	float EndTriggerTimeOffset; // Offset: 0x38
	float TriggerWeightThreshold; // Offset: 0x3c
	FName NotifyName; // Offset: 0x40
	AnimNotify* Notify; // Offset: 0x48
	AnimNotifyState* NotifyStateClass; // Offset: 0x50
	float Duration; // Offset: 0x58
	AnimLinkableElement EndLink; // Offset: 0x60
	bool 1b5d158dfa; // Offset: 0x90
	TEnumAsByte<EMontageNotifyTickType> MontageTickType; // Offset: 0x91
	float NotifyTriggerChance; // Offset: 0x94
	TEnumAsByte<ENotifyFilterType> NotifyFilterType; // Offset: 0x98
	int NotifyFilterLOD; // Offset: 0x9c
	bool bTriggerOnDedicatedServer; // Offset: 0xa0
	bool bTriggerOnFollower; // Offset: 0xa1
	int TrackIndex; // Offset: 0xa4
// ============================= //
Struct AnimLinkableElement
	AnimMontage* 215b2707f9; // Offset: 0x8
	int SlotIndex; // Offset: 0x10
	int SegmentIndex; // Offset: 0x14
	TEnumAsByte<EAnimLinkMethod> f2de125869; // Offset: 0x18
	TEnumAsByte<EAnimLinkMethod> 67933cd52c; // Offset: 0x19
	float 13f0603bde; // Offset: 0x1c
	float SegmentLength; // Offset: 0x20
	float 8632744978; // Offset: 0x24
	AnimSequenceBase* 1132124984; // Offset: 0x28
// ============================= //
Class AnimNotify.Object
// ============================= //
Class AnimNotifyState.Object
// ============================= //
Enum EMontageNotifyTickType
	EMontageNotifyTickType::Queued = 0,
	EMontageNotifyTickType::BranchingPoint = 1,
	EMontageNotifyTickType::EMontageNotifyTickType_MAX = 2;
// ============================= //
Enum ENotifyFilterType
	ENotifyFilterType::NoFiltering = 0,
	ENotifyFilterType::LOD = 1,
	ENotifyFilterType::ENotifyFilterType_MAX = 2;
// ============================= //
Class AnimMontage.3d123a622f.AnimSequenceBase.AnimationAsset.Object
	8260300b59 0c78c7a359; // Offset: 0xf0
	TArray<00d6a5bb35> a3cb97bf09; // Offset: 0x110
	4a3500145d 4599957e2a; // Offset: 0x120
	4a3500145d cbb0793029; // Offset: 0x158
	FName d1b725d850; // Offset: 0x188
	TArray<56acc37980> 6172499459; // Offset: 0x190
	TArray<int> ec9c4c4195; // Offset: 0x1a0
	TArray<CompositeSection> a7f019a823; // Offset: 0x1b8
	FName SyncGroup; // Offset: 0x1c8
	86985cf582 86985cf582; // Offset: 0x1d0
	TArray<BranchingPoint> BranchingPoints; // Offset: 0x200
// ============================= //
Class 3d123a622f.AnimSequenceBase.AnimationAsset.Object
// ============================= //
Class AnimSequenceBase.AnimationAsset.Object
	TArray<AnimNotifyEvent> Notifies; // Offset: 0xc0
	bccda4b976 82f6cdc779; // Offset: 0xd0
	float SequenceLength; // Offset: 0xe4
// ============================= //
Struct 8260300b59
	TArray<f3a67b78bd> AuthoredSyncMarkers; // Offset: 0x0
// ============================= //
Struct f3a67b78bd
	FName MarkerName; // Offset: 0x0
	float Time; // Offset: 0x8
// ============================= //
Struct 00d6a5bb35
	FName SlotName; // Offset: 0x0
	AnimTrack AnimTrack; // Offset: 0x8
// ============================= //
Struct AnimTrack
	TArray<AnimSegment> 5a35767350; // Offset: 0x0
// ============================= //
Struct AnimSegment
	AnimSequenceBase* AnimReference; // Offset: 0x0
	float StartPos; // Offset: 0x8
	float AnimStartTime; // Offset: 0xc
	float AnimEndTime; // Offset: 0x10
	float AnimPlayRate; // Offset: 0x14
	int LoopingCount; // Offset: 0x18
// ============================= //
Struct bccda4b976
	TArray<FloatCurve> 1cfa8d3a9e; // Offset: 0x0
// ============================= //
Struct FloatCurve.AnimCurveBase
	RichCurve FloatCurve; // Offset: 0x18
// ============================= //
Struct AnimCurveBase
	FName LastObservedName; // Offset: 0x0
	SmartName Name; // Offset: 0x8
	int ae9180414a; // Offset: 0x14
// ============================= //
Struct SmartName
	FName DisplayName; // Offset: 0x0
// ============================= //
Struct 4a3500145d
	CurveFloat* CustomCurve; // Offset: 0x0
	float BlendTime; // Offset: 0x8
	TEnumAsByte<EAlphaBlendOption> BlendOption; // Offset: 0x24
// ============================= //
Enum EAlphaBlendOption
	EAlphaBlendOption::Linear = 0,
	EAlphaBlendOption::Cubic = 1,
	EAlphaBlendOption::HermiteCubic = 2,
	EAlphaBlendOption::Sinusoidal = 3,
	EAlphaBlendOption::QuadraticInOut = 4,
	EAlphaBlendOption::CubicInOut = 5,
	EAlphaBlendOption::QuarticInOut = 6,
	EAlphaBlendOption::QuinticInOut = 7,
	EAlphaBlendOption::CircularIn = 8,
	EAlphaBlendOption::CircularOut = 9,
	EAlphaBlendOption::CircularInOut = 10,
	EAlphaBlendOption::ExpIn = 11,
	EAlphaBlendOption::ExpOut = 12,
	EAlphaBlendOption::ExpInOut = 13,
	EAlphaBlendOption::Custom = 14,
	EAlphaBlendOption::EAlphaBlendOption_MAX = 15;
// ============================= //
Struct 56acc37980
	int fa8125567a; // Offset: 0x0
	float 4517ccc4b8; // Offset: 0x4
	TEnumAsByte<EAnimNotifyEventType> NotifyEventType; // Offset: 0x8
// ============================= //
Enum EAnimNotifyEventType
	EAnimNotifyEventType::Begin = 0,
	EAnimNotifyEventType::End = 1,
	EAnimNotifyEventType::EAnimNotifyEventType_MAX = 2;
// ============================= //
Struct CompositeSection.AnimLinkableElement
	FName SectionName; // Offset: 0x30
	float StartTime; // Offset: 0x38
	FName NextSectionName; // Offset: 0x3c
	TArray<fe8e67460b*> MetaData; // Offset: 0x48
// ============================= //
Struct 86985cf582
	float 770fbeff4d; // Offset: 0x0
	float 5fc0d77529; // Offset: 0x4
	TArray<9470f625f9> Markers; // Offset: 0x8
	float aab53c54f5; // Offset: 0x18
// ============================= //
Struct 9470f625f9
	float Time; // Offset: 0x0
	float Alpha; // Offset: 0xc
// ============================= //
Struct BranchingPoint.AnimLinkableElement
	FName EventName; // Offset: 0x30
	float DisplayTime; // Offset: 0x38
	float a4d8fbe2f9; // Offset: 0x3c
// ============================= //
Enum EAnimLinkMethod
	EAnimLinkMethod::Absolute = 0,
	EAnimLinkMethod::Relative = 1,
	EAnimLinkMethod::Proportional = 2,
	EAnimLinkMethod::EAnimLinkMethod_MAX = 3;
// ============================= //
Enum EClothMassMode
	EClothMassMode::UniformMass = 0,
	EClothMassMode::TotalMass = 1,
	EClothMassMode::Density = 2,
	EClothMassMode::MaxClothMassMode = 3,
	EClothMassMode::EClothMassMode_MAX = 4;
// ============================= //
Class 8b15d9c47d.Object
// ============================= //
Enum EAnimationMode
	EAnimationMode::AnimationBlueprint = 0,
	EAnimationMode::AnimationSingleNode = 1,
	EAnimationMode::AnimationCustomMode = 2,
	EAnimationMode::EAnimationMode_MAX = 3;
// ============================= //
Class PhysicsAsset.Object
	TArray<PhysicsConstraintTemplate*> 299542a4b8; // Offset: 0x110
	TArray<BodySetup*> BodySetup; // Offset: 0x120
	bool 9d41536197; // Offset: 0x130
	1818d3a16a* 1818d3a16a; // Offset: 0x138
	TArray<int> 74f74ec5d9; // Offset: 0x140
	TArray<SkeletalBodySetup*> bcbd6778d9; // Offset: 0x150
	SolverIterations SolverIterations; // Offset: 0x160
// ============================= //
Class PhysicsConstraintTemplate.Object
	TArray<1f0d7aac18> d1f1d4c96d; // Offset: 0x68
	ConstraintInstance DefaultInstance; // Offset: 0x78
	81c1cebd68 DefaultProfile; // Offset: 0x238
// ============================= //
Struct 1f0d7aac18
	81c1cebd68 58205692b2; // Offset: 0x0
	FName ProfileName; // Offset: 0x10c
// ============================= //
Struct 81c1cebd68
	float ProjectionLinearTolerance; // Offset: 0x0
	float ProjectionAngularTolerance; // Offset: 0x4
	float cb41d11e57; // Offset: 0x8
	float 28bd1666fb; // Offset: 0xc
	float b0d15e86ed; // Offset: 0x10
	float df2b7239e8; // Offset: 0x14
	432503f418 LinearLimit; // Offset: 0x18
	b14158369b 21b23296b2; // Offset: 0x34
	ea8dfd7980 TwistLimit; // Offset: 0x54
	c88a14bda2 61345d1442; // Offset: 0x70
	21a06b1fd8 bf5254d486; // Offset: 0xbc
	bool 6615d47141; // Offset: 0x108
	bool b77e29b3de; // Offset: 0x108
	bool bEnableProjection; // Offset: 0x108
	bool 8ddfc6b159; // Offset: 0x108
	bool bAngularBreakable; // Offset: 0x108
	bool bLinearBreakable; // Offset: 0x108
// ============================= //
Struct 432503f418.12a4a3b72d
	float Limit; // Offset: 0x14
	TEnumAsByte<ELinearConstraintMotion> 70eaa6abf6; // Offset: 0x18
	TEnumAsByte<ELinearConstraintMotion> ee785c1b2c; // Offset: 0x19
	TEnumAsByte<ELinearConstraintMotion> 78be5d635f; // Offset: 0x1a
// ============================= //
Struct 12a4a3b72d
	float Stiffness; // Offset: 0x0
	float Damping; // Offset: 0x4
	float Restitution; // Offset: 0x8
	float ContactDistance; // Offset: 0xc
	bool bSoftConstraint; // Offset: 0x10
// ============================= //
Enum ELinearConstraintMotion
	LCM_Free = 0,
	LCM_Limited = 1,
	LCM_Locked = 2,
	LCM_MAX = 3;
// ============================= //
Struct b14158369b.12a4a3b72d
	float 0c802b4d75; // Offset: 0x14
	float ace46bd142; // Offset: 0x18
	TEnumAsByte<EAngularConstraintMotion> 01a8065db1; // Offset: 0x1c
	TEnumAsByte<EAngularConstraintMotion> 07635e2b13; // Offset: 0x1d
// ============================= //
Enum EAngularConstraintMotion
	ACM_Free = 0,
	ACM_Limited = 1,
	ACM_Locked = 2,
	ACM_MAX = 3;
// ============================= //
Struct ea8dfd7980.12a4a3b72d
	float f3d5c787ce; // Offset: 0x14
	TEnumAsByte<EAngularConstraintMotion> af20c05de8; // Offset: 0x18
// ============================= //
Struct c88a14bda2
	Vector PositionTarget; // Offset: 0x0
	Vector 89cc777e1a; // Offset: 0xc
	e609eb9e79 4f55a9a6e8; // Offset: 0x18
	e609eb9e79 ca96a9c205; // Offset: 0x28
	e609eb9e79 951dbf3a2d; // Offset: 0x38
	bool b7c8e9e958; // Offset: 0x48
// ============================= //
Struct e609eb9e79
	float Stiffness; // Offset: 0x0
	float Damping; // Offset: 0x4
	float MaxForce; // Offset: 0x8
	bool b7c8e9e958; // Offset: 0xc
	bool a2378112f6; // Offset: 0xc
// ============================= //
Struct 21a06b1fd8
	e609eb9e79 3f6791100b; // Offset: 0x0
	e609eb9e79 15e5185829; // Offset: 0x10
	e609eb9e79 SlerpDrive; // Offset: 0x20
	Rotator 4e606b055c; // Offset: 0x30
	Vector 6759f2bc65; // Offset: 0x3c
	TEnumAsByte<EAngularDriveMode> a75ad3c0d2; // Offset: 0x48
// ============================= //
Enum EAngularDriveMode
	EAngularDriveMode::SLERP = 0,
	EAngularDriveMode::TwistAndSwing = 1,
	EAngularDriveMode::EAngularDriveMode_MAX = 2;
// ============================= //
Struct ConstraintInstance.0ed6f66b13
	FName d582eadc97; // Offset: 0x18
	FName 35bcfb47cf; // Offset: 0x20
	FName 4e05f4e4ee; // Offset: 0x28
	Vector cf725c96e6; // Offset: 0x30
	Vector a7215f70b2; // Offset: 0x3c
	Vector 770ac30c2c; // Offset: 0x48
	Vector Pos2; // Offset: 0x54
	Vector ac4a5c01f7; // Offset: 0x60
	Vector 672eca7ef2; // Offset: 0x6c
	Rotator f7b675c7a3; // Offset: 0x78
	bool ceb939b1b7; // Offset: 0x84
	81c1cebd68 13efed9ed0; // Offset: 0x8c
// ============================= //
Struct 0ed6f66b13
// ============================= //
Class 1818d3a16a.Object
// ============================= //
Class SkeletalBodySetup.BodySetup.a9b258c83a.Object
	TArray<PhysicalAnimationProfile> eee84e80ec; // Offset: 0x320
// ============================= //
Struct PhysicalAnimationProfile
	FName ProfileName; // Offset: 0x0
	eee84e80ec eee84e80ec; // Offset: 0x8
// ============================= //
Struct eee84e80ec
	FName 7f4d84802a; // Offset: 0x0
	bool bIsLocalSimulation; // Offset: 0x8
	float OrientationStrength; // Offset: 0xc
	float AngularVelocityStrength; // Offset: 0x10
	float PositionStrength; // Offset: 0x14
	float VelocityStrength; // Offset: 0x18
	float MaxLinearForce; // Offset: 0x1c
	float MaxAngularForce; // Offset: 0x20
// ============================= //
Struct SolverIterations
	float FixedTimeStep; // Offset: 0x0
	int SolverIterations; // Offset: 0x4
	int JointIterations; // Offset: 0x8
	int CollisionIterations; // Offset: 0xc
	int SolverPushOutIterations; // Offset: 0x10
	int JointPushOutIterations; // Offset: 0x14
	int CollisionPushOutIterations; // Offset: 0x18
// ============================= //
Class SkeletalMesh.638112bfc1.Object
	BodySetup* BodySetup; // Offset: 0xc0
	PhysicsAsset* ShadowPhysicsAsset; // Offset: 0xc8
	TArray<SkeletalMeshLODInfo> LODInfo; // Offset: 0xe0
	TArray<AnimInstance*> 09c99c4c4c; // Offset: 0xf0
	AnimInstance* PostProcessAnimBlueprint; // Offset: 0x100
	TArray<MorphTarget*> MorphTargets; // Offset: 0x108
	BoxSphereBounds 0b51db210d; // Offset: 0x118
	float CullingScreenSize; // Offset: 0x198
	TArray<f2cb64951e> Materials; // Offset: 0x1a0
	float e4113fd5ea; // Offset: 0x1b8
	bool bUseFullPrecisionUVs; // Offset: 0x1bc
	bool bUseHighPrecisionTangentBasis; // Offset: 0x1bc
	bool 07499374b1; // Offset: 0x1bc
	bool b4e799b528; // Offset: 0x1bc
	bool bEnablePerPolyCollision; // Offset: 0x1bc
	BoxSphereBounds dcddaeee62; // Offset: 0x1c0
	PhysicsAsset* PhysicsAsset; // Offset: 0x1e0
	68e1119bc0 SamplingInfo; // Offset: 0x1e8
	Vector NegativeBoundsExtension; // Offset: 0x218
	bool bEnableDistanceCulling; // Offset: 0x224
	TArray<734fa27c0b*> MeshClothingAssets; // Offset: 0x228
	PerPlatformBool DisableBelowMinLodStripping; // Offset: 0x238
	Vector PositiveBoundsExtension; // Offset: 0x23c
	bool bUseScreenSizeModifier; // Offset: 0x248
	TArray<625c38b6ec*> NodeMappingData; // Offset: 0x250
	Skeleton* Skeleton; // Offset: 0x260
	PerPlatformInt MinLOD; // Offset: 0x268
	TArray<SkeletalMeshSocket*> Sockets; // Offset: 0x270
	TArray<SkinWeightProfileInfo> SkinWeightProfiles; // Offset: 0x290
	TArray<2fadb2f8c6> fca938a5e0; // Offset: 0x450
	TArray<AssetUserData*> AssetUserData; // Offset: 0x460
// ============================= //
Struct SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize; // Offset: 0x0
	float dbd9b145d1; // Offset: 0x4
	TArray<int> 50abbd010e; // Offset: 0x8
	SkeletalMeshBuildSettings BuildSettings; // Offset: 0x18
	SkeletalMeshOptimizationSettings ReductionSettings; // Offset: 0x2c
	TArray<BoneReference> cb7952a064; // Offset: 0x68
	TArray<BoneReference> 70021d8db3; // Offset: 0x78
	float d687040cff; // Offset: 0x88
	AnimSequence* BakePose; // Offset: 0x90
	AnimSequence* b37e99970e; // Offset: 0x98
	FString SourceImportFilename; // Offset: 0xa0
	TEnumAsByte<ESkinCacheUsage> SkinCacheUsage; // Offset: 0xb0
	bool 07499374b1; // Offset: 0xb1
	bool 4a4f44c07f; // Offset: 0xb1
	bool bAllowCPUAccess; // Offset: 0xb1
	bool bSupportUniformlyDistributedSampling; // Offset: 0xb1
// ============================= //
Struct SkeletalMeshBuildSettings
	bool bRecomputeNormals; // Offset: 0x0
	bool bRecomputeTangents; // Offset: 0x0
	bool bUseMikkTSpace; // Offset: 0x0
	bool bComputeWeightedNormals; // Offset: 0x0
	bool bRemoveDegenerates; // Offset: 0x0
	bool bUseHighPrecisionTangentBasis; // Offset: 0x0
	bool bUseFullPrecisionUVs; // Offset: 0x0
	bool bBuildAdjacencyBuffer; // Offset: 0x0
	float ThresholdPosition; // Offset: 0x4
	float ThresholdTangentNormal; // Offset: 0x8
	float ThresholdUV; // Offset: 0xc
	float MorphThresholdPosition; // Offset: 0x10
// ============================= //
Struct SkeletalMeshOptimizationSettings
	TEnumAsByte<SkeletalMeshTerminationCriterion> TerminationCriterion; // Offset: 0x0
	float NumOfTrianglesPercentage; // Offset: 0x4
	float a5ccb37eff; // Offset: 0x8
	UInt32Property 7e1cd41330; // Offset: 0xc
	UInt32Property 3d43c5a1f1; // Offset: 0x10
	float 7e803c0576; // Offset: 0x14
	TEnumAsByte<SkeletalMeshOptimizationType> ReductionMethod; // Offset: 0x18
	TEnumAsByte<SkeletalMeshOptimizationImportance> SilhouetteImportance; // Offset: 0x19
	TEnumAsByte<SkeletalMeshOptimizationImportance> TextureImportance; // Offset: 0x1a
	TEnumAsByte<SkeletalMeshOptimizationImportance> ShadingImportance; // Offset: 0x1b
	TEnumAsByte<SkeletalMeshOptimizationImportance> SkinningImportance; // Offset: 0x1c
	bool 2c0653febb; // Offset: 0x1d
	bool bRecalcNormals; // Offset: 0x1d
	float WeldingThreshold; // Offset: 0x20
	float NormalsThreshold; // Offset: 0x24
	int MaxBonesPerVertex; // Offset: 0x28
	bool f9ad261cc5; // Offset: 0x2c
	float VolumeImportance; // Offset: 0x30
	bool c42eb50cd2; // Offset: 0x34
	bool dbe6bffe8a; // Offset: 0x34
	int BaseLOD; // Offset: 0x38
// ============================= //
Enum SkeletalMeshTerminationCriterion
	SMTC_NumOfTriangles = 0,
	SMTC_NumOfVerts = 1,
	SMTC_TriangleOrVert = 2,
	SMTC_AbsNumOfTriangles = 3,
	SMTC_AbsNumOfVerts = 4,
	SMTC_AbsTriangleOrVert = 5,
	SMTC_MAX = 6;
// ============================= //
Enum SkeletalMeshOptimizationType
	SMOT_NumOfTriangles = 0,
	SMOT_MaxDeviation = 1,
	SMOT_TriangleOrDeviation = 2,
	SMOT_MAX = 3;
// ============================= //
Enum SkeletalMeshOptimizationImportance
	SMOI_Off = 0,
	SMOI_Lowest = 1,
	SMOI_Low = 2,
	SMOI_Normal = 3,
	SMOI_High = 4,
	SMOI_Highest = 5,
	SMOI_MAX = 6;
// ============================= //
Class AnimSequence.AnimSequenceBase.AnimationAsset.Object
	TEnumAsByte<EAnimInterpolationType> Interpolation; // Offset: 0xea
	TArray<e068c609ef> 95b1702de9; // Offset: 0xf0
	TArray<f3a67b78bd> AuthoredSyncMarkers; // Offset: 0x108
	4628bd8da0* CurveCompressionSettings; // Offset: 0x120
	8b94c4c44e* BoneCompressionSettings; // Offset: 0x128
	FName RetargetSource; // Offset: 0x154
	AnimSequence* b5702131f2; // Offset: 0x160
	TArray<fc31903f63> 5474318238; // Offset: 0x1e0
// ============================= //
Enum EAnimInterpolationType
	EAnimInterpolationType::Linear = 0,
	EAnimInterpolationType::Step = 1,
	EAnimInterpolationType::EAnimInterpolationType_MAX = 2;
// ============================= //
Struct e068c609ef
	int 520feaaba5; // Offset: 0x0
	TArray<8185db71b0> StringAttributes; // Offset: 0x8
	TArray<61ccbc2565> 36513aae56; // Offset: 0x18
	TArray<8925646f5d> FloatAttributes; // Offset: 0x28
// ============================= //
Struct 8185db71b0
	FName AttributeName; // Offset: 0x0
	StringCurve StringCurve; // Offset: 0x8
// ============================= //
Struct StringCurve.34f697d219
	FString DefaultValue; // Offset: 0x68
	TArray<cd3247efd0> Keys; // Offset: 0x78
// ============================= //
Struct cd3247efd0
	float Time; // Offset: 0x0
	FString Value; // Offset: 0x8
// ============================= //
Struct 61ccbc2565
	FName AttributeName; // Offset: 0x0
	IntegralCurve 259603f2c8; // Offset: 0x8
// ============================= //
Struct IntegralCurve.34f697d219
	TArray<d8e6a23e62> Keys; // Offset: 0x68
	int DefaultValue; // Offset: 0x78
	bool b375ac668e; // Offset: 0x7c
// ============================= //
Struct d8e6a23e62
	float Time; // Offset: 0x0
	int Value; // Offset: 0x4
// ============================= //
Struct 8925646f5d
	FName AttributeName; // Offset: 0x0
	SimpleCurve FloatCurve; // Offset: 0x8
// ============================= //
Struct SimpleCurve.eea7c66749.34f697d219
	TEnumAsByte<ERichCurveInterpMode> InterpMode; // Offset: 0x6e
	TArray<344358190b> Keys; // Offset: 0x70
// ============================= //
Struct 344358190b
	float Time; // Offset: 0x0
	float Value; // Offset: 0x4
// ============================= //
Class 4628bd8da0.Object
	caf4f544b4* Codec; // Offset: 0x68
// ============================= //
Class caf4f544b4.Object
// ============================= //
Class 8b94c4c44e.Object
	TArray<fadfb46608*> Codecs; // Offset: 0x68
// ============================= //
Class fadfb46608.Object
// ============================= //
Struct fc31903f63
	int 520feaaba5; // Offset: 0x0
// ============================= //
Class MorphTarget.Object
	SkeletalMesh* 1ecc4d9043; // Offset: 0x68
// ============================= //
Struct BoxSphereBounds
	Vector Origin; // Offset: 0x0
	Vector BoxExtent; // Offset: 0xc
	float SphereRadius; // Offset: 0x18
// ============================= //
Struct f2cb64951e
	MaterialInterface* MaterialInterface; // Offset: 0x0
	FName MaterialSlotName; // Offset: 0x8
	be45415f38 UVChannelData; // Offset: 0x10
// ============================= //
Struct 68e1119bc0
	TArray<96c762f4b9> Regions; // Offset: 0x0
	80392e455e fe621a28ba; // Offset: 0x10
// ============================= //
Struct 96c762f4b9
	FName Name; // Offset: 0x0
	int LODIndex; // Offset: 0x8
	bool bSupportUniformlyDistributedSampling; // Offset: 0xc
	TArray<SkeletalMeshSamplingRegionMaterialFilter> 00cde12fa7; // Offset: 0x10
	TArray<SkeletalMeshSamplingRegionBoneFilter> e8d4d8dac7; // Offset: 0x20
// ============================= //
Struct SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName; // Offset: 0x0
// ============================= //
Struct SkeletalMeshSamplingRegionBoneFilter
	FName BoneName; // Offset: 0x0
	bool 2917680676; // Offset: 0x8
	bool bApplyToChildren; // Offset: 0x8
// ============================= //
Struct 80392e455e
	TArray<320551ce62> 7b97082d51; // Offset: 0x0
	TArray<0f9421a794> 796a170fd9; // Offset: 0x10
// ============================= //
Struct 320551ce62
// ============================= //
Struct 0f9421a794
// ============================= //
Class 734fa27c0b.Object
// ============================= //
Struct PerPlatformBool
	bool Default; // Offset: 0x0
// ============================= //
Class 625c38b6ec.Object
	Object* SourceAsset; // Offset: 0x68
	Object* e1b01e53fa; // Offset: 0xa8
	MapProperty 7136fad798; // Offset: 0xe8
	MapProperty 9998f8d42f; // Offset: 0x138
	MapProperty b56bab8300; // Offset: 0x188
// ============================= //
Struct SkinWeightProfileInfo
	FName Name; // Offset: 0x0
	PerPlatformBool DefaultProfile; // Offset: 0x8
	PerPlatformInt 59bb16ec5d; // Offset: 0xc
// ============================= //
Struct 2fadb2f8c6
	int SourceIndex; // Offset: 0x0
	TEnumAsByte<EAxis> ad04d39601; // Offset: 0x4
// ============================= //
Enum EAxis
	EAxis::None = 0,
	EAxis::X = 1,
	EAxis::Y = 2,
	EAxis::Z = 3,
	EAxis::EAxis_MAX = 4;
// ============================= //
Struct VertexOffsetUsage
	int Usage; // Offset: 0x0
// ============================= //
Struct 54ec12850a
	TArray<uint8_t> def7bc0df3; // Offset: 0x0
// ============================= //
Struct Matrix
	Plane XPlane; // Offset: 0x0
	Plane YPlane; // Offset: 0x10
	Plane ZPlane; // Offset: 0x20
	Plane WPlane; // Offset: 0x30
// ============================= //
Struct Plane.Vector
	float W; // Offset: 0xc
// ============================= //
Enum EVisibilityBasedAnimTickOption
	EVisibilityBasedAnimTickOption::AlwaysTickPoseAndRefreshBones = 0,
	EVisibilityBasedAnimTickOption::AlwaysTickPose = 1,
	EVisibilityBasedAnimTickOption::AlwaysTickPoseAndTickAnimNotify = 2,
	EVisibilityBasedAnimTickOption::OnlyTickMontagesWhenNotRendered = 3,
	EVisibilityBasedAnimTickOption::OnlyTickPoseWhenRendered = 4,
	EVisibilityBasedAnimTickOption::EVisibilityBasedAnimTickOption_MAX = 5;
// ============================= //
Struct b9f822b5e4
// ============================= //
Struct ba83a48ab8
	FName Name; // Offset: 0x0
	MaterialInterface* Material; // Offset: 0x8
// ============================= //
Struct 6f37549947
	TArray<uint8_t> 99337af868; // Offset: 0x0
// ============================= //
Class ParticleEmitter.Object
	bool bRenderThermalScope; // Offset: 0x74
	bool 88f7b97271; // Offset: 0x90
	bool 9b99c2603d; // Offset: 0x90
	bool 6ff6c5043c; // Offset: 0x90
	bool eac3a9b3e6; // Offset: 0x90
	bool 045e96b3c0; // Offset: 0x90
	bool 594844fdb2; // Offset: 0x91
	FName EmitterName; // Offset: 0x94
	TEnumAsByte<EParticleSignificanceLevel> 29028b4138; // Offset: 0x130
	TArray<ParticleLODLevel*> LODLevels; // Offset: 0x138
	int 92fe83a4dc; // Offset: 0x148
// ============================= //
Class ParticleLODLevel.Object
	TArray<ParticleModule*> 7bdf752e5f; // Offset: 0x68
	bool bEnabled; // Offset: 0x78
	ParticleModuleRequired* ef7c1f203f; // Offset: 0x80
	TArray<ParticleModule*> 89b5ef6e4c; // Offset: 0x88
	ParticleModuleEventGenerator* EventGenerator; // Offset: 0x98
	ParticleModuleTypeDataBase* a9d6065166; // Offset: 0xa0
	ParticleModuleSpawn* 8f1e0de30a; // Offset: 0xa8
	TArray<ParticleModule*> Modules; // Offset: 0xb8
	TArray<ParticleModuleEventReceiverBase*> 425cde81ce; // Offset: 0xc8
	TArray<3e1294eab1*> ff53e9d56c; // Offset: 0xd8
	bool 9b99c2603d; // Offset: 0xec
	TArray<ParticleModuleOrbit*> b616b8e8b3; // Offset: 0xf0
// ============================= //
Class ParticleModule.Object
	bool 9ff9138528; // Offset: 0x68
	bool f9a6aefefc; // Offset: 0x68
	bool 4f97e3e6c3; // Offset: 0x68
	bool 3406475ab9; // Offset: 0x68
	bool 61ff315513; // Offset: 0x68
	bool 9b3eb97b10; // Offset: 0x68
	bool 8e0d6223a3; // Offset: 0x68
	bool bEnabled; // Offset: 0x68
	bool b58590fc3d; // Offset: 0x69
	bool 473ce4ba83; // Offset: 0x69
	bool 9467eb798f; // Offset: 0x69
	bool 73192fecd6; // Offset: 0x69
// ============================= //
Class ParticleModuleRequired.ParticleModule.Object
	Texture2D* CutoutTexture; // Offset: 0x80
	bool 4586555cec; // Offset: 0x8a
	bool 9f5565636c; // Offset: 0x8a
	bool 536fed8d26; // Offset: 0x8a
	bool 4f4c23ff53; // Offset: 0x90
	bool bRemoveHMDRoll; // Offset: 0x90
	bool 1cf7816b51; // Offset: 0x90
	f2b2926d4a SpawnRate; // Offset: 0x98
	bool d315770410; // Offset: 0xe4
	bool 3f689272bf; // Offset: 0xf4
	bool 9960847fbb; // Offset: 0xf4
	bool 153c82d361; // Offset: 0x108
	bool 4696f4eb8e; // Offset: 0x108
	bool 69b7bb5139; // Offset: 0x111
	TArray<a7337bd043> e749729115; // Offset: 0x140
	bool 9969a2af7a; // Offset: 0x160
	MaterialInterface* Material; // Offset: 0x170
	TEnumAsByte<EParticleUVFlipMode> b010023802; // Offset: 0x178
	TArray<FName> 2bc28957d0; // Offset: 0x180
// ============================= //
Struct f2b2926d4a.9dcfe4833e
	float MinValue; // Offset: 0x20
	float MaxValue; // Offset: 0x24
	6d4d44dd71* Distribution; // Offset: 0x28
// ============================= //
Struct 9dcfe4833e
	DistributionLookupTable Table; // Offset: 0x0
// ============================= //
Struct DistributionLookupTable
	float TimeScale; // Offset: 0x0
	float d5260c8842; // Offset: 0x4
	TArray<float> Values; // Offset: 0x8
	uint8_t Op; // Offset: 0x18
	uint8_t EntryCount; // Offset: 0x19
	uint8_t a54cd6f13f; // Offset: 0x1a
	uint8_t 06d51e4823; // Offset: 0x1b
	uint8_t 48c2e09cdb; // Offset: 0x1c
// ============================= //
Class 6d4d44dd71.Distribution.Object
	bool 8af723abbe; // Offset: 0x70
	bool f6ad88f094; // Offset: 0x70
// ============================= //
Class Distribution.Object
// ============================= //
Struct a7337bd043
	int Count; // Offset: 0x0
	int 0036bc017b; // Offset: 0x4
	float Time; // Offset: 0x8
// ============================= //
Enum EParticleUVFlipMode
	EParticleUVFlipMode::None = 0,
	EParticleUVFlipMode::FlipUV = 1,
	EParticleUVFlipMode::FlipUOnly = 2,
	EParticleUVFlipMode::FlipVOnly = 3,
	EParticleUVFlipMode::RandomFlipUV = 4,
	EParticleUVFlipMode::RandomFlipUOnly = 5,
	EParticleUVFlipMode::RandomFlipVOnly = 6,
	EParticleUVFlipMode::RandomFlipUVIndependent = 7,
	EParticleUVFlipMode::EParticleUVFlipMode_MAX = 8;
// ============================= //
Class ParticleModuleEventGenerator.727f40dd52.ParticleModule.Object
	TArray<7f2a2b99ec> Events; // Offset: 0x70
// ============================= //
Class 727f40dd52.ParticleModule.Object
// ============================= //
Struct 7f2a2b99ec
	TEnumAsByte<EParticleEventType> Type; // Offset: 0x0
	int Frequency; // Offset: 0x4
	int f0e7ba6086; // Offset: 0x8
	bool 30bd7938d1; // Offset: 0xc
	bool bfd94e94b2; // Offset: 0xc
	bool 60609fc5d5; // Offset: 0xc
	bool 8a478f008d; // Offset: 0xc
	FName 6e940d25be; // Offset: 0x10
	TArray<e846b2232f*> e9f10e5eb6; // Offset: 0x18
// ============================= //
Enum EParticleEventType
	EPET_Any = 0,
	EPET_Spawn = 1,
	EPET_Death = 2,
	EPET_Collision = 3,
	EPET_Burst = 4,
	EPET_Blueprint = 5,
	EPET_MAX = 6;
// ============================= //
Class e846b2232f.Object
// ============================= //
Class ParticleModuleTypeDataBase.ParticleModule.Object
// ============================= //
Class ParticleModuleSpawn.3e1294eab1.ParticleModule.Object
	TArray<a7337bd043> e749729115; // Offset: 0x70
	f2b2926d4a Rate; // Offset: 0x80
	f2b2926d4a 9a9395a7e8; // Offset: 0xb0
	f2b2926d4a RateScale; // Offset: 0xe0
	bool bApplyGlobalSpawnRateScale; // Offset: 0x111
// ============================= //
Class 3e1294eab1.ParticleModule.Object
	bool 2a4b449964; // Offset: 0x6b
	bool 0f61f67a6b; // Offset: 0x6b
// ============================= //
Class ParticleModuleEventReceiverBase.727f40dd52.ParticleModule.Object
	FName EventName; // Offset: 0x6c
// ============================= //
Class ParticleModuleOrbit.7775775905.ParticleModule.Object
	72d535e163 7b14af314b; // Offset: 0x6c
	72d535e163 2f7802066d; // Offset: 0x70
	RawDistributionVector RotationAmount; // Offset: 0x78
	RawDistributionVector OffsetAmount; // Offset: 0xc8
	72d535e163 92ee6fe97e; // Offset: 0x110
	RawDistributionVector RotationRateAmount; // Offset: 0x118
// ============================= //
Class 7775775905.ParticleModule.Object
	bool 6c7531337e; // Offset: 0x6b
// ============================= //
Struct 72d535e163
	bool 09147fd204; // Offset: 0x0
	bool 0b82b28aca; // Offset: 0x0
	bool 6c7531337e; // Offset: 0x0
// ============================= //
Struct RawDistributionVector.9dcfe4833e
	float MinValue; // Offset: 0x20
	float MaxValue; // Offset: 0x24
	Vector 95efc42607; // Offset: 0x28
	Vector 524cc3b973; // Offset: 0x34
	2b90e2338e* Distribution; // Offset: 0x40
// ============================= //
Class 2b90e2338e.Distribution.Object
	bool 8af723abbe; // Offset: 0x70
	bool bIsDirty; // Offset: 0x70
	bool f6ad88f094; // Offset: 0x70
// ============================= //
Function RunAssetExportTasks
	TArray<cbd8b51b00*> ExportTasks; // Offset: 0x0
	bool ReturnValue; // Offset: 0x10
// ============================= //
Class cbd8b51b00.Object
	bool bSelected; // Offset: 0x68
	bool bAutomated; // Offset: 0x69
	bool bWriteEmptyFiles; // Offset: 0x6a
	bool bPrompt; // Offset: 0x6b
	TArray<FString> Errors; // Offset: 0x70
	Object* Options; // Offset: 0x80
	TArray<Object*> IgnoreObjectList; // Offset: 0x88
	bool bUseFileArchive; // Offset: 0x98
	Exporter* Exporter; // Offset: 0xa0
	FString Filename; // Offset: 0xa8
	bool bReplaceIdentical; // Offset: 0xb8
	Object* Object; // Offset: 0xc0
// ============================= //
Class Exporter.Object
	cbd8b51b00* ExportTask; // Offset: 0x68
	TArray<FString> FormatDescription; // Offset: 0x80
	Object* SupportedClass; // Offset: 0x90
	bool bText; // Offset: 0x98
	bool 7cf68c63cd; // Offset: 0x98
	bool 0163a760c1; // Offset: 0x98
	Object* ExportRootScope; // Offset: 0xa0
	TArray<FString> FormatExtension; // Offset: 0xa8
// ============================= //
Class 4337f6934c.8e247eeffb.Object
	MapProperty 55f8dc7cce; // Offset: 0x88
	TArray<6aa26aefdb> 24979bc7f9; // Offset: 0xd8
// ============================= //
Struct 6aa26aefdb
	1c29c51cb3* 3fd8d32476; // Offset: 0x0
	CameraShakeSourceComponent* e2aa0141b4; // Offset: 0x8
// ============================= //
Class 1c29c51cb3.Object
	float ShakeScale; // Offset: 0xb0
	PlayerCameraManager* CameraManager; // Offset: 0xc0
// ============================= //
Class CameraShakeSourceComponent.SceneComponent.ActorComponent.Object
	1c29c51cb3* CameraShake; // Offset: 0x278
	bool bAutoStart; // Offset: 0x280
	float OuterAttenuationRadius; // Offset: 0x284
	TEnumAsByte<ECameraShakeAttenuation> Attenuation; // Offset: 0x288
	float InnerAttenuationRadius; // Offset: 0x28c
// ============================= //
Enum ECameraShakeAttenuation
	ECameraShakeAttenuation::Linear = 0,
	ECameraShakeAttenuation::Quadratic = 1,
	ECameraShakeAttenuation::ECameraShakeAttenuation_MAX = 2;
// ============================= //
Enum EMouseCursor
	EMouseCursor::None = 0,
	EMouseCursor::Default = 1,
	EMouseCursor::TextEditBeam = 2,
	EMouseCursor::ResizeLeftRight = 3,
	EMouseCursor::ResizeUpDown = 4,
	EMouseCursor::ResizeSouthEast = 5,
	EMouseCursor::ResizeSouthWest = 6,
	EMouseCursor::CardinalCross = 7,
	EMouseCursor::Crosshairs = 8,
	EMouseCursor::Hand = 9,
	EMouseCursor::GrabHand = 10,
	EMouseCursor::GrabHandClosed = 11,
	EMouseCursor::SlashedCircle = 12,
	EMouseCursor::EyeDropper = 13,
	EMouseCursor::EMouseCursor_MAX = 14;
// ============================= //
Class GameSession.Info.Actor.Object
	int MaxPlayers; // Offset: 0x2b8
	bool bRequiresPushToTalk; // Offset: 0x2bc
	int MaxSpectators; // Offset: 0x2c0
	FName SessionName; // Offset: 0x2c4
	uint8_t MaxSplitscreensPerConnection; // Offset: 0x2d0
// ============================= //
Class ServerStatReplicator.Info.Actor.Object
	UInt32Property c7bed2c79c; // Offset: 0x2b8
	UInt32Property NumActorChannels; // Offset: 0x2bc
	UInt32Property c0073179f7; // Offset: 0x2c4
	UInt32Property InPacketsClientMin; // Offset: 0x2c8
	UInt32Property InRateClientAvg; // Offset: 0x2cc
	UInt32Property InPacketsClientAvg; // Offset: 0x2d0
	UInt32Property OutPacketsClientMin; // Offset: 0x2d4
	UInt32Property InRateClientMin; // Offset: 0x2d8
	UInt32Property OutPacketsClientAvg; // Offset: 0x2dc
	UInt32Property 0bee40a904; // Offset: 0x2e0
	UInt32Property MaxPacketOverhead; // Offset: 0x2e4
	UInt32Property VoiceBytesRecv; // Offset: 0x2e8
	UInt32Property 2f142cdc9e; // Offset: 0x2ec
	UInt32Property OutPackets; // Offset: 0x2f0
	UInt32Property PercentInVoice; // Offset: 0x2f4
	UInt32Property OutRate; // Offset: 0x2f8
	UInt32Property NetNumClients; // Offset: 0x2fc
	UInt32Property InBunches; // Offset: 0x300
	UInt32Property b27357ab7a; // Offset: 0x304
	UInt32Property NumNetGUIDsPending; // Offset: 0x308
	UInt32Property PrioritizedActors; // Offset: 0x30c
	UInt32Property InRateClientMax; // Offset: 0x310
	UInt32Property PercentOutVoice; // Offset: 0x314
	UInt32Property NumNetActors; // Offset: 0x318
	UInt32Property InLoss; // Offset: 0x31c
	UInt32Property NetSaturated; // Offset: 0x320
	UInt32Property Channels; // Offset: 0x324
	UInt32Property InPackets; // Offset: 0x328
	UInt32Property OutBunches; // Offset: 0x32c
	UInt32Property NumDormantActors; // Offset: 0x330
	UInt32Property df37f2f2b8; // Offset: 0x334
	UInt32Property VoiceBytesSent; // Offset: 0x338
	UInt32Property InPacketsClientMax; // Offset: 0x33c
	UInt32Property OutRateClientMax; // Offset: 0x340
	UInt32Property NetGUIDInRate; // Offset: 0x344
	UInt32Property NumNetGUIDsAckd; // Offset: 0x348
	UInt32Property ff4d2dce8d; // Offset: 0x34c
	UInt32Property NumNetGUIDsUnAckd; // Offset: 0x350
	UInt32Property OutRateClientAvg; // Offset: 0x354
	UInt32Property OutRateClientMin; // Offset: 0x358
	UInt32Property a3f4eddff6; // Offset: 0x35c
	UInt32Property NumActors; // Offset: 0x360
	UInt32Property OutPacketsClientMax; // Offset: 0x364
	UInt32Property OutLoss; // Offset: 0x368
	UInt32Property VoicePacketsSent; // Offset: 0x36c
	UInt32Property InRate; // Offset: 0x374
	UInt32Property VoicePacketsRecv; // Offset: 0x37c
// ============================= //
Class GameStateBase.Info.Actor.Object
	TArray<PlayerState*> PlayerArray; // Offset: 0x2b8
	bool 81c9a0fb4c; // Offset: 0x2cc
	GameModeBase* AuthorityGameMode; // Offset: 0x2d0
	GameModeBase* GameModeClass; // Offset: 0x2e8
	float 55a69ff90d; // Offset: 0x2f0
	SpectatorPawn* SpectatorClass; // Offset: 0x300
	float 2b3415a8b0; // Offset: 0x308
// ============================= //
Class BookmarkBase.Object
// ============================= //
Struct 0f9b668026
	NetConnection* Connection; // Offset: 0x0
	Actor* 1a553f0642; // Offset: 0x8
	Actor* ViewTarget; // Offset: 0x10
	Vector ViewLocation; // Offset: 0x18
	Vector ViewDir; // Offset: 0x24
// ============================= //
Class NavigationSystemConfig.Object
	FName DefaultAgentName; // Offset: 0x68
	SoftClassPath 8eb5794899; // Offset: 0x70
	NavAgentSelector SupportedAgentsMask; // Offset: 0x88
	bool b0273a413a; // Offset: 0x8c
// ============================= //
Struct NavAgentSelector
	bool bSupportsAgent0; // Offset: 0x0
	bool bSupportsAgent1; // Offset: 0x0
	bool bSupportsAgent2; // Offset: 0x0
	bool bSupportsAgent3; // Offset: 0x0
	bool bSupportsAgent4; // Offset: 0x0
	bool bSupportsAgent5; // Offset: 0x0
	bool bSupportsAgent6; // Offset: 0x0
	bool bSupportsAgent7; // Offset: 0x0
	bool bSupportsAgent8; // Offset: 0x1
	bool bSupportsAgent9; // Offset: 0x1
	bool bSupportsAgent10; // Offset: 0x1
	bool bSupportsAgent11; // Offset: 0x1
	bool bSupportsAgent12; // Offset: 0x1
	bool bSupportsAgent13; // Offset: 0x1
	bool bSupportsAgent14; // Offset: 0x1
	bool bSupportsAgent15; // Offset: 0x1
// ============================= //
Struct BroadphaseSettings
	bool bUseMBPOnClient; // Offset: 0x0
	bool bUseMBPOnServer; // Offset: 0x1
	bool bUseMBPOuterBounds; // Offset: 0x2
	Box MBPBounds; // Offset: 0x4
	float 33dab46d36; // Offset: 0x20
	UInt32Property MBPNumSubdivs; // Offset: 0x24
// ============================= //
Class PhysicsCollisionHandler.Object
	float ImpactThreshold; // Offset: 0x68
	float ImpactReFireDelay; // Offset: 0x6c
	SoundBase* DefaultImpactSound; // Offset: 0x78
// ============================= //
Struct 9359741f93
	FName MaterialInstanceName; // Offset: 0x0
	FName VectorParamName; // Offset: 0x8
	LinearColor Color; // Offset: 0x10
// ============================= //
Class DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object
// ============================= //
Class DamageType.Object
	bool bCausedByWorld; // Offset: 0x68
	bool bScaleMomentumByMass; // Offset: 0x68
	bool bRadialDamageVelChange; // Offset: 0x68
	float DamageFalloff; // Offset: 0x6c
	float DestructibleDamageSpreadScale; // Offset: 0x70
	float DamageImpulse; // Offset: 0x74
	float DestructibleImpulse; // Offset: 0x78
// ============================= //
Class GameNetworkManager.Info.Actor.Object
	float ClientNetSendMoveDeltaTimeStationary; // Offset: 0x2b8
	float SeverePacketLossThreshold; // Offset: 0x2bc
	float ServerForcedUpdateHitchThreshold; // Offset: 0x2c0
	bool bUseDistanceBasedRelevancy; // Offset: 0x2c4
	int ClientNetSendMoveThrottleOverPlayerCount; // Offset: 0x2c8
	float StandbyRxCheatTime; // Offset: 0x2cc
	float MaxClientSmoothingDeltaTime; // Offset: 0x2d0
	float PercentForBadPing; // Offset: 0x2d8
	bool bIsStandbyCheckingEnabled; // Offset: 0x2dc
	bool 3e5b40b47d; // Offset: 0x2dc
	float MAXPOSITIONERRORSQUARED; // Offset: 0x2e4
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // Offset: 0x2f0
	float ClientNetSendMoveDeltaTimeThrottled; // Offset: 0x2f4
	float ClientNetCamUpdateDeltaTime; // Offset: 0x2f8
	float MaxMoveDeltaTime; // Offset: 0x2fc
	float MovementTimeDiscrepancyDriftAllowance; // Offset: 0x300
	float MoveRepSize; // Offset: 0x304
	bool bMovementTimeDiscrepancyDetection; // Offset: 0x308
	float StandbyTxCheatTime; // Offset: 0x30c
	float CLIENTADJUSTUPDATECOST; // Offset: 0x310
	float PercentMissingForTxStandby; // Offset: 0x314
	float ClientNetCamUpdatePositionLimit; // Offset: 0x318
	int TotalNetBandwidth; // Offset: 0x31c
	float ClientNetSendMoveDeltaTime; // Offset: 0x320
	int MinDynamicBandwidth; // Offset: 0x324
	float PercentMissingForRxStandby; // Offset: 0x328
	float MAXCLIENTUPDATEINTERVAL; // Offset: 0x32c
	float ClientErrorUpdateRateLimit; // Offset: 0x330
	float MAXNEARZEROVELOCITYSQUARED; // Offset: 0x334
	bool ClientAuthorativePosition; // Offset: 0x338
	float MovementTimeDiscrepancyResolutionRate; // Offset: 0x33c
	float JoinInProgressStandbyWaitTime; // Offset: 0x340
	bool bMovementTimeDiscrepancyResolution; // Offset: 0x344
	float ServerForcedUpdateHitchCooldown; // Offset: 0x348
	float MovementTimeDiscrepancyMinTimeMargin; // Offset: 0x34c
	float BadPacketLossThreshold; // Offset: 0x350
	int SeverePingThreshold; // Offset: 0x354
	int MaxDynamicBandwidth; // Offset: 0x358
	int BadPingThreshold; // Offset: 0x35c
	float MovementTimeDiscrepancyMaxTimeMargin; // Offset: 0x360
	float MaxClientForcedUpdateDuration; // Offset: 0x364
	int ClientNetSendMoveThrottleAtNetSpeed; // Offset: 0x368
// ============================= //
Struct 0c32194791
	bool bIsWorldSettings; // Offset: 0x0
	float ExteriorVolume; // Offset: 0x4
	float ExteriorTime; // Offset: 0x8
	float ExteriorLPF; // Offset: 0xc
	float ExteriorLPFTime; // Offset: 0x10
	float InteriorVolume; // Offset: 0x14
	float InteriorTime; // Offset: 0x18
	float InteriorLPF; // Offset: 0x1c
	float InteriorLPFTime; // Offset: 0x20
// ============================= //
Struct ReverbSettings
	bool bApplyReverb; // Offset: 0x0
	ReverbEffect* ReverbEffect; // Offset: 0x8
	71068657ac* ReverbPluginEffect; // Offset: 0x10
	float Volume; // Offset: 0x18
	float FadeTime; // Offset: 0x1c
// ============================= //
Class ReverbEffect.Object
	bool bBypassLateReflections; // Offset: 0x8c
	bool bBypassEarlyReflections; // Offset: 0x98
// ============================= //
Struct bffacd2636
	Object* ObjClass; // Offset: 0x48
// ============================= //
Class ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* 7766b4e2c0; // Offset: 0x570
// ============================= //
Class MapBuildDataRegistry.Object
// ============================= //
Class LevelScriptActor.Actor.Object
	bool 9bb1803b99; // Offset: 0x2b8
// ============================= //
Class LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
// ============================= //
Class LevelStreaming.Object
	int LevelLODIndex; // Offset: 0x80
	MulticastInlineDelegateProperty OnLevelHidden; // Offset: 0x88
	Transform LevelTransform; // Offset: 0xa0
	int StreamingPriority; // Offset: 0xd0
	Level* 77878d5caa; // Offset: 0xd8
	bool bShouldBeVisible; // Offset: 0xf0
	bool bShouldBeLoaded; // Offset: 0xf0
	bool bLocked; // Offset: 0xf0
	bool ca068d4bc9; // Offset: 0xf0
	bool bShouldBlockOnLoad; // Offset: 0xf0
	bool bShouldBlockOnUnload; // Offset: 0xf1
	bool bDisableDistanceStreaming; // Offset: 0xf1
	bool ce2fa1113b; // Offset: 0xf1
	MulticastInlineDelegateProperty OnLevelUnloaded; // Offset: 0xf8
	Level* 26a6546907; // Offset: 0x108
	MulticastInlineDelegateProperty OnLevelShown; // Offset: 0x110
	MulticastInlineDelegateProperty OnLevelLoaded; // Offset: 0x120
	FName d64a4b47c8; // Offset: 0x130
	TArray<FName> 0ed9f804b4; // Offset: 0x140
	TArray<LevelStreamingVolume*> 171df8ca7f; // Offset: 0x150
	World* WorldAsset; // Offset: 0x168
// ============================= //
Class LevelStreamingVolume.Volume.Brush.Actor.Object
	TEnumAsByte<EStreamingVolumeUsage> StreamingUsage; // Offset: 0x2e8
	bool bEditorPreVisOnly; // Offset: 0x2e9
	bool bDisabled; // Offset: 0x2e9
	TArray<FName> StreamingLevelNames; // Offset: 0x2f0
// ============================= //
Enum EStreamingVolumeUsage
	SVB_Loading = 0,
	SVB_LoadingAndVisibility = 1,
	SVB_VisibilityBlockingOnLoad = 2,
	SVB_BlockingOnLoad = 3,
	SVB_LoadingNotVisible = 4,
	SVB_MAX = 5;
// ============================= //
Struct 0119241da4
	TArray<LevelStreaming*> 4852361e31; // Offset: 0x0
// ============================= //
Class DemoNetDriver.NetDriver.Object
	float CheckpointSaveMaxMSPerFrame; // Offset: 0x840
	TArray<MulticastRecordOptions> MulticastRecordOptions; // Offset: 0x8a0
	TArray<PlayerController*> 42d7186e4e; // Offset: 0x1180
	MapProperty 6a4f7748fd; // Offset: 0x1360
// ============================= //
Struct MulticastRecordOptions
	FString 1c0399abe9; // Offset: 0x0
	bool f694c6d6c1; // Offset: 0x10
	bool e229084447; // Offset: 0x11
// ============================= //
Class ParticleEventManager.Actor.Object
// ============================= //
Class NavigationSystemBase.Object
// ============================= //
Class AISystemBase.Object
	SoftClassPath AISystemClassName; // Offset: 0x70
	bool bInstantiateAISystemOnClient; // Offset: 0x88
	FName AISystemModuleName; // Offset: 0x8c
// ============================= //
Class AvoidanceManager.Object
	float DefaultTimeToLive; // Offset: 0x70
	float LockTimeAfterAvoid; // Offset: 0x74
	float LockTimeAfterClean; // Offset: 0xb0
	float ArtificialRadiusExpansion; // Offset: 0xb4
	float DeltaTimeToPredict; // Offset: 0xb8
	float HeightCheckMargin; // Offset: 0xbc
// ============================= //
Struct LevelCollection
	GameStateBase* GameState; // Offset: 0x8
	NetDriver* NetDriver; // Offset: 0x10
	DemoNetDriver* DemoNetDriver; // Offset: 0x18
	Level* PersistentLevel; // Offset: 0x20
	SetProperty Levels; // Offset: 0x28
// ============================= //
Class GameInstance.Object
	TArray<XigPtrProperty> c13ae6a33e; // Offset: 0x80
	TArray<XigPtrProperty> ReferencedObjects; // Offset: 0x98
	80fef9608d* 80fef9608d; // Offset: 0xc0
	MulticastInlineDelegateProperty OnPawnControllerChangedDelegates; // Offset: 0x1b8
// ============================= //
Class 80fef9608d.Object
// ============================= //
Class 18bae0abd4.Object
	MaterialParameterCollection* Collection; // Offset: 0x150
// ============================= //
Class MaterialParameterCollection.Object
	TArray<6f418f4bd8> 03d9577c42; // Offset: 0x68
	TArray<b566dc50ab> 55911882e1; // Offset: 0x88
// ============================= //
Struct 6f418f4bd8.65f4dc57ac
	LinearColor DefaultValue; // Offset: 0x18
// ============================= //
Struct 65f4dc57ac
	FName ParameterName; // Offset: 0x0
	Guid ID; // Offset: 0x8
// ============================= //
Struct b566dc50ab.65f4dc57ac
	float DefaultValue; // Offset: 0x18
// ============================= //
Class WorldComposition.Object
	TArray<LevelStreaming*> 915d90bc85; // Offset: 0x70
	float RebaseOriginDistance; // Offset: 0x90
	double TilesStreamingTimeThreshold; // Offset: 0x98
	bool bRebaseOriginIn3DSpace; // Offset: 0xa0
	bool bLoadAllTilesDuringCinematic; // Offset: 0xc8
// ============================= //
Struct WorldPSCPool
	MapProperty 59b9b9ce1a; // Offset: 0x0
// ============================= //
Class XtrmPlayerController.PlayerController.Controller.Actor.Object
	CurveFloat* 7547e720b4; // Offset: 0x9a0
	SoftObjectPath Path_CurveGyroscopeRotationThresholdX; // Offset: 0x9a8
	float DefaultFPPFOV; // Offset: 0x9f0
	CurveFloat* 540fa6c5e8; // Offset: 0x9f8
	XtrmDroneHandlingComponent* DroneHandlingComponent; // Offset: 0xa28
	bool e97c9cd14d; // Offset: 0xa3c
	TEnumAsByte<EObserverAuthorityType> 5fd57741ef; // Offset: 0xa3d
	CurveFloat* 1b6a37aaeb; // Offset: 0xa40
	float UpInputScale; // Offset: 0xa68
	CurveFloat* 0d2347f128; // Offset: 0xa70
	cb17bf3424* cb17bf3424; // Offset: 0xa78
	float DownInputScale; // Offset: 0xa94
	float NetworkDelayPopupTime; // Offset: 0xaa4
	050742ce9d* 050742ce9d; // Offset: 0xaa8
	float LeftInputScale; // Offset: 0xad8
	CameraComponent* 1e5acf4219; // Offset: 0xb28
	Vector_NetQuantizeNormal 5194e801d5; // Offset: 0xb34
	6158ab16f2* 6158ab16f2; // Offset: 0xb48
	TEnumAsByte<ECameraViewBehaviour> CameraViewBehaviour; // Offset: 0xb50
	VoiceInGameComponent* VoiceComponent; // Offset: 0xb60
	float YawInputCorrectionValue; // Offset: 0xb70
	SoftObjectPath Path_CurvePanelRotationThresholdY; // Offset: 0xbb8
	SphereComponent* 8b0dbf09b1; // Offset: 0xbd0
	CurveFloat* ff86e4dae2; // Offset: 0xbe8
	SoftObjectPath Path_CurveAccelerateRotationX; // Offset: 0xc00
	SoftObjectPath Path_CurvePanelRotationThresholdX; // Offset: 0xc18
	CurveFloat* 0eea750276; // Offset: 0xc60
	TArray<e71fe1ed8a> NearClippingLevelsOverZ; // Offset: 0xc70
	SoftObjectPath Path_CurveAccelerateRotationY; // Offset: 0xc80
	bool bUseInputCorrection; // Offset: 0xca4
	RadioMessageSetting RadioMessageSetting; // Offset: 0xd48
	SoftObjectPath Path_CurveGyroscopeRotationThresholdY; // Offset: 0xd88
	float RightInputScale; // Offset: 0xdb0
	float PitchInputCorrectionValue; // Offset: 0xe08
	float DefaultFOV; // Offset: 0xe0c
// ============================= //
Class XtrmDroneHandlingComponent.ActorComponent.Object
// ============================= //
Enum EObserverAuthorityType
	EObserverAuthorityType::None = 0,
	EObserverAuthorityType::FromBeginning = 1,
	EObserverAuthorityType::MyTeam = 2,
	EObserverAuthorityType::Killer = 3,
	EObserverAuthorityType::Friend = 4,
	EObserverAuthorityType::Clan = 5,
	EObserverAuthorityType::EObserverAuthorityType_MAX = 6;
// ============================= //
Class cb17bf3424.670ad3cee6.Subsystem.Object
	MapProperty e36359e08b; // Offset: 0xc0
// ============================= //
Class 670ad3cee6.Subsystem.Object
// ============================= //
Class Subsystem.Object
// ============================= //
Class 050742ce9d.Object
	a8dfd49af6* 99a172bd21; // Offset: 0xd0
	World* 508316d2c1; // Offset: 0xf0
// ============================= //
Class a8dfd49af6.Object
// ============================= //
Class 6158ab16f2.Object
// ============================= //
Enum ECameraViewBehaviour
	ECameraViewBehaviour::FpsAndTps = 0,
	ECameraViewBehaviour::FpsOnly = 1,
	ECameraViewBehaviour::TpsOnly = 2,
	ECameraViewBehaviour::ECameraViewBehaviour_MAX = 3;
// ============================= //
Class VoiceInGameComponent.VoiceBaseComponent.ActorComponent.Object
// ============================= //
Class VoiceBaseComponent.ActorComponent.Object
// ============================= //
Struct e71fe1ed8a
	TEnumAsByte<ENearClippingLevel> Level; // Offset: 0x0
	float Z; // Offset: 0x4
// ============================= //
Enum ENearClippingLevel
	ENearClippingLevel::Default = 0,
	ENearClippingLevel::Low = 1,
	ENearClippingLevel::Middle = 2,
	ENearClippingLevel::High = 3,
	ENearClippingLevel::ENearClippingLevel_MAX = 4;
// ============================= //
Struct RadioMessageSetting
	ListMessageSetting ListMessageSetting; // Offset: 0x0
	QuickMarkerSetting QuickMarkerSetting; // Offset: 0x10
	WheelMessageSetting WheelMessageSetting; // Offset: 0x20
	TEnumAsByte<EGender> Gender; // Offset: 0x30
// ============================= //
Struct ListMessageSetting
	TArray<RadioMessage> RadioMessages; // Offset: 0x0
// ============================= //
Struct RadioMessage
	FString MessageId; // Offset: 0x0
// ============================= //
Struct QuickMarkerSetting
	TArray<RadioMessage> 07dac295a5; // Offset: 0x0
// ============================= //
Struct WheelMessageSetting
	TArray<RadioMessage> RadioMessages; // Offset: 0x0
// ============================= //
Enum EGender
	EGender::Male = 0,
	EGender::Female = 1,
	EGender::EGender_MAX = 2;
// ============================= //
Class TslPlayerCameraManager.PlayerCameraManager.Actor.Object
	PostProcessSettings 1461dce5c2; // Offset: 0x2980
// ============================= //
Class XtrmPlayerState.PlayerState.Info.Actor.Object
	FString CountryCode; // Offset: 0x488
	FString FlagId; // Offset: 0x498
	FString KillerName; // Offset: 0x4a8
	TArray<FString> ca42fa79ba; // Offset: 0x4c0
	Team* bfa6afc219; // Offset: 0x4d0
	RadioMessageSetting RadioMessageSetting; // Offset: 0x518
	int KillCount; // Offset: 0x550
	690ccc17e7 8db7f171cd; // Offset: 0x580
	int AssistCount; // Offset: 0x980
	bool fa00965930; // Offset: 0xb88
	TeamMemberInfo MemberInfo; // Offset: 0xb8c
// ============================= //
Class Team.Actor.Object
	TArray<TeamMember> Members; // Offset: 0x308
	bool 0c62c0ff78; // Offset: 0x328
	int Number; // Offset: 0x32c
	int Ranking; // Offset: 0x334
// ============================= //
Struct TeamMember
	int MemberNumber; // Offset: 0x28
	int TeamNumber; // Offset: 0x88
// ============================= //
Struct 690ccc17e7
	float 33a4010e9a; // Offset: 0x0
	int RespawnCount; // Offset: 0x4
	MapProperty KillCountPerTeam; // Offset: 0x8
	MapProperty 8fe4e8ac98; // Offset: 0x58
	float 566d08f9a4; // Offset: 0xa8
	TArray<39dfaad44f> 9fd04f9043; // Offset: 0xb0
	float 59efc2af17; // Offset: 0xc0
	int 8cc80389ff; // Offset: 0xc4
	float 4dd83409b4; // Offset: 0xc8
	int ce5fe404d4; // Offset: 0xcc
	float 3d66a4012b; // Offset: 0xd0
	float HealAmount; // Offset: 0xd4
	float be39cae856; // Offset: 0xd8
	MapProperty cd36266662; // Offset: 0xe0
	MapProperty 1f4eb31be7; // Offset: 0x130
	float 323e00b764; // Offset: 0x180
	int f50c8f88cd; // Offset: 0x184
	TArray<UniqueNetIdRepl> af20cc341c; // Offset: 0x188
	MapProperty b5fc6001b2; // Offset: 0x198
	float 213772968e; // Offset: 0x1e8
	MapProperty 112645db19; // Offset: 0x1f0
	int b4177c1c26; // Offset: 0x240
	float c1a0d85158; // Offset: 0x244
	int ae5457f0f3; // Offset: 0x248
	int abdd10da9e; // Offset: 0x24c
	float 5cbd3e7feb; // Offset: 0x250
	float 26eb7b1f5b; // Offset: 0x254
	int 3a39ecfb70; // Offset: 0x258
	TArray<39dfaad44f> a26d3f2c87; // Offset: 0x260
	MapProperty 30e64065fb; // Offset: 0x270
	float a31b5a1bd4; // Offset: 0x2c0
	MapProperty e6c6a04599; // Offset: 0x2c8
	float a214e9f40a; // Offset: 0x328
	float 1ce1669bb3; // Offset: 0x32c
	int TeamUpCount; // Offset: 0x330
	MapProperty f52f949699; // Offset: 0x338
	int 092f2d8737; // Offset: 0x388
	int d313461548; // Offset: 0x38c
	TArray<UniqueNetIdRepl> d60dd17430; // Offset: 0x390
	int 1567fae956; // Offset: 0x3a0
	int ac79505e49; // Offset: 0x3a4
	MapProperty 378a7aae80; // Offset: 0x3a8
	int 71ffbb0995; // Offset: 0x3f8
	int bc51ccb27e; // Offset: 0x3fc
// ============================= //
Struct 39dfaad44f
	TEnumAsByte<EDamageTypeCategory> DamageTypeCategory; // Offset: 0x0
	TEnumAsByte<EDamageReason> DamageReason; // Offset: 0x1
// ============================= //
Enum EDamageTypeCategory
	EDamageTypeCategory::Damage_None = 0,
	EDamageTypeCategory::Damage_Instant = 1,
	EDamageTypeCategory::Damage_Gun = 2,
	EDamageTypeCategory::Damage_Melee = 3,
	EDamageTypeCategory::Damage_Punch = 4,
	EDamageTypeCategory::Damage_ZombiePunch = 5,
	EDamageTypeCategory::Damage_Groggy = 6,
	EDamageTypeCategory::Damage_BlueZone = 7,
	EDamageTypeCategory::Damage_VehicleHit = 8,
	EDamageTypeCategory::Damage_VehicleCrashHit = 9,
	EDamageTypeCategory::Damage_Molotov = 10,
	EDamageTypeCategory::Damage_Explosion = 11,
	EDamageTypeCategory::Damage_Explosion_Grenade = 12,
	EDamageTypeCategory::Damage_Explosion_RedZone = 13,
	EDamageTypeCategory::Damage_Explosion_Vehicle = 14,
	EDamageTypeCategory::Damage_DroneExplosion = 15,
	EDamageTypeCategory::Damage_DroneHit = 16,
	EDamageTypeCategory::Damage_Instant_Fall = 17,
	EDamageTypeCategory::Damage_Drown = 18,
	EDamageTypeCategory::Damage_BleedOut = 19,
	EDamageTypeCategory::Damage_Explosion_JerryCan = 20,
	EDamageTypeCategory::Damage_ZombieBuff = 21,
	EDamageTypeCategory::Damage_MeleeThrow = 22,
	EDamageTypeCategory::Damage_Tram = 23,
	EDamageTypeCategory::Damage_FakeKill = 24,
	EDamageTypeCategory::Damage_TeamUpSelfDie = 25,
	EDamageTypeCategory::Damage_MAX = 26;
// ============================= //
Enum EDamageReason
	EDamageReason::None = 0,
	EDamageReason::HeadShot = 1,
	EDamageReason::TorsoShot = 2,
	EDamageReason::PelvisShot = 3,
	EDamageReason::ArmShot = 4,
	EDamageReason::LegShot = 5,
	EDamageReason::BlueZone = 6,
	EDamageReason::RedZone = 7,
	EDamageReason::Respawn = 8,
	EDamageReason::PeneterateHeadShot = 9,
	EDamageReason::EDamageReason_MAX = 10;
// ============================= //
Struct TeamMemberInfo
	int TeamNumber; // Offset: 0x0
	int MyNumber; // Offset: 0x4
// ============================= //
Class TeamMemberState.Actor.Object
	float 1c4c0cfae8; // Offset: 0x2d0
	8bf5fa75e7 8bf5fa75e7; // Offset: 0x2e8
	int bf864899fb; // Offset: 0x2f8
	Vector_NetQuantize100 ec7e04cbd2; // Offset: 0x2fc
	Rotator 4e66ee1cd6; // Offset: 0x308
	bool 8cc4f0975f; // Offset: 0x320
	bool 74f1f78f4a; // Offset: 0x320
	bool 2ea2cf821b; // Offset: 0x320
	bool fdd0ff5aa6; // Offset: 0x320
	bool bIsParachuting; // Offset: 0x320
	bool 1dc5fd76b3; // Offset: 0x320
	bool bIsInVehicle; // Offset: 0x320
	bool 4d5a370fc0; // Offset: 0x320
	bool 6d4350d3e9; // Offset: 0x321
	bool ccb87b869c; // Offset: 0x321
	TeamMemberInfo MemberInfo; // Offset: 0x350
	bool 08e7460190; // Offset: 0x358
	bool bIsLogOut; // Offset: 0x35a
	uint8_t HealthMax; // Offset: 0x35b
	de0d5ecf85 de0d5ecf85; // Offset: 0x370
	Rotator 38c9335655; // Offset: 0x384
	e6bdc9da8d 14ba67b8de; // Offset: 0x390
	Vector_NetQuantize100 de0f6c62a2; // Offset: 0x3b4
	28eb3571ba b2c465466f; // Offset: 0x3c0
	Pawn* 09d6d14e7f; // Offset: 0x3d8
	TEnumAsByte<EMatchResultJudgement> MatchResultJudgement; // Offset: 0x3e4
// ============================= //
Struct 8bf5fa75e7
	TArray<93486796e5> WayPointPositions; // Offset: 0x0
// ============================= //
Struct 93486796e5.Vector2D
// ============================= //
Struct de0d5ecf85
	bool bShow; // Offset: 0x0
	Vector MarkerPosition; // Offset: 0x4
	TEnumAsByte<EMarkerType> MarkerType; // Offset: 0x10
// ============================= //
Enum EMarkerType
	EMarkerType::None = 0,
	EMarkerType::Normal = 1,
	EMarkerType::Attack = 2,
	EMarkerType::Danger = 3,
	EMarkerType::Loot = 4,
	EMarkerType::Regroup = 5,
	EMarkerType::Vehicle = 6,
	EMarkerType::Help = 7,
	EMarkerType::Assemble = 8,
	EMarkerType::Enemy = 9,
	EMarkerType::DroneStoreOrder = 10,
	EMarkerType::EMarkerType_MAX = 11;
// ============================= //
Struct e6bdc9da8d
	TEnumAsByte<EDamageTypeCategory> Reason; // Offset: 0x0
	uint8_t Health; // Offset: 0x1
// ============================= //
Struct 28eb3571ba
	float ServerResetTime; // Offset: 0x0
	Vector MarkerPosition; // Offset: 0x4
	TEnumAsByte<EMarkerType> MarkerType; // Offset: 0x10
// ============================= //
Enum EMatchResultJudgement
	EMatchResultJudgement::Finished = 0,
	EMatchResultJudgement::Invalidated = 1,
	EMatchResultJudgement::Afk = 2,
	EMatchResultJudgement::EMatchResultJudgement_MAX = 3;
// ============================= //
Class Weather.Info.Actor.Object
	FName ede5f66827; // Offset: 0x2c0
// ============================= //
Class XtrmCharactersPrivateActor.PrivateActor.Actor.Object
	ItemCraftingComponent* CraftingComponent; // Offset: 0x2b8
// ============================= //
Class PrivateActor.Actor.Object
// ============================= //
Class ItemCraftingComponent.ActorComponent.Object
	TArray<ba93f05ff7> a6b9783421; // Offset: 0x138
// ============================= //
Struct ba93f05ff7
	MapProperty 4b8a8576e3; // Offset: 0x20
// ============================= //
Class DroppedItem_Equipment.DroppedItem.Actor.Object
	float 2f8df2d9d0; // Offset: 0x314
// ============================= //
Class DroppedItem.Actor.Object
	DroppedItemInteractionComponent* InteractionComp; // Offset: 0x2c0
	AsyncStaticMeshComponent* MeshComp; // Offset: 0x2c8
	float MaxDrawDistance; // Offset: 0x2d0
	8b3f6bfd19 8b3f6bfd19; // Offset: 0x2f0
	uint16_t Health; // Offset: 0x304
	int 820e973b27; // Offset: 0x310
// ============================= //
Class DroppedItemInteractionComponent.BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
// ============================= //
Class BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float LineThickness; // Offset: 0x54c
	Vector BoxExtent; // Offset: 0x550
// ============================= //
Class AsyncStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	StaticMesh* 217b1a33eb; // Offset: 0x630
	FName c9dc432e94; // Offset: 0x648
	StaticMesh* d87b8949cb; // Offset: 0x650
	StaticMesh* b4ce8873a5; // Offset: 0x690
	StaticMesh* StaticMeshAsset; // Offset: 0x698
	TArray<54e348b603> 54e348b603; // Offset: 0x6d8
	MulticastInlineDelegateProperty OnStaticMeshLoaded; // Offset: 0x6e8
// ============================= //
Struct 54e348b603
	TEnumAsByte<ECollisionResponse> Response; // Offset: 0x0
	TEnumAsByte<ECollisionChannel> Channel; // Offset: 0x1
// ============================= //
Struct 8b3f6bfd19
	SkinID SkinID; // Offset: 0x0
	ItemInstance ItemInstance; // Offset: 0x4
	bool 8786da0324; // Offset: 0x10
// ============================= //
Struct SkinID
	UInt32Property SkinID; // Offset: 0x0
// ============================= //
Struct ItemInstance
	UInt32Property ItemId; // Offset: 0x0
	int 1b4295ae17; // Offset: 0x4
	uint16_t StackCount; // Offset: 0x8
// ============================= //
Class DroppedItem_Gun.DroppedItem.Actor.Object
	TArray<b9287015ff> f1dd1d95af; // Offset: 0x318
	103f37913b 7df712b49e; // Offset: 0x32c
// ============================= //
Struct b9287015ff
	TEnumAsByte<EWeaponAttachmentSlotID> SlotID; // Offset: 0x0
	int AttachmentID; // Offset: 0x4
// ============================= //
Enum EWeaponAttachmentSlotID
	EWeaponAttachmentSlotID::Muzzle = 0,
	EWeaponAttachmentSlotID::LowerRail = 1,
	EWeaponAttachmentSlotID::UpperRail = 2,
	EWeaponAttachmentSlotID::Magazine = 3,
	EWeaponAttachmentSlotID::Stock = 4,
	EWeaponAttachmentSlotID::Angled = 5,
	EWeaponAttachmentSlotID::Barrel = 6,
	EWeaponAttachmentSlotID::HandGuard = 7,
	EWeaponAttachmentSlotID::RemodelA = 8,
	EWeaponAttachmentSlotID::RemodelB = 9,
	EWeaponAttachmentSlotID::Merge = 10,
	EWeaponAttachmentSlotID::Max = 11,
	EWeaponAttachmentSlotID::None = 11;
// ============================= //
Struct 103f37913b
	int f8894af124; // Offset: 0x0
	int da8301b054; // Offset: 0x4
// ============================= //
BlueprintGeneratedClass BP_EVAX_C
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x800
	InteractableSeatCollision* InteractableSeatCollision_Passenger; // Offset: 0x808
	InteractableSeatCollision* InteractableSeatCollision_Driver; // Offset: 0x810
// ============================= //
BlueprintGeneratedClass BaseWheeledVehicle_C
// ============================= //
Class XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object
	50cd5c39ff 0fcdaf6031; // Offset: 0x478
	CameraComponent* ThirdPersonCameraInVehicle; // Offset: 0x598
	XtrmParticle* Muffler; // Offset: 0x5a0
	bool ff9a93220c; // Offset: 0x630
	StaticMeshComponent* VehicleBulletCollision; // Offset: 0x638
	VehicleDoorComponent* 9363327d49; // Offset: 0x640
	float SteeringYawBias; // Offset: 0x648
	VehicleCommonComponent* CommonComponent; // Offset: 0x650
	bool a6929e32f0; // Offset: 0x660
	SpringArmInVehicleComponent* FirstPersonSpringArmInVehicle; // Offset: 0x668
	VehicleSeatComponent* SeatComponent; // Offset: 0x670
	d30b84de44* 4423accd3a; // Offset: 0x6a0
	float SteeringInputTolerance; // Offset: 0x6a8
	BuoyancyForceComponent* BuoyancyForceComponent; // Offset: 0x6c0
	VehicleSyncComponent* SyncComponent; // Offset: 0x6c8
	PhysicalMaterial* 3ac8aaaa7b; // Offset: 0x6d0
	XtrmParticle* 56382c1941; // Offset: 0x6d8
	db15eddec6* ce44248777; // Offset: 0x6e8
	AkComponent* EngineSoundComponent; // Offset: 0x718
	2102794289* 5a41b854ac; // Offset: 0x720
	bool SeatDestroyAfterExplosion; // Offset: 0x728
	VehicleExplosionComponent* ExplosionComponent; // Offset: 0x730
	float MaxClampThrottleInClutch; // Offset: 0x738
	FName 0d44bf41a7; // Offset: 0x740
	4ec523ccaf 676ab7aae5; // Offset: 0x748
	CurveFloat* 52b1a50f08; // Offset: 0x770
	CameraComponent* FirstPersonCameraInVehicle; // Offset: 0x780
	float NetUpdateFrequency_VehicleMovement; // Offset: 0x788
	SpringArmInVehicleComponent* ThirdPersonSpringArmInVehicle; // Offset: 0x7f0
// ============================= //
Class WheeledVehicle.Pawn.Actor.Object
	XigPtrProperty Mesh; // Offset: 0x360
	XigPtrProperty VehicleMovement; // Offset: 0x380
// ============================= //
Struct 50cd5c39ff
	MapProperty 40585d0a45; // Offset: 0x0
	MapProperty 5902283ecf; // Offset: 0x50
	bool IsActive; // Offset: 0xa0
// ============================= //
Class VehicleTrunkComponent.ActorComponent.Object
	TArray<XtrmPlayerController*> 8b17955ef8; // Offset: 0x108
	12aa3af638 7adc3b09f9; // Offset: 0x130
	bool bShareTrunkWithOtherTeam; // Offset: 0x168
	TArray<bbd57461f8> 37232c0492; // Offset: 0x178
	280f5be7aa 428989f76f; // Offset: 0x1b0
	TArray<bbd57461f8> 1ac588a82c; // Offset: 0x1e0
// ============================= //
Struct 12aa3af638
	TArray<885eb072c8> WeaponItemList; // Offset: 0x0
	TArray<247d26c63a> EquipItemList; // Offset: 0x10
	TArray<5ac1fda6d7> 318a013545; // Offset: 0x20
// ============================= //
Struct 885eb072c8.5ac1fda6d7
	TArray<3dd3ee565e> 034db47c60; // Offset: 0x10
	103f37913b 7df712b49e; // Offset: 0x20
// ============================= //
Struct 5ac1fda6d7
	ItemInstance Item; // Offset: 0x0
// ============================= //
Struct 3dd3ee565e
	int AttachmentID; // Offset: 0x0
	TEnumAsByte<EWeaponAttachmentSlotID> Slot; // Offset: 0x4
// ============================= //
Struct 247d26c63a.5ac1fda6d7
	float 8fd575515c; // Offset: 0xc
// ============================= //
Struct bbd57461f8.65d872f472
	bool bIsFree; // Offset: 0x2c
	int16_t ServerIndex; // Offset: 0x2e
// ============================= //
Struct 65d872f472
	103f37913b 7df712b49e; // Offset: 0x0
	float 8fd575515c; // Offset: 0x8
	TArray<3dd3ee565e> 034db47c60; // Offset: 0x10
	ItemInstance Item; // Offset: 0x20
// ============================= //
Struct 280f5be7aa
	TArray<0229ef28a0> 642fccf186; // Offset: 0x0
	TArray<0229ef28a0> a85c68d0b8; // Offset: 0x10
	TArray<0229ef28a0> 3416406dc6; // Offset: 0x20
// ============================= //
Struct 0229ef28a0
	int16_t ServerIndex; // Offset: 0x0
	TEnumAsByte<EVehicleTrunkEventType> EventType; // Offset: 0x2
// ============================= //
Enum EVehicleTrunkEventType
	EVehicleTrunkEventType::PutIn = 0,
	EVehicleTrunkEventType::PickUp = 1,
	EVehicleTrunkEventType::Update = 2,
	EVehicleTrunkEventType::None = 3,
	EVehicleTrunkEventType::EVehicleTrunkEventType_MAX = 4;
// ============================= //
Class InteractableSeatCollision.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MaxInteractableDistance; // Offset: 0x558
// ============================= //
Class XtrmParticle.Actor.Object
	FName AttachSocketName; // Offset: 0x2d4
	AkComponent* ParticleAudio; // Offset: 0x2e0
	TArray<ParticleParameter> DefaultParameters; // Offset: 0x2e8
	ParticleSystemComponent* ParticleSystem; // Offset: 0x2f8
	TEnumAsByte<EAttachmentRule> 6fe74a6116; // Offset: 0x300
	TEnumAsByte<EAttachmentRule> 27f0a05e4b; // Offset: 0x301
	TEnumAsByte<EAttachParent> 32106ba5e2; // Offset: 0x320
	TEnumAsByte<EAttachmentRule> 851050bf2e; // Offset: 0x323
// ============================= //
Class AkComponent.SceneComponent.ActorComponent.Object
	FString EarlyReflectionAuxBusName; // Offset: 0x278
	bool bUseReverbVolumes; // Offset: 0x288
	bool bUseSpatialAudio; // Offset: 0x28a
	TEnumAsByte<ECollisionChannel> OcclusionCollisionChannel; // Offset: 0x298
	int EarlyReflectionOrder; // Offset: 0x29c
	bool EnableSpotReflectors; // Offset: 0x2a1
	float EarlyReflectionBusSendGain; // Offset: 0x2a4
	double 0833317ec0; // Offset: 0x2b0
	float AttenuationScalingFactor; // Offset: 0x2b8
	bool DrawFirstOrderReflections; // Offset: 0x2bc
	bool DrawSecondOrderReflections; // Offset: 0x2bc
	bool DrawHigherOrderReflections; // Offset: 0x2bc
	bool DrawDiffraction; // Offset: 0x2bc
	float diffractionMaxPathLength; // Offset: 0x2c0
	float roomReverbAuxBusGain; // Offset: 0x2cc
	float 674df81109; // Offset: 0x39c
	int diffractionMaxEdges; // Offset: 0x3a0
	bool bOcclusionRefreshWhenPostAkEvent; // Offset: 0x3a4
	AkAudioEvent* AkAudioEvent; // Offset: 0x3a8
	float EarlyReflectionMaxPathLength; // Offset: 0x3b0
	int diffractionMaxPaths; // Offset: 0x3b4
	float OcclusionRefreshInterval; // Offset: 0x408
	FString EventName; // Offset: 0x460
	AkAuxBus* EarlyReflectionAuxBus; // Offset: 0x470
// ============================= //
Class AkAudioEvent.Object
	float MaxAttenuationRadius; // Offset: 0x68
	float MinimumDuration; // Offset: 0x6c
	AkAudioBank* RequiredBank; // Offset: 0x70
	float MaximumDuration; // Offset: 0x88
	bool IsInfinite; // Offset: 0x8c
// ============================= //
Class AkAudioBank.Object
	bool AutoLoad; // Offset: 0x68
// ============================= //
Class AkAuxBus.Object
	AkAudioBank* RequiredBank; // Offset: 0x70
// ============================= //
Struct ParticleParameter
	bool bEnableRTPC; // Offset: 0x0
	FName Name; // Offset: 0x4
	Vector Value; // Offset: 0xc
// ============================= //
Enum EAttachParent
	EAttachParent::None = 0,
	EAttachParent::Character = 1,
	EAttachParent::WeaponGun = 2,
	EAttachParent::EAttachParent_MAX = 3;
// ============================= //
Class VehicleDoorComponent.ActorComponent.Object
	TArray<6ce9133da5> 47bf52fc11; // Offset: 0x118
	1165bde75b* 1165bde75b; // Offset: 0x130
	TArray<Actor*> aed4d07fa2; // Offset: 0x138
// ============================= //
Struct 6ce9133da5
	float Health; // Offset: 0x0
	TEnumAsByte<EDoorState> 7b09f22c47; // Offset: 0x10
	TEnumAsByte<EDoorLocationType> ac407542cb; // Offset: 0x11
// ============================= //
Enum EDoorState
	EDoorState::Closed = 0,
	EDoorState::Closing = 1,
	EDoorState::Opened = 2,
	EDoorState::Opening = 3,
	EDoorState::EDoorState_MAX = 4;
// ============================= //
Enum EDoorLocationType
	EDoorLocationType::Door_FL = 0,
	EDoorLocationType::Door_FR = 1,
	EDoorLocationType::Door_BL = 2,
	EDoorLocationType::Door_BR = 3,
	EDoorLocationType::Door_MAX = 4;
// ============================= //
Class 1165bde75b.DataAsset.Object
	MapProperty 82a1f0e932; // Offset: 0x70
	AkAudioEvent* 6b690df954; // Offset: 0xc0
	AkAudioEvent* 745e3f3cf1; // Offset: 0xc8
	AkAudioEvent* fd452cec38; // Offset: 0xd8
	AkAudioEvent* c46fcc4fbd; // Offset: 0x100
// ============================= //
Class DataAsset.Object
	DataAsset* NativeClass; // Offset: 0x68
// ============================= //
Class VehicleCommonComponent.ActorComponent.Object
	MapProperty 029207420d; // Offset: 0x140
	XtrmParticle* 7ed09495e1; // Offset: 0x1a8
	66f5057561* 66f5057561; // Offset: 0x1e8
	TArray<4063052b5c> 4063052b5c; // Offset: 0x1f0
	961e10c956 961e10c956; // Offset: 0x228
	bool 8cc4f0975f; // Offset: 0x260
	bool f95a14c7b6; // Offset: 0x260
	9ac9d4687b* 9ac9d4687b; // Offset: 0x268
	XtrmParticle* efdf6ef005; // Offset: 0x298
	MapProperty eb5ae30cdb; // Offset: 0x2a8
	3b15666bba* 3b15666bba; // Offset: 0x2f8
	XtrmParticle* fe95c766af; // Offset: 0x308
	fb845163cd* e0448eb2b9; // Offset: 0x350
	FName ac417c2dd1; // Offset: 0x35c
	MapProperty 2c26769df8; // Offset: 0x368
	FName 0c422142fd; // Offset: 0x3bc
	Texture2D* 48636acfc9; // Offset: 0x3c8
	TArray<FName> 9d2c3952ce; // Offset: 0x3d0
	float Fuel; // Offset: 0x3e4
	9f784fe77b* 0edbed9c0a; // Offset: 0x3e8
	SkinID e570383faa; // Offset: 0x440
	float Health; // Offset: 0x458
	45dee49130 00b1a85b7e; // Offset: 0x460
// ============================= //
Class 66f5057561.DataAsset.Object
	CurveFloat* 2228ff364d; // Offset: 0x70
	DamageType* e3419ca4ca; // Offset: 0x78
	AkAudioEvent* bf3de8d86b; // Offset: 0x80
	CurveFloat* 5494f2f50d; // Offset: 0x88
// ============================= //
Struct 4063052b5c
	Margin Margin; // Offset: 0x0
	int WheelIndex; // Offset: 0x10
// ============================= //
Struct Margin
	float Left; // Offset: 0x0
	float Top; // Offset: 0x4
	float Right; // Offset: 0x8
	float Bottom; // Offset: 0xc
// ============================= //
Struct 961e10c956
	TEnumAsByte<EHornSoundType> 828982f1a8; // Offset: 0x0
	float 91cef1652e; // Offset: 0x4
	bool b56ffd0fce; // Offset: 0x8
// ============================= //
Enum EHornSoundType
	EHornSoundType::HornOn = 0,
	EHornSoundType::HornOff = 1,
	EHornSoundType::InstantHorn = 2,
	EHornSoundType::EHornSoundType_MAX = 3;
// ============================= //
Class 9ac9d4687b.DataAsset.Object
	FloatRange 401889b4d5; // Offset: 0x74
	DamageType* d7e805cd21; // Offset: 0x88
	XtrmParticle* cdd9456321; // Offset: 0x98
	PhysicalMaterial* f996d6cc09; // Offset: 0xd8
// ============================= //
Struct FloatRange
	5ac5530def LowerBound; // Offset: 0x0
	5ac5530def UpperBound; // Offset: 0x8
// ============================= //
Struct 5ac5530def
	TEnumAsByte<ERangeBoundTypes> Type; // Offset: 0x0
	float Value; // Offset: 0x4
// ============================= //
Class 3b15666bba.DataAsset.Object
	DamageType* e3419ca4ca; // Offset: 0x70
	CurveFloat* aa0c3e80b2; // Offset: 0x80
	Vector2D 3f74aedb36; // Offset: 0x90
	Vector2D 6e8dce3e44; // Offset: 0x98
	CurveFloat* a1ee55f7cf; // Offset: 0xb0
	TArray<Actor*> a5558b56ae; // Offset: 0xb8
	AkAudioEvent* b7f477159e; // Offset: 0xd0
// ============================= //
Class fb845163cd.DataAsset.Object
	2ae045b2be ed017520b1; // Offset: 0x78
	2ae045b2be cfa714a75a; // Offset: 0x88
// ============================= //
Struct 2ae045b2be
	AkAudioEvent* 7aaa798bac; // Offset: 0x0
	AkAudioEvent* d7d6bc50ae; // Offset: 0x8
// ============================= //
Class 9f784fe77b.DataAsset.Object
	CurveFloat* FuelConsumptionCurve; // Offset: 0x70
	float EVWayChargingSpeed; // Offset: 0x78
	AkAudioEvent* InSafetyzoneSound; // Offset: 0x80
	float FuelMax; // Offset: 0x88
	AkAudioEvent* OutSafetyzoneSound; // Offset: 0x90
	float FuelDetractionTime; // Offset: 0x98
	float EVWayChargingDelay; // Offset: 0x9c
	TArray<float> BluezoneDischargingInEngineOn; // Offset: 0xa0
	float FuelConsumptionModifierIdle; // Offset: 0xb0
	float EVWayChargingTickTimer; // Offset: 0xb4
	float FuelEfficiency; // Offset: 0xb8
	bool bIsElectricVehicle; // Offset: 0xbc
	TEnumAsByte<EPhysicalSurface> ChargingSurfaceType; // Offset: 0xbd
	CurveFloat* FuelConsumptionModifierBoost; // Offset: 0xc0
	float BluezoneDischargingInEngineOff; // Offset: 0xc8
// ============================= //
Struct 45dee49130
	SkinDataAsset* b5f4e31b83; // Offset: 0x8
// ============================= //
Class SkinDataAsset.8c272391a6.DataAsset.Object
	SetProperty 8c6da73bf6; // Offset: 0x158
	TEnumAsByte<ESkinType> SkinType; // Offset: 0x1a8
	MapProperty 9a595fc372; // Offset: 0x1b0
	TArray<11e2f8c378> 390a25a815; // Offset: 0x200
	TEnumAsByte<ESkinSlot> b2ef4dabdc; // Offset: 0x210
	SkinSpecialEffectData* SkinSpecialEffectData; // Offset: 0x218
	TEnumAsByte<ESkinCategory> SkinCategory; // Offset: 0x220
// ============================= //
Class 8c272391a6.DataAsset.Object
	f74567c0f7 da45f31303; // Offset: 0x70
// ============================= //
Enum ESkinType
	ESkinType::None = 0,
	ESkinType::AR = 1,
	ESkinType::SR = 2,
	ESkinType::DMR = 3,
	ESkinType::SMG = 4,
	ESkinType::LMG = 5,
	ESkinType::SG = 6,
	ESkinType::HG = 7,
	ESkinType::Melee = 8,
	ESkinType::Throwable = 9,
	ESkinType::Tactical = 10,
	ESkinType::WeaponETC = 11,
	ESkinType::SUV = 12,
	ESkinType::Sedan = 13,
	ESkinType::Buggy = 14,
	ESkinType::Bike = 15,
	ESkinType::Bus = 16,
	ESkinType::Supercar = 17,
	ESkinType::Boat = 18,
	ESkinType::VehicleETC = 19,
	ESkinType::Aircraft = 20,
	ESkinType::Parachute = 21,
	ESkinType::Helmet = 22,
	ESkinType::Backpack = 23,
	ESkinType::ESkinType_MAX = 24;
// ============================= //
Struct f74567c0f7
	bool 3536613085; // Offset: 0x0
	FText ItemName; // Offset: 0x8
	Texture* Icon; // Offset: 0x20
	Texture* 34e9437301; // Offset: 0x60
	FText ItemDescription; // Offset: 0xa0
	TEnumAsByte<EItemQuality> Quality; // Offset: 0xb8
	int Level; // Offset: 0xbc
	UInt32Property ItemId; // Offset: 0xc0
// ============================= //
Enum EItemQuality
	EItemQuality::Legendary = 0,
	EItemQuality::Ultimate = 1,
	EItemQuality::Epic = 2,
	EItemQuality::Elite = 3,
	EItemQuality::Rare = 4,
	EItemQuality::Special = 5,
	EItemQuality::Normal = 6,
	EItemQuality::None = 7,
	EItemQuality::EItemQuality_MAX = 8;
// ============================= //
Struct 11e2f8c378
	Vector LocationOffset; // Offset: 0x0
	TEnumAsByte<ECostumeEffectType> EffectType; // Offset: 0xc
	bool bAbsoluteRotation; // Offset: 0xd
	FName AttachSocketName; // Offset: 0x10
	Rotator RotationOffset; // Offset: 0x18
	ParticleSystem* ParticleSystem; // Offset: 0x28
	Vector ScaleOffset; // Offset: 0x30
// ============================= //
Enum ECostumeEffectType
	ECostumeEffectType::None = 0,
	ECostumeEffectType::Always = 1,
	ECostumeEffectType::MAX = 0;
// ============================= //
Enum ESkinSlot
	ESkinSlot::None = 0,
	ESkinSlot::AKM = 1,
	ESkinSlot::M416 = 2,
	ESkinSlot::SCAR_L = 3,
	ESkinSlot::M16A4 = 4,
	ESkinSlot::Mk47Mutant = 5,
	ESkinSlot::BerylM762 = 6,
	ESkinSlot::AUG = 7,
	ESkinSlot::Groza = 8,
	ESkinSlot::Kar98k = 9,
	ESkinSlot::M24 = 10,
	ESkinSlot::AWM = 11,
	ESkinSlot::DSR = 12,
	ESkinSlot::SKS = 13,
	ESkinSlot::Mk14 = 14,
	ESkinSlot::SLR = 15,
	ESkinSlot::VSS = 16,
	ESkinSlot::Mini = 17,
	ESkinSlot::MicroUZI = 18,
	ESkinSlot::Vector = 19,
	ESkinSlot::PP_19Bizon = 20,
	ESkinSlot::UMP45 = 21,
	ESkinSlot::TommyGun = 22,
	ESkinSlot::M249 = 23,
	ESkinSlot::DP = 24,
	ESkinSlot::S686 = 25,
	ESkinSlot::S1897 = 26,
	ESkinSlot::S12K = 27,
	ESkinSlot::DBS = 28,
	ESkinSlot::Sawed_off = 29,
	ESkinSlot::FlareGun = 30,
	ESkinSlot::RespawnFlareGun = 31,
	ESkinSlot::P92 = 32,
	ESkinSlot::P1911 = 33,
	ESkinSlot::P18C = 34,
	ESkinSlot::Skorpion = 35,
	ESkinSlot::Deagle = 36,
	ESkinSlot::Crossbow = 37,
	ESkinSlot::R1895 = 38,
	ESkinSlot::MeleeSmall = 39,
	ESkinSlot::MeleeMedium = 40,
	ESkinSlot::MeleeLarge = 41,
	ESkinSlot::Pan = 42,
	ESkinSlot::DeployableShield = 43,
	ESkinSlot::ScoutDrone = 44,
	ESkinSlot::ImprovedDeployableShield = 45,
	ESkinSlot::FragGrenade = 46,
	ESkinSlot::SmokeBomb = 47,
	ESkinSlot::Molotov = 48,
	ESkinSlot::Flashbang = 49,
	ESkinSlot::WEAPON_END = 50,
	ESkinSlot::UAZ_HardTop = 51,
	ESkinSlot::UAZ_SoftCover = 52,
	ESkinSlot::UAZ_Open = 53,
	ESkinSlot::Vrion = 54,
	ESkinSlot::VrionT = 55,
	ESkinSlot::Dacia = 56,
	ESkinSlot::Volta = 57,
	ESkinSlot::Master = 58,
	ESkinSlot::Buggy = 59,
	ESkinSlot::EV_AX = 60,
	ESkinSlot::Motorbike = 61,
	ESkinSlot::Motorbike_Sidecar = 62,
	ESkinSlot::Vulture = 63,
	ESkinSlot::Lightening = 64,
	ESkinSlot::Electron = 65,
	ESkinSlot::Nova = 66,
	ESkinSlot::Waverider = 67,
	ESkinSlot::PG117 = 68,
	ESkinSlot::Aquarail = 69,
	ESkinSlot::Motorglider = 70,
	ESkinSlot::Aircraft = 71,
	ESkinSlot::Parachute = 72,
	ESkinSlot::ESkinSlot_MAX = 73;
// ============================= //
Class SkinSpecialEffectData.DataAsset.Object
	0ee95ad77b bc173d6610; // Offset: 0x70
// ============================= //
Struct 0ee95ad77b
	TArray<5102ca97d3> 55cdd2ada0; // Offset: 0x0
	TArray<AkAudioEvent*> 1a0c1c6e21; // Offset: 0x10
	TArray<5102ca97d3> 1e9c9115d3; // Offset: 0x20
	TArray<5102ca97d3> 97b196b8c8; // Offset: 0x30
	TArray<f2065e87d6> d38a0fcc41; // Offset: 0x40
	TArray<XtrmKillfeedSkinBaseWidget*> 3f6c05d035; // Offset: 0x50
// ============================= //
Struct 5102ca97d3
	ParticleSystem* Particle; // Offset: 0x0
	Vector LocalOffset; // Offset: 0x40
// ============================= //
Struct f2065e87d6
	StaticMesh* 40ed4de5a2; // Offset: 0x0
	5102ca97d3 a329f7b8bc; // Offset: 0x40
// ============================= //
Class XtrmKillfeedSkinBaseWidget.XtrmUserWidget.UserWidget.Widget.Visual.Object
	NamedSlot* NS_Content; // Offset: 0x818
	WidgetAnimation* ANIM_OnAppear; // Offset: 0x820
// ============================= //
Class XtrmUserWidget.UserWidget.Widget.Visual.Object
	InputComponent* InputComponentAxis; // Offset: 0x3f8
	TArray<FName> HiddenChildWidgetNames; // Offset: 0x410
	bool bVisibleManageByState; // Offset: 0x810
// ============================= //
Class UserWidget.Widget.Visual.Object
	TArray<c58651d48b> AnimationCallbacks; // Offset: 0x1b8
	MulticastInlineDelegateProperty OnVisibilityChanged; // Offset: 0x1c8
	InputComponent* InputComponent; // Offset: 0x1d8
	311b5c95c2* AnimationTickManager; // Offset: 0x1f0
	TEnumAsByte<EWidgetTickFrequency> TickFrequency; // Offset: 0x200
	DelegateProperty ForegroundColorDelegate; // Offset: 0x230
	WidgetTree* WidgetTree; // Offset: 0x258
	Margin Padding; // Offset: 0x260
	bool bSupportsKeyboardFocus; // Offset: 0x270
	bool bIsFocusable; // Offset: 0x270
	bool bStopAction; // Offset: 0x270
	bool bHasScriptImplementedTick; // Offset: 0x270
	bool bHasScriptImplementedPaint; // Offset: 0x270
	SlateColor ForegroundColor; // Offset: 0x278
	TArray<2a0275ac41*> ActiveSequencePlayers; // Offset: 0x2a0
	int Priority; // Offset: 0x2f0
	LinearColor ColorAndOpacity; // Offset: 0x2f4
	TArray<0261cf5f4e> NamedSlotBindings; // Offset: 0x308
	TArray<2a0275ac41*> StoppedSequencePlayers; // Offset: 0x350
	DelegateProperty ColorAndOpacityDelegate; // Offset: 0x360
// ============================= //
Class Widget.Visual.Object
	WidgetNavigation* Navigation; // Offset: 0x68
	TEnumAsByte<EFlowDirectionPreference> FlowDirectionPreference; // Offset: 0x70
	DelegateProperty ToolTipWidgetDelegate; // Offset: 0x78
	692432eb64* AccessibleWidgetData; // Offset: 0xa0
	TArray<PropertyBinding*> NativeBindings; // Offset: 0xa8
	bool bNoPixelSnapping; // Offset: 0xc8
	DelegateProperty ToolTipTextDelegate; // Offset: 0xcc
	DelegateProperty VisibilityDelegate; // Offset: 0xf4
	bool bIsVariable; // Offset: 0x11c
	bool bCreatedByConstructionScript; // Offset: 0x11c
	bool bIsEnabled; // Offset: 0x11c
	bool bOverride_Cursor; // Offset: 0x11c
	TEnumAsByte<ESlateVisibility> Visibility; // Offset: 0x11d
	bool bIsVolatile; // Offset: 0x11e
	WidgetTransform RenderTransform; // Offset: 0x130
	TEnumAsByte<EMouseCursor> Cursor; // Offset: 0x14c
	PanelSlot* Slot; // Offset: 0x150
	TEnumAsByte<EWidgetClipping> Clipping; // Offset: 0x158
	DelegateProperty bIsEnabledDelegate; // Offset: 0x15c
	Widget* ToolTipWidget; // Offset: 0x188
	Vector2D RenderTransformPivot; // Offset: 0x190
	FText ToolTipText; // Offset: 0x198
// ============================= //
Class Visual.Object
// ============================= //
Struct c58651d48b
	WidgetAnimation* Animation; // Offset: 0x0
	DelegateProperty Delegate; // Offset: 0x8
	TEnumAsByte<EWidgetAnimationEvent> 88f29fa353; // Offset: 0x30
	FName UserTag; // Offset: 0x34
// ============================= //
Class WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene; // Offset: 0xa0
	TArray<989ce5a865> AnimationBindings; // Offset: 0xa8
// ============================= //
Class MovieSceneSequence.MovieSceneSignedObject.Object
	c7e8d8940c* CompiledData; // Offset: 0x90
	TEnumAsByte<EMovieSceneSequenceFlags> 693f2f76f3; // Offset: 0x98
	TEnumAsByte<EMovieSceneCompletionMode> DefaultCompletionMode; // Offset: 0x99
// ============================= //
Class MovieSceneSignedObject.Object
// ============================= //
Class MovieScene.MovieSceneSignedObject.Object
	TArray<MovieSceneBinding> ObjectBindings; // Offset: 0x90
	TArray<9f30e954e7> MarkedFrames; // Offset: 0xa0
	FrameRate DisplayRate; // Offset: 0xb0
	TArray<MovieSceneSpawnable> Spawnables; // Offset: 0xb8
	SoftObjectPath fe02643e90; // Offset: 0xc8
	TArray<MovieScenePossessable> Possessables; // Offset: 0xe0
	TEnumAsByte<EMovieSceneEvaluationType> b7e2b236fc; // Offset: 0xf0
	TArray<MovieSceneTrack*> 3e84d66d8d; // Offset: 0xf8
	MovieSceneTrack* CameraCutTrack; // Offset: 0x108
	FrameRate TickResolution; // Offset: 0x110
	TEnumAsByte<EUpdateClockSource> ClockSource; // Offset: 0x118
	b1fdb8137a 62ea1322a3; // Offset: 0x11c
	b1fdb8137a SelectionRange; // Offset: 0x12c
	MapProperty a04e30f315; // Offset: 0x140
// ============================= //
Struct MovieSceneBinding
	Guid ObjectGuid; // Offset: 0x0
	FString 3013072653; // Offset: 0x10
	TArray<MovieSceneTrack*> Tracks; // Offset: 0x20
// ============================= //
Class MovieSceneTrack.MovieSceneSignedObject.Object
	c42eae0309 c69b2565bc; // Offset: 0x98
	MovieSceneTrackEvalOptions fe6c5c7a9e; // Offset: 0xb8
// ============================= //
Struct c42eae0309
	TArray<64f71ff8ad> Entries; // Offset: 0x0
// ============================= //
Struct 64f71ff8ad
	MovieSceneSection* Section; // Offset: 0x0
	FrameNumberRange Range; // Offset: 0x8
	FrameNumber ForcedTime; // Offset: 0x18
	TEnumAsByte<ESectionEvaluationFlags> Flags; // Offset: 0x1c
	int16_t 6056943cee; // Offset: 0x1e
// ============================= //
Class MovieSceneSection.MovieSceneSignedObject.Object
	ca272fc2ea d9829eb9af; // Offset: 0x9c
	bool bIsActive; // Offset: 0xa8
	bool bIsLocked; // Offset: 0xa8
	b1fdb8137a fb17e85c9f; // Offset: 0xac
	bool bIsInfinite; // Offset: 0xc8
	e11da3bad0 Easing; // Offset: 0xd0
	MovieSceneSectionEvalOptions fe6c5c7a9e; // Offset: 0x108
// ============================= //
Struct ca272fc2ea
	TEnumAsByte<EMovieSceneBlendType> d9829eb9af; // Offset: 0x0
	bool bIsValid; // Offset: 0x1
// ============================= //
Enum EMovieSceneBlendType
	EMovieSceneBlendType::Invalid = 0,
	EMovieSceneBlendType::Absolute = 1,
	EMovieSceneBlendType::Additive = 2,
	EMovieSceneBlendType::Relative = 4,
	EMovieSceneBlendType::AdditiveFromBase = 8,
	EMovieSceneBlendType::EMovieSceneBlendType_MAX = 9;
// ============================= //
Struct b1fdb8137a
// ============================= //
Struct e11da3bad0
	int 4e67efdfab; // Offset: 0x0
	int 03e2405936; // Offset: 0x4
	InterfaceProperty EaseIn; // Offset: 0x8
	bool 3941a9aee2; // Offset: 0x18
	int f288d45ef2; // Offset: 0x1c
	InterfaceProperty EaseOut; // Offset: 0x20
	bool afda955d80; // Offset: 0x30
	int c54c2ebf2e; // Offset: 0x34
// ============================= //
Struct MovieSceneSectionEvalOptions
	bool 9382bb19d6; // Offset: 0x0
	TEnumAsByte<EMovieSceneCompletionMode> ee22a4bcf4; // Offset: 0x1
// ============================= //
Enum EMovieSceneCompletionMode
	EMovieSceneCompletionMode::KeepState = 0,
	EMovieSceneCompletionMode::RestoreState = 1,
	EMovieSceneCompletionMode::ProjectDefault = 2,
	EMovieSceneCompletionMode::EMovieSceneCompletionMode_MAX = 3;
// ============================= //
Struct FrameNumberRange
	38164c6e58 LowerBound; // Offset: 0x0
	38164c6e58 UpperBound; // Offset: 0x8
// ============================= //
Struct 38164c6e58
	TEnumAsByte<ERangeBoundTypes> Type; // Offset: 0x0
	FrameNumber Value; // Offset: 0x4
// ============================= //
Struct FrameNumber
	int Value; // Offset: 0x0
// ============================= //
Enum ESectionEvaluationFlags
	ESectionEvaluationFlags::None = 0,
	ESectionEvaluationFlags::PreRoll = 1,
	ESectionEvaluationFlags::PostRoll = 2,
	ESectionEvaluationFlags::ESectionEvaluationFlags_MAX = 3;
// ============================= //
Struct MovieSceneTrackEvalOptions
	bool 347db26051; // Offset: 0x0
	bool d935246007; // Offset: 0x0
	bool 5b19120513; // Offset: 0x0
	bool fe2649cd58; // Offset: 0x0
	bool bEvaluateNearestSection; // Offset: 0x0
// ============================= //
Struct 9f30e954e7
	FrameNumber FrameNumber; // Offset: 0x0
	FString Label; // Offset: 0x8
// ============================= //
Struct FrameRate
	int Numerator; // Offset: 0x0
	int Denominator; // Offset: 0x4
// ============================= //
Struct MovieSceneSpawnable
	Transform SpawnTransform; // Offset: 0x0
	TArray<FName> Tags; // Offset: 0x30
	bool 58379e58b8; // Offset: 0x40
	bool 8d3aeda88e; // Offset: 0x41
	Guid Guid; // Offset: 0x44
	FString Name; // Offset: 0x58
	Object* 3660d90733; // Offset: 0x68
	TArray<Guid> 45591ba79d; // Offset: 0x70
	TEnumAsByte<ESpawnOwnership> Ownership; // Offset: 0x80
	FName LevelName; // Offset: 0x84
// ============================= //
Enum ESpawnOwnership
	ESpawnOwnership::InnerSequence = 0,
	ESpawnOwnership::MasterSequence = 1,
	ESpawnOwnership::External = 2,
	ESpawnOwnership::ESpawnOwnership_MAX = 3;
// ============================= //
Struct MovieScenePossessable
	TArray<FName> Tags; // Offset: 0x0
	Guid Guid; // Offset: 0x10
	FString Name; // Offset: 0x20
	Object* 217ba5071a; // Offset: 0x30
	Guid ParentGuid; // Offset: 0x38
// ============================= //
Enum EMovieSceneEvaluationType
	EMovieSceneEvaluationType::FrameLocked = 0,
	EMovieSceneEvaluationType::WithSubFrames = 1,
	EMovieSceneEvaluationType::EMovieSceneEvaluationType_MAX = 2;
// ============================= //
Enum EUpdateClockSource
	EUpdateClockSource::Tick = 0,
	EUpdateClockSource::Platform = 1,
	EUpdateClockSource::Audio = 2,
	EUpdateClockSource::RelativeTimecode = 3,
	EUpdateClockSource::Timecode = 4,
	EUpdateClockSource::Custom = 5,
	EUpdateClockSource::EUpdateClockSource_MAX = 6;
// ============================= //
Struct 989ce5a865
	FName WidgetName; // Offset: 0x0
	FName SlotWidgetName; // Offset: 0x8
	Guid AnimationGuid; // Offset: 0x10
	bool bIsRootWidget; // Offset: 0x20
// ============================= //
Class c7e8d8940c.Object
	dca6336d87 2416fb9ecb; // Offset: 0x68
	fca8ac003c Hierarchy; // Offset: 0x1c8
	fc8be3d66b 64ca320659; // Offset: 0x2e0
	3dd79c505c 4410f88bd0; // Offset: 0x3d0
	TArray<FrameTime> 60b0d7805a; // Offset: 0x400
	Guid 7b0a23ad3f; // Offset: 0x410
	Guid CompilerVersion; // Offset: 0x420
	20b5c772ee ad767e54b3; // Offset: 0x430
	20b5c772ee 5e70a17670; // Offset: 0x431
	TEnumAsByte<EMovieSceneSequenceFlags> 2f13968c09; // Offset: 0x432
// ============================= //
Struct dca6336d87
	MapProperty Tracks; // Offset: 0x0
	Guid 4059fe4de6; // Offset: 0xa0
	06f5d29d88 d713916e2b; // Offset: 0xb0
	af16918e50 f7d1421cf2; // Offset: 0xb8
// ============================= //
Struct 06f5d29d88
	UInt32Property Value; // Offset: 0x0
// ============================= //
Struct af16918e50
	3ce57f05b4 9763ce97f9; // Offset: 0x0
	MapProperty d7bece4135; // Offset: 0x8
	MapProperty 9c1db01856; // Offset: 0x58
// ============================= //
Struct 3ce57f05b4
	UInt32Property Value; // Offset: 0x0
// ============================= //
Struct fca8ac003c
	83f0d1a65c RootNode; // Offset: 0x0
	7f369322b2 Tree; // Offset: 0x18
	MapProperty SubSequences; // Offset: 0x78
	MapProperty Hierarchy; // Offset: 0xc8
// ============================= //
Struct 83f0d1a65c
	11d2dd548d ParentID; // Offset: 0x0
	TArray<11d2dd548d> Children; // Offset: 0x8
// ============================= //
Struct 11d2dd548d
	UInt32Property Value; // Offset: 0x0
// ============================= //
Struct 7f369322b2
// ============================= //
Struct fc8be3d66b
	c65664327e 2dd960607c; // Offset: 0x0
	c65664327e 4f3fee11dc; // Offset: 0x60
	TArray<44dee50e90> Entities; // Offset: 0xc0
	TArray<999fc253a8> 0568acd38f; // Offset: 0xd0
	TArray<b2aeda297d> e4a0b0f652; // Offset: 0xe0
// ============================= //
Struct c65664327e
// ============================= //
Struct 44dee50e90
	5ce1105280 Key; // Offset: 0x0
	int c8dc2c804d; // Offset: 0x24
// ============================= //
Struct 5ce1105280
	Object* 6569779b89; // Offset: 0x0
	UInt32Property EntityID; // Offset: 0x20
// ============================= //
Struct 999fc253a8
	FrameNumber ForcedTime; // Offset: 0x0
	TEnumAsByte<ESectionEvaluationFlags> Flags; // Offset: 0x8
	bool 13e73e5eaf; // Offset: 0x9
	bool 7912e64b9d; // Offset: 0x9
// ============================= //
Struct b2aeda297d
	Guid ecc5c2a56a; // Offset: 0x0
// ============================= //
Struct 3dd79c505c
	TArray<b1fdb8137a> Ranges; // Offset: 0x0
	TArray<6df91042b6> Groups; // Offset: 0x10
	TArray<6ec5f12a5a> MetaData; // Offset: 0x20
// ============================= //
Struct 6df91042b6
	TArray<e4b217e851> 062b1bfc6c; // Offset: 0x0
	TArray<94fa26b529> 96aab411a9; // Offset: 0x10
	TArray<6ec70f0400> 0b151edba2; // Offset: 0x20
// ============================= //
Struct e4b217e851
	int 5b642ec5e0; // Offset: 0x0
	int 3f3e1b48e1; // Offset: 0x4
// ============================= //
Struct 94fa26b529
	dfa8985963 38491a0324; // Offset: 0x0
	uint16_t NumChildren; // Offset: 0x8
// ============================= //
Struct dfa8985963
	11d2dd548d SequenceID; // Offset: 0x0
	3ce57f05b4 6e654430be; // Offset: 0x4
// ============================= //
Struct 6ec70f0400
	uint16_t ChildIndex; // Offset: 0x0
	TEnumAsByte<ESectionEvaluationFlags> Flags; // Offset: 0x2
	FrameNumber ForcedTime; // Offset: 0x4
// ============================= //
Struct 6ec5f12a5a
	TArray<11d2dd548d> b6a1ae4430; // Offset: 0x0
	TArray<c57ec075cd> a10809bad1; // Offset: 0x10
// ============================= //
Struct c57ec075cd
	ed4a679dd2 Key; // Offset: 0x0
	uint16_t 070c16424f; // Offset: 0xc
	uint16_t 5b6cc429f1; // Offset: 0xe
// ============================= //
Struct ed4a679dd2
	11d2dd548d SequenceID; // Offset: 0x0
	3ce57f05b4 6e654430be; // Offset: 0x4
	UInt32Property SectionIndex; // Offset: 0x8
// ============================= //
Struct FrameTime
	FrameNumber FrameNumber; // Offset: 0x0
	float SubFrame; // Offset: 0x4
// ============================= //
Struct 20b5c772ee
	bool 0a90c901af; // Offset: 0x0
	bool a83671c8d7; // Offset: 0x0
	bool 769b337363; // Offset: 0x0
	bool d8057386b1; // Offset: 0x0
// ============================= //
Enum EMovieSceneSequenceFlags
	EMovieSceneSequenceFlags::None = 0,
	EMovieSceneSequenceFlags::Volatile = 1,
	EMovieSceneSequenceFlags::BlockingEvaluation = 2,
	EMovieSceneSequenceFlags::InheritedFlags = 1,
	EMovieSceneSequenceFlags::EMovieSceneSequenceFlags_MAX = 3;
// ============================= //
Enum EWidgetAnimationEvent
	EWidgetAnimationEvent::Started = 0,
	EWidgetAnimationEvent::Finished = 1,
	EWidgetAnimationEvent::EWidgetAnimationEvent_MAX = 2;
// ============================= //
Class NamedSlot.ContentWidget.PanelWidget.Widget.Visual.Object
// ============================= //
Class ContentWidget.PanelWidget.Widget.Visual.Object
// ============================= //
Class PanelWidget.Widget.Visual.Object
	TArray<PanelSlot*> Slots; // Offset: 0x1b0
	DelegateProperty ContentColorAndOpacityDelegate; // Offset: 0x1c4
	LinearColor ContentColorAndOpacity; // Offset: 0x1ec
// ============================= //
Class PanelSlot.Visual.Object
	Widget* Content; // Offset: 0x68
	PanelWidget* Parent; // Offset: 0x70
// ============================= //
Class WidgetNavigation.Object
	cd4d2613ff Next; // Offset: 0x68
	cd4d2613ff Previous; // Offset: 0xbc
	cd4d2613ff Down; // Offset: 0x110
	cd4d2613ff Left; // Offset: 0x164
	cd4d2613ff Up; // Offset: 0x1b8
	cd4d2613ff Right; // Offset: 0x20c
// ============================= //
Struct cd4d2613ff
	TEnumAsByte<EUINavigationRule> Rule; // Offset: 0x0
	FName WidgetToFocus; // Offset: 0x4
	Widget* Widget; // Offset: 0xc
	DelegateProperty aa2ccc3603; // Offset: 0x2c
// ============================= //
Enum EUINavigationRule
	EUINavigationRule::Escape = 0,
	EUINavigationRule::Explicit = 1,
	EUINavigationRule::Wrap = 2,
	EUINavigationRule::Stop = 3,
	EUINavigationRule::Custom = 4,
	EUINavigationRule::CustomBoundary = 5,
	EUINavigationRule::Invalid = 6,
	EUINavigationRule::EUINavigationRule_MAX = 7;
// ============================= //
Enum EFlowDirectionPreference
	EFlowDirectionPreference::Inherit = 0,
	EFlowDirectionPreference::Culture = 1,
	EFlowDirectionPreference::LeftToRight = 2,
	EFlowDirectionPreference::RightToLeft = 3,
	EFlowDirectionPreference::EFlowDirectionPreference_MAX = 4;
// ============================= //
Class 692432eb64.Object
	TEnumAsByte<ESlateAccessibleBehavior> AccessibleSummaryBehavior; // Offset: 0x80
	DelegateProperty AccessibleSummaryTextDelegate; // Offset: 0xa0
	TEnumAsByte<ESlateAccessibleBehavior> AccessibleBehavior; // Offset: 0xc8
	DelegateProperty AccessibleTextDelegate; // Offset: 0xcc
// ============================= //
Enum ESlateAccessibleBehavior
	ESlateAccessibleBehavior::NotAccessible = 0,
	ESlateAccessibleBehavior::Auto = 1,
	ESlateAccessibleBehavior::Summary = 2,
	ESlateAccessibleBehavior::Custom = 3,
	ESlateAccessibleBehavior::ToolTip = 4,
	ESlateAccessibleBehavior::ESlateAccessibleBehavior_MAX = 5;
// ============================= //
Class PropertyBinding.Object
	48ea011610 SourcePath; // Offset: 0x68
	Object* 48a14a9214; // Offset: 0x90
	FName c000d0879d; // Offset: 0xb0
// ============================= //
Struct 48ea011610.6a67640e8d
// ============================= //
Struct 6a67640e8d
	TArray<2d6327d112> Segments; // Offset: 0x0
	Function* ce5a5d38ed; // Offset: 0x18
// ============================= //
Struct 2d6327d112
	FName Name; // Offset: 0x0
	int ArrayIndex; // Offset: 0x8
	Struct* Struct; // Offset: 0x10
// ============================= //
Class Struct.Field.Object
// ============================= //
Class Field.Object
// ============================= //
Class Function.Struct.Field.Object
// ============================= //
Enum ESlateVisibility
	ESlateVisibility::Visible = 0,
	ESlateVisibility::Collapsed = 1,
	ESlateVisibility::Hidden = 2,
	ESlateVisibility::HitTestInvisible = 3,
	ESlateVisibility::SelfHitTestInvisible = 4,
	ESlateVisibility::ESlateVisibility_MAX = 5;
// ============================= //
Struct WidgetTransform
	Vector2D Translation; // Offset: 0x0
	Vector2D Scale; // Offset: 0x8
	Vector2D Shear; // Offset: 0x10
	float Angle; // Offset: 0x18
// ============================= //
Enum EWidgetClipping
	EWidgetClipping::Inherit = 0,
	EWidgetClipping::ClipToBounds = 1,
	EWidgetClipping::ClipToBoundsWithoutIntersecting = 2,
	EWidgetClipping::ClipToBoundsAlways = 3,
	EWidgetClipping::OnDemand = 4,
	EWidgetClipping::EWidgetClipping_MAX = 5;
// ============================= //
Class 311b5c95c2.Object
	SetProperty 5dccbb70ff; // Offset: 0x68
	9fa6c99ee9* Linker; // Offset: 0xb8
// ============================= //
Class 9fa6c99ee9.Object
	75f8fba64e d0d29eec52; // Offset: 0x278
// ============================= //
Struct 75f8fba64e
	8f025fc374 Nodes; // Offset: 0x80
// ============================= //
Struct 8f025fc374
// ============================= //
Enum EWidgetTickFrequency
	EWidgetTickFrequency::Never = 0,
	EWidgetTickFrequency::Auto = 1,
	EWidgetTickFrequency::EWidgetTickFrequency_MAX = 2;
// ============================= //
Class WidgetTree.Object
	Widget* RootWidget; // Offset: 0x68
// ============================= //
Struct SlateColor
	LinearColor SpecifiedColor; // Offset: 0x0
	TEnumAsByte<ESlateColorStylingMode> ColorUseRule; // Offset: 0x10
// ============================= //
Enum ESlateColorStylingMode
	ESlateColorStylingMode::UseColor_Specified = 0,
	ESlateColorStylingMode::UseColor_Specified_Link = 1,
	ESlateColorStylingMode::UseColor_Foreground = 2,
	ESlateColorStylingMode::UseColor_Foreground_Subdued = 3,
	ESlateColorStylingMode::UseColor_MAX = 4;
// ============================= //
Class 2a0275ac41.Object
	b91d2b9d16 24cfc64869; // Offset: 0x488
	WidgetAnimation* Animation; // Offset: 0x588
// ============================= //
Struct b91d2b9d16
	MovieSceneSequence* b5187f8d1d; // Offset: 0x0
	4951012bbb* 589483e643; // Offset: 0x20
	9fa6c99ee9* 700f351fe8; // Offset: 0x30
	MapProperty fc00b9a1e7; // Offset: 0xa8
// ============================= //
Class 4951012bbb.Object
	MapProperty 034fbb686e; // Offset: 0x68
	MapProperty b7614ab1d6; // Offset: 0xb8
	MapProperty e3a83e60af; // Offset: 0x118
	MapProperty Hierarchies; // Offset: 0x220
// ============================= //
Struct 0261cf5f4e
	FName Name; // Offset: 0x0
	Widget* Content; // Offset: 0x8
// ============================= //
Enum ESkinCategory
	ESkinCategory::Skin_Equipment = 0,
	ESkinCategory::Skin_Weapon = 1,
	ESkinCategory::Skin_Tactical = 2,
	ESkinCategory::Skin_Parachute = 3,
	ESkinCategory::Skin_Vehicle = 4,
	ESkinCategory::Skin_Transport = 5,
	ESkinCategory::Skin_BackpackAccessory = 6,
	ESkinCategory::Skin_Max = 7,
	ESkinCategory::Skin_None = 7;
// ============================= //
Class SpringArmInVehicleComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
// ============================= //
Class SpringArmComponent.SceneComponent.ActorComponent.Object
	float CameraRotationLagSpeed; // Offset: 0x290
	float CameraLagMaxDistance; // Offset: 0x294
	bool bDoCollisionTest; // Offset: 0x2b0
	bool bUsePawnControlRotation; // Offset: 0x2b0
	bool bInheritPitch; // Offset: 0x2b0
	bool bInheritYaw; // Offset: 0x2b0
	bool bInheritRoll; // Offset: 0x2b0
	bool bEnableCameraLag; // Offset: 0x2b0
	bool bEnableCameraRotationLag; // Offset: 0x2b0
	bool bUseCameraLagSubstepping; // Offset: 0x2b0
	bool bDrawDebugLagMarkers; // Offset: 0x2b1
	float ProbeSize; // Offset: 0x2b4
	Vector SocketOffset; // Offset: 0x2c4
	TEnumAsByte<ECollisionChannel> ProbeChannel; // Offset: 0x2d0
	float TargetArmLength; // Offset: 0x2d4
	float CameraLagSpeed; // Offset: 0x2dc
	Vector TargetOffset; // Offset: 0x2ec
	float CameraLagMaxTimeStep; // Offset: 0x2f8
// ============================= //
Class VehicleSeatComponent.ActorComponent.Object
	TArray<SeatData> 2a0c96c14a; // Offset: 0x1a8
	bool bEntryAngleCheck; // Offset: 0x1b8
	bool bRestrictTargetingRoll; // Offset: 0x1b9
	float MaxTargetingRoll; // Offset: 0x1d4
	TEnumAsByte<ESeatUIType> SeatUIType; // Offset: 0x1f0
	float MinEntryAngle; // Offset: 0x21c
	bool bHasAiming; // Offset: 0x220
	TArray<f72a0f1905> 8e0e9f4315; // Offset: 0x228
// ============================= //
Struct SeatData
	TArray<TEnumAsByte<EWeaponClass>> bb917785a3; // Offset: 0x0
	FName 2d987bade9; // Offset: 0x10
	FName 401d624b64; // Offset: 0x18
	b6766ce2f1* b6766ce2f1; // Offset: 0x20
	int SeatIndex; // Offset: 0x28
	492984fe74* 31e101ec05; // Offset: 0x30
	TEnumAsByte<ERiderType> Type; // Offset: 0x38
	FName Tag; // Offset: 0x3c
	TArray<FName> 5565a70ff2; // Offset: 0x48
// ============================= //
Enum EWeaponClass
	EWeaponClass::Class_None = 0,
	EWeaponClass::Class_Pistol = 1,
	EWeaponClass::Class_SMG = 2,
	EWeaponClass::Class_Rifle = 3,
	EWeaponClass::Class_Carbine = 4,
	EWeaponClass::Class_Shotgun = 5,
	EWeaponClass::Class_Sniper = 6,
	EWeaponClass::Class_DMR = 7,
	EWeaponClass::Class_LMG = 8,
	EWeaponClass::Class_Melee = 9,
	EWeaponClass::Class_Throwable = 10,
	EWeaponClass::Class_Shield = 11,
	EWeaponClass::Class_Crossbow = 12,
	EWeaponClass::Class_Launcher = 13,
	EWeaponClass::Class_Drone = 14,
	EWeaponClass::Class_DeployableShield = 15,
	EWeaponClass::EWeaponClass_MAX = 16;
// ============================= //
Struct VibrateTableRow.TableRowBase
	TEnumAsByte<EVibrateEffectType> EffectType; // Offset: 0x8
	TArray<int> Patterns; // Offset: 0x10
	TArray<int> ec01fc1671; // Offset: 0x20
	FName EffectName; // Offset: 0x30
// ============================= //
Struct TableRowBase
// ============================= //
Enum EVibrateEffectType
	EVibrateEffectType::OnlyPattern = 0,
	EVibrateEffectType::Effect = 1,
	EVibrateEffectType::EVibrateEffectType_MAX = 2;
// ============================= //
Class b6766ce2f1.DataAsset.Object
// ============================= //
Class 492984fe74.DataAsset.Object
	TEnumAsByte<EVehicleAnimType> a003736f61; // Offset: 0x7c
// ============================= //
Enum EVehicleAnimType
	EVehicleAnimType::FourSeat_Driver = 0,
	EVehicleAnimType::FourSeat_Passenger = 1,
	EVehicleAnimType::Buggy_Driver = 2,
	EVehicleAnimType::Buggy_Passenger = 3,
	EVehicleAnimType::Motorbike_Driver = 4,
	EVehicleAnimType::Motorbike_Passenger = 5,
	EVehicleAnimType::Motorbike_Sidecar_Passenger = 6,
	EVehicleAnimType::Boat_Driver = 7,
	EVehicleAnimType::Boat_Passenger = 8,
	EVehicleAnimType::AuqaRail_Driver = 9,
	EVehicleAnimType::AuqaRail_Passenger = 10,
	EVehicleAnimType::Motorglider_Driver = 11,
	EVehicleAnimType::Motorglider_Passenger = 12,
	EVehicleAnimType::BRDM_Driver = 13,
	EVehicleAnimType::EVehicleAnimType_MAX = 14;
// ============================= //
Enum ERiderType
	ERiderType::Driver = 0,
	ERiderType::Passenger = 1,
	ERiderType::ERiderType_MAX = 2;
// ============================= //
Enum ESeatUIType
	ESeatUIType::DefaultSeat = 0,
	ESeatUIType::TwoSeat_Column = 1,
	ESeatUIType::ThreeSeat = 2,
	ESeatUIType::SixSeat = 3,
	ESeatUIType::ESeatUIType_MAX = 4;
// ============================= //
Struct f72a0f1905
	FName SeatTag; // Offset: 0x0
	XtrmCharacter* Passenger; // Offset: 0x8
// ============================= //
Class XtrmCharacter.Character.Pawn.Actor.Object
	b9964f7d6d 012cfff7c4; // Offset: 0x650
	bool 7053ec63cb; // Offset: 0x658
	f02d4d992a* 6e3fc11b23; // Offset: 0x670
	float GroggyDamageWeight; // Offset: 0x6a8
	bool bIsHoldingBreath; // Offset: 0x6ac
	bool 220f7fa9f0; // Offset: 0x7ac
	float RecoveryTimerSecond; // Offset: 0x7b0
	bool bIsInRiver; // Offset: 0x7b4
	996d1675d6 996d1675d6; // Offset: 0x800
	EquipmentComponent* EquipmentComponent; // Offset: 0x8a8
	eeae703230* 69917d8e6d; // Offset: 0x8f0
	FName 78a4b65e6f; // Offset: 0x8f8
	float FootSoundObstructionCheckInterval; // Offset: 0x958
	FName 5335771f07; // Offset: 0x968
	UInt32Property e334ea7a94; // Offset: 0x9a0
	TArray<int> e9fb41bfc5; // Offset: 0x9d0
	bool bServerFinishedVault; // Offset: 0x9e0
	TArray<XtrmPlayerState*> 466702c27f; // Offset: 0x9e8
	TEnumAsByte<ECastAnim> 4383b77261; // Offset: 0xa0c
	bool 8cc4f0975f; // Offset: 0xa25
	CurveFloat* da2cbf5724; // Offset: 0xa28
	TslViewTargetTempComponent* 0808385490; // Offset: 0xa30
	FName 337c86fb8d; // Offset: 0xa44
	Vector VaultEndVelocityVectorMutliplier; // Offset: 0xa58
	DamageType* 813205c5b8; // Offset: 0xa70
	TEnumAsByte<EEquipableItemSoundType> ShoesSoundType; // Offset: 0xaa8
	float VaultEndVelocityVectorClamp; // Offset: 0xac8
	float FootSoundObstructionCheckMaxDistance; // Offset: 0xae8
	int 59b2518ad0; // Offset: 0xaec
	TArray<EquippedEmoteInfo> 246294ea70; // Offset: 0xb38
	ItemPackage* e0f014ea63; // Offset: 0xb48
	AkAudioEvent* 49ec69a104; // Offset: 0xb88
	float 6cfc0f83f2; // Offset: 0xb90
	CurveFloat* 9964752221; // Offset: 0xb98
	TEnumAsByte<EMeleeThrowState> 64ad28bde6; // Offset: 0xba8
	TslVaultingHelper* VaultingHelperRef; // Offset: 0xbc8
	float Health; // Offset: 0xbe4
	uint8_t 23f867eb3d; // Offset: 0xc08
	CurveFloat* 6ef7766c8c; // Offset: 0xc10
	c835d7a808* bd46bd2f98; // Offset: 0xc28
	Rotator BlendTargetViewRotation; // Offset: 0xc34
	float RecoveryBoostGaugeAmount; // Offset: 0xc40
	TEnumAsByte<ECastAnim> CastAnim; // Offset: 0xc44
	af8c01cac6* 8013523938; // Offset: 0xc48
	FName 898717eeb9; // Offset: 0xc54
	AkAudioEvent* 34ff849220; // Offset: 0xc60
	13285a8dd9 0fcdaf6031; // Offset: 0xc90
	CurveFloat* 83c23e2e85; // Offset: 0xd60
	XtrmPawnNoiseEmitterComponent* NoiseEmitterComponent; // Offset: 0xd68
	UInt32Property BitContainerSkipOwnerValue; // Offset: 0xd78
	XtrmParticle* cfaf85447a; // Offset: 0xd80
	bool b89c996ff0; // Offset: 0xd89
	CurveFloat* 05d41a1aca; // Offset: 0xd90
	float NormalSensitivity; // Offset: 0xd98
	bool 7af09dd872; // Offset: 0xdb0
	TArray<int> d0cdf095b4; // Offset: 0xdc0
	uint8_t e9eacd791d; // Offset: 0xe50
	TArray<XtrmParticle*> 59ffcfdc7c; // Offset: 0xe70
	CurveFloat* 1aa77140d7; // Offset: 0xf08
	CurveFloat* 53dcf69485; // Offset: 0xf20
	CurveFloat* 86637c287e; // Offset: 0xf28
	InventoryComponent* InventoryComponent; // Offset: 0xf38
	InteractorComponent* InteractorComponent; // Offset: 0xf48
	CurveFloat* 30928b0fb6; // Offset: 0xf50
	CurveFloat* b554ac055a; // Offset: 0xf68
	FName 974df68c17; // Offset: 0xf70
	Vector 74006cb3df; // Offset: 0xf7c
	TEnumAsByte<EStanceMode> c463d693ae; // Offset: 0xfe4
	bool 2a1dfc3598; // Offset: 0xfed
	AkAudioEvent* 32618a2a9f; // Offset: 0x1008
	c835d7a808* 94db8e924f; // Offset: 0x1010
	Vector e252517390; // Offset: 0x1038
	AkAudioEvent* e8e5aae6ba; // Offset: 0x1048
	float 5079d2afcf; // Offset: 0x1078
	FName 8031e978a1; // Offset: 0x107c
	bool bIsCameraUnderWater; // Offset: 0x10c4
	FName 4671001142; // Offset: 0x10c8
	CurveFloat* b819e2b419; // Offset: 0x10d8
	SpringArmComponent* FirstPersonSpringArm; // Offset: 0x1108
	TslCameraComponent* FirstPersonCamera; // Offset: 0x1110
	TslCharacterSpringArmComponent* ThirdPersonSpringArm; // Offset: 0x1118
	CameraComponent* ThirdPersonCamera; // Offset: 0x1120
	SpringArmComponent* ScopingSpringArm; // Offset: 0x1128
	TslCameraComponent* ScopingCamera; // Offset: 0x1130
	SpringArmComponent* FirstPersonSpringArmInVehicle; // Offset: 0x1138
	TslCameraComponent* FirstPersonCameraInVehicle; // Offset: 0x1140
	SpringArmComponent* ThirdPersonSpringArmInVehicle; // Offset: 0x1148
	TslCameraComponent* ThirdPersonCameraInVehicle; // Offset: 0x1150
	FName 6cdb4b51fe; // Offset: 0x1158
	CurveFloat* 4e7e29fbff; // Offset: 0x1168
	Vector JumpStartLocation_CP; // Offset: 0x11a0
	XtrmBuffComponent* cb30b5e4d3; // Offset: 0x11b0
	FName 2547ccb310; // Offset: 0x11ec
	909a45ab89* CurrentVaultData_CP; // Offset: 0x1200
	float RemoveInvincibleTimeInGroggy; // Offset: 0x122c
	CurveFloat* 2a75a6628a; // Offset: 0x1270
	AkAudioEvent* cd0b999f50; // Offset: 0x1278
	CurveFloat* ffd96d505b; // Offset: 0x1288
	CurveFloat* b9dd4b6051; // Offset: 0x1290
	float VaultingDirection_CP; // Offset: 0x12a0
	c835d7a808* 847c321510; // Offset: 0x12b8
	AimAssistantComponent* AimAssistantComp; // Offset: 0x12c0
	XtrmPlayerState* 568c06a883; // Offset: 0x1310
	CurveFloat* 920bae0c2f; // Offset: 0x1338
	CapsuleComponent* ProneCapsuleComponent; // Offset: 0x1368
	CurveFloat* cffa6ef730; // Offset: 0x13e0
	CurveFloat* 0d476d00d8; // Offset: 0x13e8
	float c8f7fcbefa; // Offset: 0x1404
	float DecreaseBoostGaugeByTime; // Offset: 0x1438
	XtrmCharactersPrivateActor* PrivateActor; // Offset: 0x1460
	CurveFloat* f6343a073c; // Offset: 0x1470
	822123bb88 822123bb88; // Offset: 0x1488
	ParticleSystem* d7b2d20877; // Offset: 0x1550
	TArray<AkAudioBank*> Banks; // Offset: 0x1560
	XtrmHeadDestructEffect* 031d29a8e8; // Offset: 0x1590
	HackReporterComponent* HackReporterComponent; // Offset: 0x15a0
	CurveFloat* def766cc9d; // Offset: 0x15b8
	UpdateCameraComponent* UpdateCameraComponent; // Offset: 0x15c0
	AkAudioEvent* 6c87352e93; // Offset: 0x15d8
	FName f658ff3b1d; // Offset: 0x15e4
	2a93a2b933 6c661dbbc6; // Offset: 0x15f0
	TEnumAsByte<EEquippedWeaponRTPC> 3dfa520318; // Offset: 0x1688
	float DecreaseTimerSecond; // Offset: 0x1698
	CurveFloat* 637012eae6; // Offset: 0x16b8
	WeaponProcessorComponent* d5b401000d; // Offset: 0x16f8
	SoftClassPath ccb5768ae4; // Offset: 0x1700
	float 82acd3158e; // Offset: 0x1718
	AkAudioEvent* d924c1fba0; // Offset: 0x1720
	Vector LandPredictedLocation_CP; // Offset: 0x1728
	PrimitiveComponent* 862f6c856b; // Offset: 0x1738
	FString 0ee43410c4; // Offset: 0x1758
	FString 457ccf2fb4; // Offset: 0x1768
	AutoPickUpComponent* AutoPickUpComponent; // Offset: 0x1778
	CurveFloat* 5556e28e4d; // Offset: 0x1788
	CurveFloat* 7fa8f02e46; // Offset: 0x17a0
	DamageType* GroggyDamageType; // Offset: 0x17e0
	TEnumAsByte<EEquippedWeaponRTPC> af75550f1a; // Offset: 0x17e8
	FName WeaponAttachPoint; // Offset: 0x17ec
	SphereComponent* BulletEffect_Sphere; // Offset: 0x1800
	bool 5c8b5a3b74; // Offset: 0x1828
	VehicleRiderComponent* VehicleRiderComponent; // Offset: 0x1830
	DamageType* RejectDamageType; // Offset: 0x1838
	MapProperty aca32e4d53; // Offset: 0x1840
	FName 94ed8b34c0; // Offset: 0x18a8
	float BoostGauge; // Offset: 0x18c0
	TArray<BuffWithBoostGauge> BuffWithBoostGauge; // Offset: 0x18c8
	SkydiveComponent* 189bbc2c21; // Offset: 0x18d8
	XtrmParticle* ef8bd2c536; // Offset: 0x18e8
	2e3fe0002d 54ad7fd712; // Offset: 0x1910
	CharacterCustomizeComponent* CustomizeComponent; // Offset: 0x19e8
	float HealthMax; // Offset: 0x1a00
	Rotator AimOffsets; // Offset: 0x1a44
	Actor* 844e65e2b9; // Offset: 0x1a90
	FName 0d37fe456e; // Offset: 0x1a9c
	float DecreaseGroggyHealthPerSecond; // Offset: 0x1aa4
	bool bIsVaultingSystemEnabled; // Offset: 0x1aa8
	XtrmParticle* 62c3b0ab2e; // Offset: 0x1ab0
	float 1b88dbbfac; // Offset: 0x1ae0
	DamageType* 06d02a0c26; // Offset: 0x1ae8
	XtrmParticle* 4aea5df012; // Offset: 0x1af0
	XtrmEmoteComponent* EmoteComponent; // Offset: 0x1af8
	bool bIsColdWeather; // Offset: 0x1b00
	MeshComponent* a60e2c0115; // Offset: 0x1b18
	AkAudioEvent* a87cfe143d; // Offset: 0x1b40
	4910149af6 CustomizeData; // Offset: 0x1b4c
	float FallHeight_CP; // Offset: 0x1b80
	98f8084266 fc2270e9fa; // Offset: 0x1bb8
	CurveFloat* ee8d12b34c; // Offset: 0x1c00
	ArrowComponent* AudioListener; // Offset: 0x1c10
	TeamMemberInfo MemberInfo; // Offset: 0x1c18
	bool 44f01cbc61; // Offset: 0x1c20
	XtrmParticle* 927b8a56b4; // Offset: 0x1c38
	FName b06f6118d0; // Offset: 0x1c6c
	float ScopeSensitivity; // Offset: 0x1c74
// ============================= //
Class Character.Pawn.Actor.Object
	XigPtrProperty Mesh; // Offset: 0x360
	XigPtrProperty CharacterMovement; // Offset: 0x380
	XigPtrProperty CapsuleComponent; // Offset: 0x3a0
	TArray<f4613347d4> ad99677162; // Offset: 0x3c0
	float 521c94bada; // Offset: 0x3d4
	float JumpForceTimeRemaining; // Offset: 0x3d8
	4aa4dbdad7 995ca5357d; // Offset: 0x3e0
	int JumpCurrentCountPreJump; // Offset: 0x410
	float 8368d86bad; // Offset: 0x418
	float JumpMaxHoldTime; // Offset: 0x430
	MulticastInlineDelegateProperty OnCharacterMovementUpdated; // Offset: 0x438
	bool bIsCrouched; // Offset: 0x448
	bool aa1a9af05a; // Offset: 0x448
	bool bPressedJump; // Offset: 0x448
	bool 6355be956a; // Offset: 0x448
	bool 1589cc921b; // Offset: 0x448
	bool bb38804d37; // Offset: 0x448
	bool ce39916ab7; // Offset: 0x448
	bool b7060bcf03; // Offset: 0x448
	bool 0bfd2f8144; // Offset: 0x449
	bool 2620e5dfd5; // Offset: 0x449
	bool bWasJumping; // Offset: 0x449
	63b106e4a8 048a5e9b24; // Offset: 0x450
	float JumpKeyHoldTime; // Offset: 0x4a0
	7220e74c05 ee169b50e5; // Offset: 0x4a8
	int JumpMaxCount; // Offset: 0x540
	int JumpCurrentCount; // Offset: 0x544
	MulticastInlineDelegateProperty OnReachedJumpApex; // Offset: 0x548
	RootMotionSourceGroup SavedRootMotion; // Offset: 0x558
	float ProxyJumpForceStartedTime; // Offset: 0x590
	float 398a6e9efd; // Offset: 0x594
	MulticastInlineDelegateProperty MovementModeChangedDelegate; // Offset: 0x598
	uint8_t 9858231e07; // Offset: 0x5a8
	4aa4dbdad7 4d6c5595a0; // Offset: 0x5b8
	float CrouchedEyeHeight; // Offset: 0x5e8
// ============================= //
Struct b9964f7d6d
	float 62f4c71e4c; // Offset: 0x0
	float c23589fa87; // Offset: 0x4
// ============================= //
Struct f4613347d4
	float Time; // Offset: 0x0
	7220e74c05 RootMotion; // Offset: 0x8
// ============================= //
Struct 7220e74c05
	bool bIsActive; // Offset: 0x0
	AnimMontage* AnimMontage; // Offset: 0x8
	float Position; // Offset: 0x10
	Vector_NetQuantize100 Location; // Offset: 0x14
	Rotator Rotation; // Offset: 0x20
	PrimitiveComponent* MovementBase; // Offset: 0x30
	FName 739803cf1c; // Offset: 0x38
	bool d10627b750; // Offset: 0x40
	bool b750d11271; // Offset: 0x41
	RootMotionSourceGroup 5064f28326; // Offset: 0x48
	Vector_NetQuantize10 Acceleration; // Offset: 0x80
	Vector_NetQuantize10 LinearVelocity; // Offset: 0x8c
// ============================= //
Struct RootMotionSourceGroup
	bool 9ca8e0e554; // Offset: 0x28
	bool 7a6736b053; // Offset: 0x28
	bool 1b9dde0a79; // Offset: 0x28
	bool 72f5cdb59e; // Offset: 0x28
	948dba8849 ee204a06ce; // Offset: 0x29
	Vector_NetQuantize10 LastPreAdditiveVelocity; // Offset: 0x2c
// ============================= //
Struct 948dba8849
	uint8_t Flags; // Offset: 0x0
// ============================= //
Struct Vector_NetQuantize10.Vector
// ============================= //
Struct 4aa4dbdad7
	PrimitiveComponent* MovementBase; // Offset: 0x0
	FName BoneName; // Offset: 0x8
	Vector_NetQuantize100 Location; // Offset: 0x10
	Rotator Rotation; // Offset: 0x1c
	bool 60b6ad9b1d; // Offset: 0x28
	bool b750d11271; // Offset: 0x29
	bool 532d750bf1; // Offset: 0x2a
// ============================= //
Struct 63b106e4a8
	bool 55390d6ab1; // Offset: 0x0
	float BlendWeight; // Offset: 0x4
	Transform RootMotionTransform; // Offset: 0x10
// ============================= //
Class f02d4d992a.DataAsset.Object
	261d14da8f e78d17f7dd; // Offset: 0xa0
// ============================= //
Struct 261d14da8f
	TEnumAsByte<EDamageReason> DamageReason; // Offset: 0x0
	float 924b39af2b; // Offset: 0x4
	float 76669278e0; // Offset: 0x8
	TEnumAsByte<EEquipSlotID> b30578c7d8; // Offset: 0xc
	MapProperty 24ade056a7; // Offset: 0x10
	MapProperty ce2bf60d6b; // Offset: 0x60
// ============================= //
Enum EEquipSlotID
	EEquipSlotID::Head = 0,
	EEquipSlotID::Hair = 1,
	EEquipSlotID::Helmet = 2,
	EEquipSlotID::Cap = 3,
	EEquipSlotID::Eyes = 4,
	EEquipSlotID::Torso = 5,
	EEquipSlotID::Hands = 6,
	EEquipSlotID::Legs = 7,
	EEquipSlotID::Feet = 8,
	EEquipSlotID::Top = 9,
	EEquipSlotID::Pants = 10,
	EEquipSlotID::Gloves = 11,
	EEquipSlotID::Shoes = 12,
	EEquipSlotID::Outer = 13,
	EEquipSlotID::Mask = 14,
	EEquipSlotID::Earring = 15,
	EEquipSlotID::Underwear = 16,
	EEquipSlotID::TorsoArmor = 17,
	EEquipSlotID::Backpack = 18,
	EEquipSlotID::ParachuteBag = 19,
	EEquipSlotID::Belt = 20,
	EEquipSlotID::WeaponPrimary = 21,
	EEquipSlotID::WeaponSecondary = 22,
	EEquipSlotID::WeaponMelee = 23,
	EEquipSlotID::WeaponThrowable = 24,
	EEquipSlotID::Merge = 25,
	EEquipSlotID::MaxOrNone = 26,
	EEquipSlotID::EEquipSlotID_MAX = 27;
// ============================= //
Struct 996d1675d6
	bool 49e5a4c0e5; // Offset: 0x20
	float 515b250c2b; // Offset: 0x24
	float 932c780c25; // Offset: 0x48
	float 383ed67ff1; // Offset: 0x6c
	int8_t 768f02dbd1; // Offset: 0x70
	Vector2D e1602838c7; // Offset: 0x74
	float 03c846527e; // Offset: 0x7c
	float 08991de33e; // Offset: 0x80
	int8_t d7f262a414; // Offset: 0xa4
	TEnumAsByte<ERollingSpeedType> cd60ef96c4; // Offset: 0xa5
// ============================= //
Enum ERollingSpeedType
	ERollingSpeedType::Slow = 0,
	ERollingSpeedType::Normal = 1,
	ERollingSpeedType::Fast = 2,
	ERollingSpeedType::None = 3,
	ERollingSpeedType::ERollingSpeedType_MAX = 4;
// ============================= //
Class EquipmentComponent.ActorComponent.Object
	MapProperty 8d4f6c82c8; // Offset: 0x128
	TArray<d43b806f16> 4e959be71e; // Offset: 0x190
	b7925f0475 BackpackAccessory; // Offset: 0x1a0
	TArray<d43b806f16> b15cbe8b0c; // Offset: 0x1b0
// ============================= //
Struct d43b806f16
	SkinID SkinID; // Offset: 0x0
	float 2f8df2d9d0; // Offset: 0x4
	int ItemId; // Offset: 0x8
// ============================= //
Struct b7925f0475
	SkinID 79bd138507; // Offset: 0x0
	SkinID 85979994d5; // Offset: 0x4
	SkinID c3365a631b; // Offset: 0x8
	SkinID BackpackID; // Offset: 0xc
// ============================= //
Class eeae703230.DataAsset.Object
	SkeletalMesh* b6d947cfbf; // Offset: 0x70
	SkeletalMesh* 4960964408; // Offset: 0x78
	SkeletalMesh* 97280afa56; // Offset: 0x80
	TEnumAsByte<EGender> Gender; // Offset: 0x88
	SkeletalMesh* 20bfcd750f; // Offset: 0x90
	SkeletalMesh* 116004b3f4; // Offset: 0x98
	SkeletalMesh* fd1352b692; // Offset: 0xa0
// ============================= //
Enum ECastAnim
	ECastAnim::None = 0,
	ECastAnim::Bandage = 1,
	ECastAnim::FirstAid = 2,
	ECastAnim::Medkit = 3,
	ECastAnim::EnergyDrink = 4,
	ECastAnim::Painkiller = 5,
	ECastAnim::Adrenaline = 6,
	ECastAnim::Door = 7,
	ECastAnim::Syringe = 8,
	ECastAnim::ECastAnim_MAX = 9;
// ============================= //
Class TslViewTargetTempComponent.ActorComponent.Object
	TArray<5a825489eb> a63d9b1f6a; // Offset: 0x108
// ============================= //
Struct 5a825489eb
	SceneComponent* dfeb5a3974; // Offset: 0x8
	SceneComponent* 40b6b40b72; // Offset: 0x38
// ============================= //
Enum EEquipableItemSoundType
	EEquipableItemSoundType::None = 0,
	EEquipableItemSoundType::Vest = 1,
	EEquipableItemSoundType::LongCoat = 2,
	EEquipableItemSoundType::HipSack = 3,
	EEquipableItemSoundType::Cloth = 4,
	EEquipableItemSoundType::BackPack = 5,
	EEquipableItemSoundType::MilitaryShoes = 6,
	EEquipableItemSoundType::Sneakers = 7,
	EEquipableItemSoundType::EEquipableItemSoundType_MAX = 8;
// ============================= //
Struct EquippedEmoteInfo
	uint8_t SlotNum; // Offset: 0x0
	UInt32Property f9d7860d31; // Offset: 0x4
// ============================= //
Class ItemPackage.Actor.Object
	int CreatorUniqueId; // Offset: 0x2c0
	BoxComponent* BoxComponent; // Offset: 0x2c8
	TEnumAsByte<ItemPackageType> ed4476eab3; // Offset: 0x2e0
	ConveyorBase* 11812689ff; // Offset: 0x2e4
	StaticMesh* 47b86bb2d2; // Offset: 0x308
	a1349ffbe6 ItemContainer; // Offset: 0x348
	FString CreatorName; // Offset: 0x378
	FString CreatorAccountId; // Offset: 0x390
	int CreatorTeamId; // Offset: 0x3a0
	AsyncStaticMeshComponent* DropStaticMesh; // Offset: 0x3b0
// ============================= //
Enum ItemPackageType
	ItemPackageType::None = 0,
	ItemPackageType::RootBox = 1,
	ItemPackageType::CarePackage = 2,
	ItemPackageType::DronePackage = 3,
	ItemPackageType::DroppedPackage = 4,
	ItemPackageType::DroppedEventPackage = 5,
	ItemPackageType::ItemPackageType_MAX = 6;
// ============================= //
Class ConveyorBase.Actor.Object
	MaterialInstanceDynamic* MaterialInstanceDynamic; // Offset: 0x2b8
	StaticMeshComponent* StaticMeshComponent; // Offset: 0x2d8
	ConveyorSplineComponent* SplineComponent; // Offset: 0x2f0
// ============================= //
Class MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
// ============================= //
Class MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysicalMaterialMap; // Offset: 0xd0
	bool 5ee945dec0; // Offset: 0x120
	bool bOverrideSubsurfaceProfile; // Offset: 0x120
	TArray<Object*> 2bb79545e1; // Offset: 0x128
	PhysicalMaterial* PhysMaterial; // Offset: 0x150
	TArray<86cfe95fba> TextureParameterValues; // Offset: 0x158
	MaterialInterface* Parent; // Offset: 0x168
	TArray<fae9e151d1> RuntimeVirtualTextureParameterValues; // Offset: 0x170
	65a79bd4e9 9a4ade1ed8; // Offset: 0x188
	TArray<eda82c3285> VectorParameterValues; // Offset: 0x1d8
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides; // Offset: 0x1e8
	TArray<717510dfb2> ScalarParameterValues; // Offset: 0x1f0
	31f1398cc7 451e531814; // Offset: 0x200
	TArray<a250d4e621> FontParameterValues; // Offset: 0x3a0
// ============================= //
Struct 86cfe95fba
	d09d4bd395 ParameterInfo; // Offset: 0x0
	Texture* ParameterValue; // Offset: 0x10
	Guid 8220b2f9fa; // Offset: 0x18
// ============================= //
Struct d09d4bd395
	FName Name; // Offset: 0x0
	TEnumAsByte<EMaterialParameterAssociation> Association; // Offset: 0x8
	int Index; // Offset: 0xc
// ============================= //
Enum EMaterialParameterAssociation
	LayerParameter = 0,
	BlendParameter = 1,
	GlobalParameter = 2,
	EMaterialParameterAssociation_MAX = 3;
// ============================= //
Struct fae9e151d1
	d09d4bd395 ParameterInfo; // Offset: 0x0
	RuntimeVirtualTexture* ParameterValue; // Offset: 0x10
	Guid 8220b2f9fa; // Offset: 0x18
// ============================= //
Struct 65a79bd4e9
	TArray<b1501bfb8d> StaticSwitchParameters; // Offset: 0x0
	TArray<e7efc50c1f> StaticComponentMaskParameters; // Offset: 0x10
	TArray<420c56078b> fbf64c0544; // Offset: 0x20
	TArray<71bcfc0b8a> 1a9b15856b; // Offset: 0x30
// ============================= //
Struct b1501bfb8d.5455fd1413
	bool Value; // Offset: 0x24
// ============================= //
Struct 5455fd1413
	d09d4bd395 ParameterInfo; // Offset: 0x0
	bool bOverride; // Offset: 0x10
	Guid 8220b2f9fa; // Offset: 0x14
// ============================= //
Struct e7efc50c1f.5455fd1413
	bool R; // Offset: 0x24
	bool G; // Offset: 0x25
	bool B; // Offset: 0x26
	bool A; // Offset: 0x27
// ============================= //
Struct 420c56078b.5455fd1413
	int d77dcf95cc; // Offset: 0x24
	bool 0719adaa79; // Offset: 0x28
// ============================= //
Struct 71bcfc0b8a.5455fd1413
	MaterialLayersFunctions Value; // Offset: 0x28
// ============================= //
Struct MaterialLayersFunctions
	TArray<MaterialFunctionInterface*> Layers; // Offset: 0x0
	TArray<MaterialFunctionInterface*> Blends; // Offset: 0x10
	TArray<bool> LayerStates; // Offset: 0x20
	FString KeyString; // Offset: 0x30
// ============================= //
Class MaterialFunctionInterface.Object
	TEnumAsByte<EMaterialFunctionUsage> MaterialFunctionUsage; // Offset: 0x68
// ============================= //
Enum EMaterialFunctionUsage
	EMaterialFunctionUsage::Default = 0,
	EMaterialFunctionUsage::MaterialLayer = 1,
	EMaterialFunctionUsage::MaterialLayerBlend = 2,
	EMaterialFunctionUsage::EMaterialFunctionUsage_MAX = 3;
// ============================= //
Struct eda82c3285
	d09d4bd395 ParameterInfo; // Offset: 0x0
	LinearColor ParameterValue; // Offset: 0x10
	Guid 8220b2f9fa; // Offset: 0x20
// ============================= //
Struct MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue; // Offset: 0x0
	bool bOverride_BlendMode; // Offset: 0x0
	bool bOverride_ShadingModel; // Offset: 0x0
	bool bOverride_DitheredLODTransition; // Offset: 0x0
	bool bOverride_CastDynamicShadowAsMasked; // Offset: 0x0
	bool bOverride_TwoSided; // Offset: 0x0
	bool TwoSided; // Offset: 0x0
	bool DitheredLODTransition; // Offset: 0x0
	bool 497c29ef49; // Offset: 0x1
	TEnumAsByte<EBlendMode> BlendMode; // Offset: 0x2
	TEnumAsByte<EMaterialShadingModel> ShadingModel; // Offset: 0x3
	float OpacityMaskClipValue; // Offset: 0x4
// ============================= //
Enum EBlendMode
	BLEND_Opaque = 0,
	BLEND_Masked = 1,
	BLEND_Translucent = 2,
	BLEND_AfterTranslucent = 3,
	BLEND_Additive = 4,
	BLEND_Modulate = 5,
	BLEND_AlphaComposite = 6,
	BLEND_AlphaHoldout = 7,
	BLEND_MAX = 8;
// ============================= //
Enum EMaterialShadingModel
	MSM_Unlit = 0,
	MSM_DefaultLit = 1,
	MSM_Subsurface = 2,
	MSM_PreintegratedSkin = 3,
	MSM_ClearCoat = 4,
	MSM_SubsurfaceProfile = 5,
	MSM_TwoSidedFoliage = 6,
	MSM_Hair = 7,
	MSM_Cloth = 8,
	MSM_Eye = 9,
	MSM_SingleLayerWater = 10,
	MSM_ThinTranslucent = 11,
	MSM_Extreme_Building = 12,
	MSM_NUM = 13,
	MSM_FromMaterialExpression = 14,
	MSM_MAX = 15;
// ============================= //
Struct 717510dfb2
	d09d4bd395 ParameterInfo; // Offset: 0x0
	float ParameterValue; // Offset: 0x10
	Guid 8220b2f9fa; // Offset: 0x14
// ============================= //
Struct 31f1398cc7
	08a1523fb6 dca71adf63; // Offset: 0x0
	TArray<float> 8045bf2907; // Offset: 0x140
	TArray<LinearColor> 37f129189c; // Offset: 0x150
	TArray<Texture*> e7c8e0d6f3; // Offset: 0x160
	TArray<Font*> 327231c2b4; // Offset: 0x170
	TArray<int> c227044d49; // Offset: 0x180
	TArray<RuntimeVirtualTexture*> 27dc147a4c; // Offset: 0x190
// ============================= //
Struct 08a1523fb6
	TArray<UInt64Property> 5daf0852dc; // Offset: 0x0
	TArray<d09d4bd395> 1612412cbf; // Offset: 0x10
	TArray<Guid> 9858d3e22a; // Offset: 0x20
	TArray<bool> Overrides; // Offset: 0x30
// ============================= //
Struct a250d4e621
	d09d4bd395 ParameterInfo; // Offset: 0x0
	Font* FontValue; // Offset: 0x10
	int FontPage; // Offset: 0x18
	Guid 8220b2f9fa; // Offset: 0x1c
// ============================= //
Class ConveyorSplineComponent.SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
// ============================= //
Class SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector DefaultUpVector; // Offset: 0x534
	bool bDrawDebug; // Offset: 0x540
	InterpCurveFloat SplineReparamTable; // Offset: 0x548
	InterpCurveVector SplineInfo; // Offset: 0x560
	float Duration; // Offset: 0x584
	InterpCurveVector SplineScaleInfo; // Offset: 0x590
	InterpCurveQuat SplineRotInfo; // Offset: 0x5b0
	cb76d195d2 cb76d195d2; // Offset: 0x5d0
	bool bInputSplinePointsToConstructionScript; // Offset: 0x640
	bool bStationaryEndpoints; // Offset: 0x641
// ============================= //
Struct InterpCurveFloat
	TArray<InterpCurvePointFloat> Points; // Offset: 0x0
	bool bIsLooped; // Offset: 0x10
	float LoopKeyOffset; // Offset: 0x14
// ============================= //
Struct InterpCurvePointFloat
	float InVal; // Offset: 0x0
	float OutVal; // Offset: 0x4
	float ArriveTangent; // Offset: 0x8
	float LeaveTangent; // Offset: 0xc
	TEnumAsByte<EInterpCurveMode> InterpMode; // Offset: 0x10
// ============================= //
Struct InterpCurveQuat
	TArray<InterpCurvePointQuat> Points; // Offset: 0x0
	bool bIsLooped; // Offset: 0x10
	float LoopKeyOffset; // Offset: 0x14
// ============================= //
Struct InterpCurvePointQuat
	float InVal; // Offset: 0x0
	Quat OutVal; // Offset: 0x10
	Quat ArriveTangent; // Offset: 0x20
	Quat LeaveTangent; // Offset: 0x30
	TEnumAsByte<EInterpCurveMode> InterpMode; // Offset: 0x40
// ============================= //
Struct cb76d195d2
	InterpCurveVector Position; // Offset: 0x0
	InterpCurveQuat Rotation; // Offset: 0x18
	InterpCurveVector Scale; // Offset: 0x30
	InterpCurveFloat f9cc531f99; // Offset: 0x48
	19abbabaac* MetaData; // Offset: 0x60
	UInt32Property Version; // Offset: 0x68
// ============================= //
Class 19abbabaac.Object
// ============================= //
Struct a1349ffbe6
	TArray<885eb072c8> 722b141513; // Offset: 0x0
	TArray<247d26c63a> EquipItemList; // Offset: 0x10
	TArray<5ac1fda6d7> 318a013545; // Offset: 0x20
// ============================= //
Enum EMeleeThrowState
	EMeleeThrowState::Idle = 0,
	EMeleeThrowState::Prepare = 1,
	EMeleeThrowState::Throw = 2,
	EMeleeThrowState::EMeleeThrowState_MAX = 3;
// ============================= //
Class TslVaultingHelper.Actor.Object
	SceneComponent* RootSceneComponent; // Offset: 0x2b8
	SceneComponent* ActorAttachScene; // Offset: 0x2c0
// ============================= //
Class c835d7a808.CurveBase.Object
	RichCurve 1cfa8d3a9e; // Offset: 0x70
// ============================= //
Struct 13285a8dd9
	MapProperty 40585d0a45; // Offset: 0x0
	bool IsActive; // Offset: 0x50
	MapProperty 5902283ecf; // Offset: 0x58
// ============================= //
Class XtrmPawnNoiseEmitterComponent.PawnNoiseEmitterComponent.ActorComponent.Object
// ============================= //
Class PawnNoiseEmitterComponent.ActorComponent.Object
	bool 5a29830c9b; // Offset: 0x101
	float NoiseLifetime; // Offset: 0x114
// ============================= //
Class InventoryComponent.ActorComponent.Object
	b0af56e956 d0055ee829; // Offset: 0x110
	float 00c655e6a0; // Offset: 0x190
	b0af56e956 1558f32efd; // Offset: 0x1b0
	float 4f68182130; // Offset: 0x1e0
	TArray<5b6fb7dd63> 323e809d57; // Offset: 0x1e8
	TArray<d048d74253> 25963d26bf; // Offset: 0x1f8
	TArray<b7925f0475> b54e1b04c9; // Offset: 0x230
	int 708c1540fd; // Offset: 0x240
	TArray<1c463063d7> 69d903772b; // Offset: 0x268
	655ba46074 8748dc40fe; // Offset: 0x288
	TArray<69047fceb9> e317155d57; // Offset: 0x2a0
// ============================= //
Struct b0af56e956
	TArray<5b6fb7dd63> ItemContainer; // Offset: 0x0
// ============================= //
Struct 5b6fb7dd63
	bool 430dd04352; // Offset: 0x0
	int16_t df64501bcc; // Offset: 0x2
	ItemInstance Item; // Offset: 0x4
// ============================= //
Struct d048d74253
	UInt32Property SkinID; // Offset: 0x0
	TEnumAsByte<ESkinCategory> SkinCategory; // Offset: 0x4
	TArray<UInt32Property> 8c6da73bf6; // Offset: 0x8
// ============================= //
Struct 1c463063d7
	bool bLocked; // Offset: 0x0
	TArray<59c05b3c56> 2006be65a7; // Offset: 0x8
	int PresetId; // Offset: 0x18
// ============================= //
Struct 59c05b3c56
	TArray<int> ea3ccc254f; // Offset: 0x0
	TEnumAsByte<EEquipSlotID> SlotID; // Offset: 0x10
	int ItemId; // Offset: 0x14
	TEnumAsByte<ESkinCategory> SkinCategory; // Offset: 0x18
// ============================= //
Struct 655ba46074
	TArray<XigPtrProperty> Weapons; // Offset: 0x0
	TEnumAsByte<EAccessorySlot> 9026335912; // Offset: 0x10
// ============================= //
Enum EAccessorySlot
	EAccessorySlot::Slot_Primary = 0,
	EAccessorySlot::Slot_Secondary = 1,
	EAccessorySlot::Slot_SideArm = 2,
	EAccessorySlot::Slot_Melee = 3,
	EAccessorySlot::Slot_Thrown = 4,
	EAccessorySlot::Slot_Max = 5,
	EAccessorySlot::None = 5,
	EAccessorySlot::EAccessorySlot_MAX = 6;
// ============================= //
Struct 69047fceb9
	int 18445664ba; // Offset: 0x0
	TArray<UInt32Property> fdb056d3cf; // Offset: 0x8
	TArray<UInt32Property> fc855416f1; // Offset: 0x18
// ============================= //
Class InteractorComponent.ActorComponent.Object
	CastingContext CastingContext; // Offset: 0x118
// ============================= //
Struct CastingContext
	float UpdateTickTime; // Offset: 0x0
	TEnumAsByte<ECastingCancelReason> 0152bf270c; // Offset: 0x4
	float 8df3787aa6; // Offset: 0x8
	float 7a5d3ea0c9; // Offset: 0x20
	int 00cc6306e0; // Offset: 0x38
	FName 37047a7e0a; // Offset: 0x3c
	float ef0a365eb1; // Offset: 0x48
	bool 67661310d3; // Offset: 0x60
	int RepeatTimes; // Offset: 0x64
	bool 79b00bb948; // Offset: 0x68
	Object* Target; // Offset: 0x70
// ============================= //
Enum ECastingCancelReason
	ECastingCancelReason::None = 0,
	ECastingCancelReason::ManualCancel = 1,
	ECastingCancelReason::Interrupt = 2,
	ECastingCancelReason::HigherPriority = 3,
	ECastingCancelReason::PlayerInput = 4,
	ECastingCancelReason::PlayerState = 5,
	ECastingCancelReason::SprintStart = 6,
	ECastingCancelReason::Revive = 7,
	ECastingCancelReason::Revive_Fail = 8,
	ECastingCancelReason::Crafting_Fail = 9,
	ECastingCancelReason::HealItem_Fail = 10,
	ECastingCancelReason::VehicleCharging_Fail = 11,
	ECastingCancelReason::StartFire = 12,
	ECastingCancelReason::AttachableFire = 13,
	ECastingCancelReason::WeaponChange = 14,
	ECastingCancelReason::Reload = 15,
	ECastingCancelReason::Aim = 16,
	ECastingCancelReason::ADS = 17,
	ECastingCancelReason::MoveVehicleSeat = 18,
	ECastingCancelReason::PickUp = 19,
	ECastingCancelReason::MeleeThrow = 20,
	ECastingCancelReason::UseDrone = 21,
	ECastingCancelReason::DeployShield = 22,
	ECastingCancelReason::ECastingCancelReason_MAX = 23;
// ============================= //
Enum EStanceMode
	EStanceMode::STANCE_None = 0,
	EStanceMode::STANCE_Stand = 1,
	EStanceMode::STANCE_Crouch = 2,
	EStanceMode::STANCE_Prone = 3,
	EStanceMode::STANCE_MAX = 4;
// ============================= //
Class TslCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
// ============================= //
Class TslCharacterSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	Vector 9f87d515fd; // Offset: 0x3bc
	Vector 2091f457a9; // Offset: 0x3c8
	Vector cf7d944a4b; // Offset: 0x3e8
	Vector d8dc292cc9; // Offset: 0x3f4
	CurveFloat* b2af489989; // Offset: 0x408
	CurveFloat* 516b246f70; // Offset: 0x478
// ============================= //
Class XtrmBuffComponent.ActorComponent.Object
	TArray<XtrmBuff*> 606b677871; // Offset: 0x108
// ============================= //
Class XtrmBuff.Actor.Object
	bool 4c18db8677; // Offset: 0x2b8
	TEnumAsByte<EBuffOverlapSolveMethod> daeca51e73; // Offset: 0x2b9
	Vector 782d45ea27; // Offset: 0x2bc
	bool c4c6157ccc; // Offset: 0x2cc
	float cdfabf6c85; // Offset: 0x2f0
	FName bcd1801e2e; // Offset: 0x2f4
	float f3edd7b25c; // Offset: 0x2fc
	bool 25bb53a7a4; // Offset: 0x300
	bool c54178b822; // Offset: 0x301
	FName OverlapId; // Offset: 0x314
	float aefc9a38f2; // Offset: 0x31c
// ============================= //
Enum EBuffOverlapSolveMethod
	EBuffOverlapSolveMethod::IgnoreLater = 0,
	EBuffOverlapSolveMethod::Overwrite = 1,
	EBuffOverlapSolveMethod::RestartTimer = 2,
	EBuffOverlapSolveMethod::Stack = 3,
	EBuffOverlapSolveMethod::EBuffOverlapSolveMethod_MAX = 4;
// ============================= //
Class 909a45ab89.DataAsset.Object
	1ca25afd37 1ca25afd37; // Offset: 0x70
// ============================= //
Struct 1ca25afd37
	float VaultEndTimerFall; // Offset: 0x0
	float MaxCancelVTimer; // Offset: 0x4
	TEnumAsByte<EVaultAnimType> VaultAnimType; // Offset: 0x8
	float LocationStartNormalScale; // Offset: 0xc
	float CustomApex; // Offset: 0x10
	float PreApexSpeedScale; // Offset: 0x14
	Vector2D PlayrateBySpeed_OutMap_PostApex; // Offset: 0x18
	CurveFloat* AnimationCurve; // Offset: 0x20
	Vector CharacterPostVaultVelocityScalarVector; // Offset: 0x28
	float MappedDampeningVTimerMax; // Offset: 0x34
	Vector2D StartCutoffBySpeed_InMap; // Offset: 0x38
	AnimSequenceBase* AnimationSequence; // Offset: 0x40
	float LedgeGrabStartTraceDownDistance; // Offset: 0x48
	float AdditiveZOffsetStartVTime; // Offset: 0x4c
	bool bIsCancellable; // Offset: 0x50
	float StaticDampeningScalar; // Offset: 0x54
	float DBNOExitApexTime; // Offset: 0x58
	float TaskEndVTimer; // Offset: 0x5c
	bool bUseCustomApexForTimer; // Offset: 0x60
	float AnimBlendInTime; // Offset: 0x64
	float VaultInitialTimer; // Offset: 0x68
	float PostVaultTimerProgressionScale; // Offset: 0x6c
	float StaticDampeningVTimerMax; // Offset: 0x70
	float ApexAdditiveEndTime; // Offset: 0x74
	a4af6e1499 604e126177; // Offset: 0x78
	float TimerProgressionVTimerMax; // Offset: 0x148
	float MinCancelVTimer; // Offset: 0x14c
	AnimSequenceBase* AnimationSequence_Rifle_FPP; // Offset: 0x150
	Vector2D StartCutoffByDistance_OutMap; // Offset: 0x158
	float VaultEndTimerNormal; // Offset: 0x160
	AnimSequenceBase* AnimationSequence_FPP; // Offset: 0x168
	Vector2D TimerProgressionByDistanceInMap; // Offset: 0x170
	float ApexAdditiveStartTime; // Offset: 0x178
	float PostApexSpeedScale; // Offset: 0x17c
	bool bIsClimb; // Offset: 0x180
	Vector2D TimerProgressionByDistanceOutMap; // Offset: 0x184
	bool bCanVaultWithWeapon; // Offset: 0x18c
	float LocationEndZOffset; // Offset: 0x190
	Vector2D CharLocationInterpSpeedOutMap; // Offset: 0x194
	float VaultEndToFallTimerCutoff; // Offset: 0x19c
	bool bUseStaticVTimerDampening; // Offset: 0x1a0
	Vector2D PlayrateBySpeed_InMap_PostApex; // Offset: 0x1a4
	Vector2D PlayrateBySpeed_OutMap_PreApex; // Offset: 0x1ac
	bool bUseMappedVTimerDampening; // Offset: 0x1b4
	float CharacterPostVaultVelocityScalar; // Offset: 0x1b8
	float DirectionInterpSpeed; // Offset: 0x1bc
	float MappedDampeningScalar; // Offset: 0x1c0
	Vector2D CharLocationInterpSpeedInMap; // Offset: 0x1c4
	float LocationStartZOffset; // Offset: 0x1cc
	Vector2D PlayrateBySpeed_InMap_PreApex; // Offset: 0x1d0
	bool bIsSlide; // Offset: 0x1d8
	int MoveIndex; // Offset: 0x1dc
	float AnimBlendOutTime; // Offset: 0x1e0
	AnimSequenceBase* AnimationSequence_Rifle; // Offset: 0x1e8
	Vector2D StartCutoffByDistance_InMap; // Offset: 0x1f0
	Vector CharacterPostVaultVelocityScalarVector_ToFall; // Offset: 0x1f8
	Vector2D StartCutoffBySpeed_OutMap; // Offset: 0x204
	float LocationEndNormalScale; // Offset: 0x20c
	float ClimbEndWithApexZEndVTime; // Offset: 0x210
// ============================= //
Enum EVaultAnimType
	EVaultAnimType::VaultNone = 0,
	EVaultAnimType::Vault200_Stationary = 1,
	EVaultAnimType::Vault200_Mobile = 2,
	EVaultAnimType::Vault200_Narrow = 3,
	EVaultAnimType::Vault160_Stationary = 4,
	EVaultAnimType::Vault160_Mobile = 5,
	EVaultAnimType::Vault160_Narrow = 6,
	EVaultAnimType::Vault120_Stationary = 7,
	EVaultAnimType::Vault120_Mobile = 8,
	EVaultAnimType::Vault120_Slide = 9,
	EVaultAnimType::Vault120_Narrow = 10,
	EVaultAnimType::Vault90_Stationary = 11,
	EVaultAnimType::Vault90_Mobile = 12,
	EVaultAnimType::Vault90_Slide = 13,
	EVaultAnimType::Vault90_Narrow = 14,
	EVaultAnimType::Climb200_Stationary = 15,
	EVaultAnimType::Climb200_Mobile = 16,
	EVaultAnimType::Climb200_Slide = 17,
	EVaultAnimType::Climb200_Narrow = 18,
	EVaultAnimType::Climb160_Stationary = 19,
	EVaultAnimType::Climb160_Mobile = 20,
	EVaultAnimType::Climb160_Slide = 21,
	EVaultAnimType::Climb160_Narrow = 22,
	EVaultAnimType::Climb120_Stationary = 23,
	EVaultAnimType::Climb120_Mobile = 24,
	EVaultAnimType::Climb120_Slide = 25,
	EVaultAnimType::Climb120_Narrow = 26,
	EVaultAnimType::Climb90_Stationary = 27,
	EVaultAnimType::Climb90_Mobile = 28,
	EVaultAnimType::Climb90_Slide = 29,
	EVaultAnimType::Climb90_Narrow = 30,
	EVaultAnimType::Vault90Roll = 31,
	EVaultAnimType::Vault120Window = 32,
	EVaultAnimType::Vault60_Stationary = 33,
	EVaultAnimType::Vault60_Mobile = 34,
	EVaultAnimType::Vault60_Slide = 35,
	EVaultAnimType::Vault60_Narrow = 36,
	EVaultAnimType::Climb60_Stationary = 37,
	EVaultAnimType::Climb60_Mobile = 38,
	EVaultAnimType::Climb60_Narrow = 39,
	EVaultAnimType::LedgeGrab_Up_Climb = 40,
	EVaultAnimType::LedgeGrab_Up_Climb_Swing = 41,
	EVaultAnimType::LedgeGrab_Up_Climb_HalfSwing = 42,
	EVaultAnimType::LedgeGrab_Up_Vault = 43,
	EVaultAnimType::LedgeGrab_Up_Vault_Swing = 44,
	EVaultAnimType::LedgeGrab_Up_Vault_HalfSwing = 45,
	EVaultAnimType::LedgeGrab_High_Climb = 46,
	EVaultAnimType::LedgeGrab_High_Climb_Swing = 47,
	EVaultAnimType::LedgeGrab_High_Climb_HalfSwing = 48,
	EVaultAnimType::LedgeGrab_High_Vault = 49,
	EVaultAnimType::LedgeGrab_High_Vault_Swing = 50,
	EVaultAnimType::LedgeGrab_High_Vault_HalfSwing = 51,
	EVaultAnimType::LedgeGrab_Low_Climb = 52,
	EVaultAnimType::LedgeGrab_Low_Climb_Swing = 53,
	EVaultAnimType::LedgeGrab_Low_Climb_HalfSwing = 54,
	EVaultAnimType::LedgeGrab_Low_Vault = 55,
	EVaultAnimType::LedgeGrab_Low_Vault_Swing = 56,
	EVaultAnimType::LedgeGrab_Low_Vault_HalfSwing = 57,
	EVaultAnimType::LedgeGrab_Low_Vault_Narrow = 58,
	EVaultAnimType::LedgeGrab_Low_Vault_HalfSwing_Narrow = 59,
	EVaultAnimType::LedgeGrab_Low_Vault_Swing_Narrow = 60,
	EVaultAnimType::LedgeGrab_High_Vault_Narrow = 61,
	EVaultAnimType::LedgeGrab_High_Vault_HalfSwing_Narrow = 62,
	EVaultAnimType::LedgeGrab_High_Vault_Swing_Narrow = 63,
	EVaultAnimType::LedgeGrab_Up_Vault_Narrow = 64,
	EVaultAnimType::LedgeGrab_Up_Vault_HalfSwing_Narrow = 65,
	EVaultAnimType::LedgeGrab_Up_Vault_Swing_Narrow = 66,
	EVaultAnimType::EVaultAnimType_MAX = 67;
// ============================= //
Struct a4af6e1499
	TEnumAsByte<EVaultRequirementType> IsVault; // Offset: 0x0
	Int32Range LedgeRange; // Offset: 0x4
	TEnumAsByte<EVaultRequirementType> IsClimb; // Offset: 0x14
	c94998ef10 ExecConfig; // Offset: 0x18
	Int32Range FreeSpaceRange; // Offset: 0x78
	FloatRange CapsuleRelativeRange; // Offset: 0x88
	TEnumAsByte<EVaultRequirementType> IsSlide; // Offset: 0x98
	Int32Range RowRange; // Offset: 0x9c
	TEnumAsByte<EVaultRequirementType> IsLedgeGrab; // Offset: 0xac
	TEnumAsByte<EVaultRequirementType> IsNarrow; // Offset: 0xad
	FloatRange ZSpeedRange; // Offset: 0xb0
	FloatRange SpeedRange; // Offset: 0xc0
// ============================= //
Enum EVaultRequirementType
	EVaultRequirementType::VaultReqType_False = 0,
	EVaultRequirementType::VaultReqType_True = 1,
	EVaultRequirementType::VaultReqType_Any = 2,
	EVaultRequirementType::VaultReqType_MAX = 3;
// ============================= //
Struct c94998ef10
	float MinExecutionDOT; // Offset: 0xc
	Vector2D AnticipationMapIn; // Offset: 0x10
	Vector2D AnticipationMapOut; // Offset: 0x18
	float AnticipationDistance; // Offset: 0x20
	float ExecutionDistance; // Offset: 0x24
	FloatRange ExecutionZRange; // Offset: 0x28
	AnimSequenceBase* AnticipationAnim; // Offset: 0x38
	bool bUse3DDistance; // Offset: 0x4c
	bool bUseAnticipationAnim; // Offset: 0x54
	bool bUseAnimStartForDistance; // Offset: 0x55
	CurveFloat* AnticipationAnimCurve; // Offset: 0x58
// ============================= //
Class AimAssistantComponent.ActorComponent.Object
	TArray<FName> AimPoints_Priority3; // Offset: 0x160
	TArray<FName> AimPoints_Priority2; // Offset: 0x178
	float SimpleTargetReachDistance3D; // Offset: 0x194
	TArray<FName> AimPoints_Priority1; // Offset: 0x1a0
	float AimAssistDuration; // Offset: 0x214
	float SimpleTargetReachDistance2D; // Offset: 0x218
	float AimAssistPointRescanInvertal; // Offset: 0x21c
	float FindTargetInvertal; // Offset: 0x2c0
	TArray<FName> AimPoints_Priority0; // Offset: 0x2e0
// ============================= //
Struct 822123bb88
	CharacterBreathBuff* 40d4e2fe21; // Offset: 0x0
	CharacterBreathBuff* adab3ff3d3; // Offset: 0x8
	CharacterBreathBuff* db7ece7ba0; // Offset: 0x48
	Vector 338b0dd2d7; // Offset: 0x50
	Vector 7f72e81f4e; // Offset: 0x5c
	Vector d2e9684671; // Offset: 0x68
	b9964f7d6d 77e151522e; // Offset: 0x74
	Vector b2171eab95; // Offset: 0x7c
	CharacterBreathBuff* 0924a8e418; // Offset: 0x90
	float 9883b59b3c; // Offset: 0x98
	CharacterBreathBuff* 4a81909ff9; // Offset: 0xb0
	b9964f7d6d 2207cf9013; // Offset: 0xb8
// ============================= //
Class CharacterBreathBuff.XtrmBuff.Actor.Object
// ============================= //
Class XtrmHeadDestructEffect.Actor.Object
	TArray<3e76a351da> f319ab7b54; // Offset: 0x2d8
	TArray<StaticMeshComponent*> StaticMeshComponents; // Offset: 0x2f0
// ============================= //
Struct 3e76a351da
	TArray<StaticMesh*> Meshes; // Offset: 0x0
// ============================= //
Class HackReporterComponent.ActorComponent.Object
// ============================= //
Class UpdateCameraComponent.ActorComponent.Object
// ============================= //
Struct 2a93a2b933
	XtrmPlayerState* e4c98b62fb; // Offset: 0x0
	Vector_NetQuantize 74ad2ab374; // Offset: 0x20
	uint8_t 3eac75538c; // Offset: 0x2c
	DamageType* DamageType; // Offset: 0x30
	XtrmCharacter* 814fa9113d; // Offset: 0x38
	bool 50b1279544; // Offset: 0x58
	bool 8ba00aba6b; // Offset: 0x59
	bool 7817931f5b; // Offset: 0x5a
	Actor* a42c39f83f; // Offset: 0x5c
	FName BoneName; // Offset: 0x7c
	uint8_t d5f0aa411e; // Offset: 0x84
	uint8_t 2ae7013287; // Offset: 0x85
	float ActualDamage; // Offset: 0x88
	Object* 6b2162203d; // Offset: 0x90
// ============================= //
Enum EEquippedWeaponRTPC
	EEquippedWeaponRTPC::None = 0,
	EEquippedWeaponRTPC::HandBomb_Bottle = 1,
	EEquippedWeaponRTPC::HandBomb_Metal = 2,
	EEquippedWeaponRTPC::Melee = 3,
	EEquippedWeaponRTPC::Pistol = 4,
	EEquippedWeaponRTPC::SMG = 5,
	EEquippedWeaponRTPC::AR = 6,
	EEquippedWeaponRTPC::SR = 7,
	EEquippedWeaponRTPC::Max = 8;
// ============================= //
Class WeaponProcessorComponent.ActorComponent.Object
	TArray<Actor*> e1d9262d80; // Offset: 0x108
	2b3e383f22 2b3e383f22; // Offset: 0x119
	MulticastInlineDelegateProperty OnEquippedWeaponsReplicated; // Offset: 0x180
// ============================= //
Struct 2b3e383f22
	TEnumAsByte<EAccessorySlot> 3f4c8efe52; // Offset: 0x0
// ============================= //
Class AutoPickUpComponent.ActorComponent.Object
	TArray<ItemPackage*> beddb2939a; // Offset: 0x118
	TArray<DroppedItem*> 13e6c74bd5; // Offset: 0x138
	TArray<DroppedItem*> 1fa7d982f3; // Offset: 0x150
// ============================= //
Class VehicleRiderComponent.ActorComponent.Object
	FName SeatTag; // Offset: 0x1f8
// ============================= //
Struct BuffWithBoostGauge
	float BoostGauge; // Offset: 0x0
	FName OverlapId; // Offset: 0x4
	XtrmBuff* Buff; // Offset: 0x10
// ============================= //
Class SkydiveComponent.ActorComponent.Object
	205b5c9db4 f0b8689494; // Offset: 0x120
	XtrmCharacterMovementComponent* 93572c8f1b; // Offset: 0x1a0
	float 8ba4b02bd9; // Offset: 0x1a8
	7db5f8c907 6bcedeaa04; // Offset: 0x4a0
	float 37685ed6b6; // Offset: 0x4f4
	float 0045c07494; // Offset: 0x4f8
	float 60e1c75c72; // Offset: 0x4fc
	TEnumAsByte<ESkydiveState> SkydiveState; // Offset: 0x500
	TEnumAsByte<EParachuteCutoffState> f2060bca8e; // Offset: 0x501
	bool 610f21acb9; // Offset: 0x502
	bool b372d22f91; // Offset: 0x502
	float ParachuteFixedPitch; // Offset: 0x504
	23700d184e 67002dee7d; // Offset: 0x53c
	9d768a7da1 d0e69a81d5; // Offset: 0x558
	587d3ab400 ea446aa292; // Offset: 0x56c
	FreefallVelocitySettings FreefallVelocitySettings; // Offset: 0x58c
	c2c09a19b6 75cb5ac5f7; // Offset: 0x598
	502a85672f InputSettings; // Offset: 0x5c8
	8b0b9497e1 8b0b9497e1; // Offset: 0x5f8
	493644f9a1 493644f9a1; // Offset: 0x6c0
	3329c9bf53 3329c9bf53; // Offset: 0x700
	float 1c108190dd; // Offset: 0x77c
	float c95375ae07; // Offset: 0x780
	445ae7a96c 445ae7a96c; // Offset: 0x784
	64e55acb7a 64e55acb7a; // Offset: 0x790
	d2398569d9 d2398569d9; // Offset: 0x7dc
	2469ed839b LandSettings; // Offset: 0x800
	7487330f75 7487330f75; // Offset: 0x818
	Vector2D 0bcdcd314e; // Offset: 0x840
	Vector2D 67db54bcf7; // Offset: 0x848
	ef1ea0d67d ef1ea0d67d; // Offset: 0x850
	71f89b03ab 71f89b03ab; // Offset: 0x8a8
	04e4cbe0f4 DamageSettings; // Offset: 0x920
	int 0f3ffb305d; // Offset: 0x968
	int 74c2f8da41; // Offset: 0x96c
	float 8b38a5dce5; // Offset: 0x970
	float 7b29132727; // Offset: 0x974
	int be0f420d2d; // Offset: 0x978
	float 9f531e3241; // Offset: 0x97c
	float c8fc14c64d; // Offset: 0x980
	float d07eed18d4; // Offset: 0x984
	SkeletalMeshComponent* ParachuteSKReference; // Offset: 0x988
	ParticleSystemComponent* FreefallParticleRef; // Offset: 0x990
	ParticleSystemComponent* ParachuteTrailParticleRef; // Offset: 0x998
	AkComponent* AkComponentRef; // Offset: 0x9a0
	float 27c193531c; // Offset: 0x9a8
	59a7d11de8 59a7d11de8; // Offset: 0x9ac
	MatineeCameraShake* 819c74b84b; // Offset: 0x9b8
	AnimMontage* 870df31add; // Offset: 0x9c0
	float c2b6f242e2; // Offset: 0xa30
	float 5bf81c2887; // Offset: 0xa34
	float 1cca70c338; // Offset: 0xa38
	Rotator 1bb1994663; // Offset: 0xa3c
	bool 4f596e06e2; // Offset: 0xa48
	SkinID e570383faa; // Offset: 0xa8c
// ============================= //
Struct 205b5c9db4
	float 576850f65c; // Offset: 0x0
	bool 271ebe1091; // Offset: 0x4
	AnimMontage* de27ef673c; // Offset: 0x8
	AnimMontage* a62831011f; // Offset: 0x10
	AnimMontage* 04b117a12f; // Offset: 0x18
	float 0094163be4; // Offset: 0x20
	TEnumAsByte<EParachuteLandingSurfaceType> cbe2c5fced; // Offset: 0x24
	FName cd04be0dcd; // Offset: 0x28
// ============================= //
Enum EParachuteLandingSurfaceType
	EParachuteLandingSurfaceType::Surface_None = 0,
	EParachuteLandingSurfaceType::Surface_Vertical = 1,
	EParachuteLandingSurfaceType::Surface_Horizontal = 2,
	EParachuteLandingSurfaceType::Surface_MAX = 3;
// ============================= //
Class XtrmCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float WaveRidingModifier; // Offset: 0xc74
	Vector2D MaxVaultDistanceByVelocityInMap; // Offset: 0xc7c
	float RecoveryWalkSpeedRatePerSec; // Offset: 0xc90
	Rotator MaxUnderwaterSwimmingRotationRate; // Offset: 0xc94
	a9e0e1d115 CurrentVaultingTask; // Offset: 0xcbc
	float PronedHalfHeight; // Offset: 0xd50
	CurveFloat* 12afa18952; // Offset: 0xd98
	Vector2D MaxVaultDistanceByVelocityOutMap; // Offset: 0xda0
	float AnimMultiplierPreApex; // Offset: 0xdc0
	float MaxJumpZVelocity; // Offset: 0xdd8
	float PronedRadius; // Offset: 0xde4
	float SizeForNarrow; // Offset: 0xde8
	int SizeForSlide; // Offset: 0xdf0
	float JumpVelocityLossScale; // Offset: 0xe08
	Rotator MaxSwimmingRotationRate; // Offset: 0xe10
	float LastVaultTime; // Offset: 0xe20
	Vector AveragedVelocity; // Offset: 0xe24
	float LandingJumpDecreaseModifier; // Offset: 0xe60
	bool 19235a3e07; // Offset: 0xe80
	a85f62c6b1 e963d56e31; // Offset: 0xe88
	float ProneAlignementThreshold; // Offset: 0x15dc
	VaultingSettings* VaultingSettings; // Offset: 0x15e0
	909a45ab89* CurrentVaultingData; // Offset: 0x1618
	float MaxUnderwaterSwimSpeed; // Offset: 0x1620
	Rotator SwimmingRotationAcceleration; // Offset: 0x1624
	Rotator UnderwaterSwimmingRotationAcceleration; // Offset: 0x1720
	float VaultCancelAnimSpeed; // Offset: 0x1734
	TEnumAsByte<EMovementMode> DefaultVehicleMovementMode; // Offset: 0x1738
	float MaxGroggySpeed; // Offset: 0x1760
	float WalkSpeedModifierUnit; // Offset: 0x176c
	bool bIsVaulting_CP; // Offset: 0x1784
	Vector2D 8919a8b942; // Offset: 0x17a8
	Vector2D fc5e0fec33; // Offset: 0x17b0
	Vector2D 5983351986; // Offset: 0x17b8
	Vector2D e815fc9d72; // Offset: 0x17c0
	Vector LastVaultLocation; // Offset: 0x17c8
	float MaxSwimAcceleration; // Offset: 0x17d4
	DamageType* e2d26e467f; // Offset: 0x17e0
	float BrakingDecelerationUnderwaterSwimming; // Offset: 0x17ec
	Vector 71503120dd; // Offset: 0x17f0
	bool bWantsToCancelVault; // Offset: 0x1800
	Vector 50700d7ef1; // Offset: 0x1804
	Vector CharacterRelLocation; // Offset: 0x1810
	float WaveRidingModifierUnderWater; // Offset: 0x1820
	float MaxProneSpeed; // Offset: 0x1824
	float AnimMultiplierPostApex; // Offset: 0x1828
	float SpeedInWaterModifier; // Offset: 0x1830
	float WaveRidingSmoothingFactor; // Offset: 0x1834
	float StayingUnderWaterDepthBand; // Offset: 0x1838
	float MinWalkSpeedModifier; // Offset: 0x184c
	float MaxUnderwaterSwimAcceleration; // Offset: 0x1878
	float MaxZSpeedOutOfWaterModifier; // Offset: 0x1898
	float VaultCancelDTScalar; // Offset: 0x18a4
	d689d194af* d689d194af; // Offset: 0x18b0
	float V_Timer_CP; // Offset: 0x18b8
// ============================= //
Class CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxCustomMovementSpeed; // Offset: 0x1a8
	float MaxDepenetrationWithGeometry; // Offset: 0x1ac
	int MaxJumpApexAttemptsPerSimulation; // Offset: 0x1b0
	float MaxDepenetrationWithPawn; // Offset: 0x1c4
	float MaxDepenetrationWithGeometryAsProxy; // Offset: 0x1c8
	float BrakingSubStepTime; // Offset: 0x1cc
	float PerchAdditionalHeight; // Offset: 0x1d0
	float MinAnalogWalkSpeed; // Offset: 0x2a0
	float Mass; // Offset: 0x2a4
	float AvoidanceWeight; // Offset: 0x2a8
	uint8_t CustomMovementMode; // Offset: 0x2ac
	RootMotionSourceGroup CurrentRootMotion; // Offset: 0x2b8
	float JumpOffJumpZFactor; // Offset: 0x2f0
	int AvoidanceUID; // Offset: 0x2f8
	float BrakingDecelerationFalling; // Offset: 0x2fc
	float 6f64e15bca; // Offset: 0x320
	float GroundFriction; // Offset: 0x324
	float AirControl; // Offset: 0x328
	float AirControlBoostMultiplier; // Offset: 0x32c
	float MaxOutOfWaterStepHeight; // Offset: 0x330
	float MaxDepenetrationWithPawnAsProxy; // Offset: 0x348
	33a6fe1a64 GroupsToIgnore; // Offset: 0x34c
	TEnumAsByte<EMovementMode> DefaultLandMovementMode; // Offset: 0x350
	float TouchForceFactor; // Offset: 0x354
	bool bUseSeparateBrakingFriction; // Offset: 0x380
	bool bApplyGravityWhileJumping; // Offset: 0x380
	bool bUseControllerDesiredRotation; // Offset: 0x380
	bool bOrientRotationToMovement; // Offset: 0x380
	bool bSweepWhileNavWalking; // Offset: 0x380
	bool 0d0f471296; // Offset: 0x380
	bool 0491cd4c97; // Offset: 0x380
	bool 6fd9c18e39; // Offset: 0x381
	bool bForceMaxAccel; // Offset: 0x381
	bool bRunPhysicsWithNoController; // Offset: 0x381
	bool bForceNextFloorCheck; // Offset: 0x381
	bool 9ecbc4fefe; // Offset: 0x381
	bool bCanWalkOffLedges; // Offset: 0x381
	bool bCanWalkOffLedgesWhenCrouching; // Offset: 0x381
	bool bNetworkSkipProxyPredictionOnNetUpdate; // Offset: 0x382
	bool 982c390410; // Offset: 0x382
	bool 86013a31bf; // Offset: 0x382
	bool bEnablePhysicsInteraction; // Offset: 0x382
	bool bTouchForceScaledToMass; // Offset: 0x382
	bool bPushForceScaledToMass; // Offset: 0x382
	bool bPushForceUsingZOffset; // Offset: 0x382
	bool bScalePushForceToVelocity; // Offset: 0x383
	float MaxTouchForce; // Offset: 0x388
	float BrakingDecelerationSwimming; // Offset: 0x38c
	TEnumAsByte<EMovementOptimizeMode> OptimizeMode; // Offset: 0x390
	float NavMeshProjectionHeightScaleUp; // Offset: 0x394
	float Buoyancy; // Offset: 0x3a4
	Vector c64ac8388a; // Offset: 0x3a8
	TEnumAsByte<EMovementMode> GroundMovementMode; // Offset: 0x3b4
	float NavMeshProjectionInterval; // Offset: 0x3d4
	float MaxSimulationTimeStep; // Offset: 0x4a0
	float CrouchedHalfHeight; // Offset: 0x4a4
	d57e5289a1 1b891b3e62; // Offset: 0x4b0
	float d49684b809; // Offset: 0x500
	float MaxWalkSpeed; // Offset: 0x504
	float MaxSwimSpeed; // Offset: 0x50c
	float NavMeshProjectionInterpSpeed; // Offset: 0x510
	float PerchRadiusThreshold; // Offset: 0x514
	TEnumAsByte<EMovementMode> MovementMode; // Offset: 0x518
	3af8176a5e CurrentFloor; // Offset: 0x51c
	float RepulsionForce; // Offset: 0x5fc
	33a6fe1a64 AvoidanceGroup; // Offset: 0x604
	float BrakingFriction; // Offset: 0x608
	float JumpZVelocity; // Offset: 0x610
	float OutofWaterZ; // Offset: 0x614
	SceneComponent* 4d06d6810a; // Offset: 0x620
	float MaxWalkSpeedCrouched; // Offset: 0x628
	float InitialPushForceFactor; // Offset: 0x638
	33a6fe1a64 GroupsToAvoid; // Offset: 0x650
	float MaxStepHeight; // Offset: 0x654
	TEnumAsByte<EMovementMode> DefaultWaterMovementMode; // Offset: 0x660
	float LedgeCheckThreshold; // Offset: 0x664
	bool bMaintainHorizontalGroundVelocity; // Offset: 0x728
	bool bImpartBaseVelocityX; // Offset: 0x728
	bool bImpartBaseVelocityY; // Offset: 0x728
	bool bImpartBaseVelocityZ; // Offset: 0x728
	bool bImpartBaseAngularVelocity; // Offset: 0x728
	bool bJustTeleported; // Offset: 0x728
	bool 399afcdf50; // Offset: 0x728
	bool 92c9f96378; // Offset: 0x728
	bool bIgnoreClientMovementErrorChecksAndCorrection; // Offset: 0x729
	bool bServerAcceptClientAuthoritativePosition; // Offset: 0x729
	bool bNotifyApex; // Offset: 0x729
	bool 9130b6f6a7; // Offset: 0x729
	bool bWantsToCrouch; // Offset: 0x729
	bool bCrouchMaintainsBaseLocation; // Offset: 0x729
	bool bIgnoreBaseRotation; // Offset: 0x729
	bool f936e16d5a; // Offset: 0x729
	bool bAlwaysCheckFloor; // Offset: 0x72a
	bool bUseFlatBaseForFloorChecks; // Offset: 0x72a
	bool 23232bf689; // Offset: 0x72a
	bool d6e265e619; // Offset: 0x72a
	bool bUseRVOAvoidance; // Offset: 0x72a
	bool bRequestedMoveUseAcceleration; // Offset: 0x72a
	bool a334491427; // Offset: 0x72a
	bool bAllowPhysicsRotationDuringAnimRootMotion; // Offset: 0x72b
	bool 24173e0b1a; // Offset: 0x72b
	bool 2d53a86b12; // Offset: 0x72b
	bool e213b32803; // Offset: 0x72b
	bool bProjectNavMeshWalking; // Offset: 0x72b
	bool bProjectNavMeshOnBothWorldChannels; // Offset: 0x72b
	float BrakingDecelerationWalking; // Offset: 0x72c
	float StandingDownwardForceScale; // Offset: 0x730
	float MaxFlySpeed; // Offset: 0x740
	float PushForceFactor; // Offset: 0x744
	float MinTouchForce; // Offset: 0x748
	RootMotionSourceGroup d45383f786; // Offset: 0x750
	float MaxAcceleration; // Offset: 0x788
	Rotator RotationRate; // Offset: 0x78c
	TEnumAsByte<ENetworkSmoothingMode> NetworkSmoothingMode; // Offset: 0x798
	float FallingLateralFriction; // Offset: 0x7a0
	float AvoidanceConsiderationRadius; // Offset: 0x878
	Vector a53a17752e; // Offset: 0x888
	float df6a2dcee8; // Offset: 0x8a8
	float NavWalkingFloorDistTolerance; // Offset: 0x8ac
	float GravityScale; // Offset: 0x928
	63b106e4a8 df8692b2f9; // Offset: 0x940
	float JumpOutOfWaterPitch; // Offset: 0x998
	float 3e77041fbd; // Offset: 0x99c
	int MaxSimulationIterations; // Offset: 0x9a0
	float BrakingFrictionFactor; // Offset: 0x9a8
	float NavMeshProjectionHeightScaleDown; // Offset: 0xa64
	float PushForcePointZOffsetFactor; // Offset: 0xa68
	float AirControlBoostVelocityThreshold; // Offset: 0xa6c
	float BrakingDecelerationFlying; // Offset: 0xa70
// ============================= //
Struct a9e0e1d115
	Vector V_Apex; // Offset: 0x0
	Vector V_End; // Offset: 0xc
	Vector BaseWorldLoc; // Offset: 0x18
	float AdditiveEndZOffset; // Offset: 0x24
	Vector V_ApexAdditive; // Offset: 0x28
	float DistanceFromObject; // Offset: 0x34
	TEnumAsByte<EVaultAnimType> InVaultType; // Offset: 0x38
	bool bEndToFall; // Offset: 0x39
	float Direction; // Offset: 0x3c
	Vector V_Start; // Offset: 0x44
	float PlayerSpeed; // Offset: 0x50
	PrimitiveComponent* BaseComp; // Offset: 0x54
	Rotator BaseWorldDir; // Offset: 0x74
// ============================= //
Struct 33a6fe1a64
	bool bGroup0; // Offset: 0x0
	bool bGroup1; // Offset: 0x0
	bool bGroup2; // Offset: 0x0
	bool bGroup3; // Offset: 0x0
	bool bGroup4; // Offset: 0x0
	bool bGroup5; // Offset: 0x0
	bool bGroup6; // Offset: 0x0
	bool bGroup7; // Offset: 0x0
	bool bGroup8; // Offset: 0x1
	bool bGroup9; // Offset: 0x1
	bool bGroup10; // Offset: 0x1
	bool bGroup11; // Offset: 0x1
	bool bGroup12; // Offset: 0x1
	bool bGroup13; // Offset: 0x1
	bool bGroup14; // Offset: 0x1
	bool bGroup15; // Offset: 0x1
	bool bGroup16; // Offset: 0x2
	bool bGroup17; // Offset: 0x2
	bool bGroup18; // Offset: 0x2
	bool bGroup19; // Offset: 0x2
	bool bGroup20; // Offset: 0x2
	bool bGroup21; // Offset: 0x2
	bool bGroup22; // Offset: 0x2
	bool bGroup23; // Offset: 0x2
	bool bGroup24; // Offset: 0x3
	bool bGroup25; // Offset: 0x3
	bool bGroup26; // Offset: 0x3
	bool bGroup27; // Offset: 0x3
	bool bGroup28; // Offset: 0x3
	bool bGroup29; // Offset: 0x3
	bool bGroup30; // Offset: 0x3
	bool bGroup31; // Offset: 0x3
// ============================= //
Enum EMovementMode
	MOVE_None = 0,
	MOVE_Walking = 1,
	MOVE_NavWalking = 2,
	MOVE_Falling = 3,
	MOVE_Swimming = 4,
	MOVE_Flying = 5,
	MOVE_Vaulting = 6,
	MOVE_Custom = 7,
	MOVE_MAX = 8;
// ============================= //
Enum EMovementOptimizeMode
	MoveOptimize_None = 0,
	MoveOptimize_Simulated = 1,
	MoveOptimize_Distanced = 2,
	MoveOptimize_InvisibleButClose = 3,
	MoveOptimize_Invisible = 4,
	MoveOptimize_MAX = 5;
// ============================= //
Struct d57e5289a1.7a1a2c8098
// ============================= //
Struct 3af8176a5e
	bool bBlockingHit; // Offset: 0x0
	bool bWalkableFloor; // Offset: 0x0
	bool bLineTrace; // Offset: 0x0
	float FloorDist; // Offset: 0x4
	float LineDist; // Offset: 0x8
	HitResult HitResult; // Offset: 0xc
// ============================= //
Enum ENetworkSmoothingMode
	ENetworkSmoothingMode::Disabled = 0,
	ENetworkSmoothingMode::Linear = 1,
	ENetworkSmoothingMode::Exponential = 2,
	ENetworkSmoothingMode::Replay = 3,
	ENetworkSmoothingMode::ENetworkSmoothingMode_MAX = 4;
// ============================= //
Struct a85f62c6b1
	9675120c27 16d62dcbd0; // Offset: 0x50
// ============================= //
Struct 9675120c27
	Vector End; // Offset: 0x0
	Vector Apex; // Offset: 0xc
	c94998ef10 ExecConfig; // Offset: 0x18
	float Direction; // Offset: 0x78
	int MoveIndex; // Offset: 0x7c
	float DistanceFromObject; // Offset: 0x80
	Vector ApexAdditive; // Offset: 0x84
	float PlayerSpeed2D; // Offset: 0x90
	TEnumAsByte<EVaultAnimType> VaultType; // Offset: 0x94
	f0f5feee9b HitData; // Offset: 0x98
	bool bIsPassed; // Offset: 0x6e0
	bool bIsClimbing; // Offset: 0x6e0
	bool bIsEndToFall; // Offset: 0x6e0
	float AdditiveEndZOffset; // Offset: 0x6e4
	Vector Start; // Offset: 0x6e8
// ============================= //
Struct f0f5feee9b
// ============================= //
Class VaultingSettings.DataAsset.Object
	int ClimbFinderMaxSteps_Vault; // Offset: 0x70
	TArray<909a45ab89*> 093273cbd7; // Offset: 0x78
	int ClimbFinderMaxSteps_LedgeGrab; // Offset: 0x88
	float GlobalVaultSpeedScale; // Offset: 0x8c
// ============================= //
Class d689d194af.DataAsset.Object
	496b09cf6e 496b09cf6e; // Offset: 0x70
// ============================= //
Struct 496b09cf6e
	float decd523280; // Offset: 0x0
	TArray<e751f4e224> 570594fbf3; // Offset: 0x8
	TArray<e751f4e224> 701f4c133c; // Offset: 0x18
	float f07129e834; // Offset: 0x28
	float 6802d29d4d; // Offset: 0x2c
	TArray<e751f4e224> 6305b474d1; // Offset: 0x30
	float d108c6b854; // Offset: 0x40
	TArray<e357cbe7bf> 92cf10e093; // Offset: 0x48
// ============================= //
Struct e751f4e224
	TEnumAsByte<ERollingDirection> b1a39b57d8; // Offset: 0x0
	AnimMontage* AnimMontage; // Offset: 0x8
	c835d7a808* 2705bdff47; // Offset: 0x10
// ============================= //
Enum ERollingDirection
	ERollingDirection::Forward = 0,
	ERollingDirection::Forward_Right = 1,
	ERollingDirection::Right = 2,
	ERollingDirection::Backward_Right = 3,
	ERollingDirection::Backward = 4,
	ERollingDirection::Backward_Left = 5,
	ERollingDirection::Left = 6,
	ERollingDirection::Forward_Left = 7,
	ERollingDirection::Max = 8,
	ERollingDirection::None = 8;
// ============================= //
Struct e357cbe7bf
	TEnumAsByte<ERollingSpeedType> Type; // Offset: 0x0
	float From; // Offset: 0x4
	float To; // Offset: 0x8
// ============================= //
Struct 7db5f8c907
	Vector_NetQuantize10 Position; // Offset: 0x0
	uint16_t 9b808bec32; // Offset: 0xc
	9c084461f6 InputData; // Offset: 0x10
	Rotator Rotation; // Offset: 0x30
	Vector_NetQuantize10 Velocity; // Offset: 0x3c
// ============================= //
Struct 9c084461f6
	float CurrentPitch; // Offset: 0x0
	float CurrentRoll; // Offset: 0x4
	bool 2135f4ef9a; // Offset: 0x8
	float 3f41bc6723; // Offset: 0xc
	float 11fff6356a; // Offset: 0x10
	float a3ba04ee59; // Offset: 0x14
	float 6f92e1f3a6; // Offset: 0x18
	float 7eac402984; // Offset: 0x1c
// ============================= //
Enum ESkydiveState
	ESkydiveState::Skydive_None = 0,
	ESkydiveState::Skydive_Freefall = 1,
	ESkydiveState::Skydive_ParachuteDeploying = 2,
	ESkydiveState::Skydive_ParachuteDeployed = 3,
	ESkydiveState::Skydive_ParachuteCollapsing = 4,
	ESkydiveState::Skydive_MAX = 5;
// ============================= //
Enum EParachuteCutoffState
	EParachuteCutoffState::Cutoff_None = 0,
	EParachuteCutoffState::Cutoff_Manual = 1,
	EParachuteCutoffState::Cutoff_Automatic = 2,
	EParachuteCutoffState::Cutoff_Ready = 3,
	EParachuteCutoffState::Cutoff_MAX = 4;
// ============================= //
Struct 23700d184e
	bool 70695c8a2f; // Offset: 0x0
	float f9ab384a2b; // Offset: 0x4
	float 77b86d3809; // Offset: 0x8
	float 9378b7b091; // Offset: 0xc
	float c75a0cbcc4; // Offset: 0x10
	bool 18e2e15e1a; // Offset: 0x14
	float b6c2bc43f5; // Offset: 0x18
// ============================= //
Struct 9d768a7da1
	float c6b4446e81; // Offset: 0x0
	float 9f7a30a592; // Offset: 0x4
	float 3a0919b015; // Offset: 0x8
	float 1ebcaa931f; // Offset: 0xc
	float DragScale; // Offset: 0x10
// ============================= //
Struct 587d3ab400
	float 6c2454a3bc; // Offset: 0x0
	Vector2D fbd16b780b; // Offset: 0x4
	Vector2D ecdc1e844f; // Offset: 0xc
	float d62cf9fb21; // Offset: 0x14
	Vector2D 280ba3aacd; // Offset: 0x18
// ============================= //
Struct FreefallVelocitySettings
	float 6017df8f51; // Offset: 0x0
	float SpeedMax; // Offset: 0x4
	float 59437f8d5d; // Offset: 0x8
// ============================= //
Struct c2c09a19b6
	Vector2D 98b7ffd1ce; // Offset: 0x0
	Vector2D 9443c5959f; // Offset: 0x8
	Vector2D 49b7d7931f; // Offset: 0x10
	float 6399f066ab; // Offset: 0x18
	Vector2D 8637801080; // Offset: 0x1c
	Vector2D 87601fcd96; // Offset: 0x24
	float b1ddcdee99; // Offset: 0x2c
// ============================= //
Struct 502a85672f
	bool 9f1fd7dea9; // Offset: 0x0
	float b96b46b93c; // Offset: 0x4
	float 385d19c15f; // Offset: 0x8
	float 5e58e54230; // Offset: 0xc
	float 4de6593911; // Offset: 0x10
	float 3a4dd8601b; // Offset: 0x14
	float cc7630e1f4; // Offset: 0x18
	bool 32d024d0d0; // Offset: 0x1c
	bool 754698db74; // Offset: 0x1d
	float 85e57b7702; // Offset: 0x20
	float 687e56fabc; // Offset: 0x24
	bool fffd67997c; // Offset: 0x28
	float 3b25eb6f10; // Offset: 0x2c
// ============================= //
Struct 8b0b9497e1
	SkeletalMesh* 1071172c1e; // Offset: 0x0
	Vector 116b847ccc; // Offset: 0x8
	float e9a2cd6f7f; // Offset: 0x14
	float 774646f580; // Offset: 0x18
	AnimInstance* 4f2f50a2e7; // Offset: 0x20
	float f160ab2910; // Offset: 0x28
	float aa93f1844a; // Offset: 0x2c
	float 5902e1ecfd; // Offset: 0x30
	PhysicsAsset* 26ab1fc39a; // Offset: 0x38
	Rotator 2f61789d45; // Offset: 0x40
	float afcc427ebb; // Offset: 0x4c
	float 3ad32574d0; // Offset: 0x50
	Vector 3347956f3b; // Offset: 0x54
	float 82e5a90f5f; // Offset: 0x60
	float 86e606d245; // Offset: 0x64
	float 9c2e04ea8a; // Offset: 0x68
	float 04d9618baa; // Offset: 0x6c
	MapProperty 53e0841f4d; // Offset: 0x70
	int a7880c60a1; // Offset: 0xc0
// ============================= //
Struct 493644f9a1
	float 45eaadc619; // Offset: 0x0
	float 860890ede5; // Offset: 0x4
	float 5a4150b3b2; // Offset: 0x8
	Vector2D 4b2440fe23; // Offset: 0xc
	Vector2D 2742d7fc25; // Offset: 0x14
	float 3e9709d0dc; // Offset: 0x1c
	float ee04a757eb; // Offset: 0x20
	float 173a5ef2a3; // Offset: 0x24
	float bea94d31bf; // Offset: 0x28
	float 8ec9592309; // Offset: 0x2c
	float b08dc0fbb5; // Offset: 0x30
	float ffde34f746; // Offset: 0x34
	float 0cf9afaa1b; // Offset: 0x38
	float 8f88055fbb; // Offset: 0x3c
// ============================= //
Struct 3329c9bf53
	float 8a9c9b9bff; // Offset: 0x0
	float cf1e3dba82; // Offset: 0x4
	float 71d4f0ede3; // Offset: 0x8
	float 310d234c18; // Offset: 0xc
	float 83e2e9cd4f; // Offset: 0x10
	float 2686c9a89c; // Offset: 0x14
	float e61abc4bde; // Offset: 0x18
	float 696c29beb5; // Offset: 0x1c
	float 16fac2ddc0; // Offset: 0x20
	float ac1277bf73; // Offset: 0x24
	float 252d419566; // Offset: 0x28
	float da6cae9614; // Offset: 0x2c
	Vector2D 34c4b97af4; // Offset: 0x30
	Vector2D 59011baa41; // Offset: 0x38
	float b492825b01; // Offset: 0x40
	float a66254ce81; // Offset: 0x44
	float f383deb841; // Offset: 0x48
	float 3288d01c6a; // Offset: 0x4c
	float 835b8d935a; // Offset: 0x50
	float a9f64d9d8d; // Offset: 0x54
	float a886306d9c; // Offset: 0x58
	float 5e00d848e7; // Offset: 0x5c
	float da87759cde; // Offset: 0x60
	float 8f4ac47b82; // Offset: 0x64
	float 7263a1d647; // Offset: 0x68
	Vector2D 021fe3c7c1; // Offset: 0x6c
	Vector2D 4ae3da5ab4; // Offset: 0x74
// ============================= //
Struct 445ae7a96c
	bool 2cd37926b4; // Offset: 0x0
	bool 2d614a48f9; // Offset: 0x1
	float 09cbaa78b8; // Offset: 0x4
	float c5b82f77fd; // Offset: 0x8
// ============================= //
Struct 64e55acb7a
	float 4efc8d4262; // Offset: 0x0
	float bfd30d6786; // Offset: 0x4
	bool 50840f5438; // Offset: 0x8
	float 308d3c791b; // Offset: 0xc
	float df943aa47c; // Offset: 0x10
	bool 390fc1884b; // Offset: 0x14
	float e5d02610a5; // Offset: 0x18
	Vector a78412686f; // Offset: 0x1c
	bool 77f738cb1b; // Offset: 0x28
	bool 104b01f84a; // Offset: 0x29
	float 3a01c99c92; // Offset: 0x2c
	float 6214ebc772; // Offset: 0x30
	Vector 5a167a3f34; // Offset: 0x34
	float 7bd94d9e8c; // Offset: 0x40
	float 57b9c1d8ed; // Offset: 0x44
	float f47a70bde0; // Offset: 0x48
// ============================= //
Struct d2398569d9
	Vector LocalOffset; // Offset: 0x0
	662efb3e58 CollisionShape; // Offset: 0xc
// ============================= //
Struct 662efb3e58
	bool ec1f8bac25; // Offset: 0x0
	float Radius; // Offset: 0x4
	Vector Extent; // Offset: 0x8
// ============================= //
Struct 2469ed839b
	TArray<205b5c9db4> dc043b5093; // Offset: 0x0
	AnimMontage* 8502027b16; // Offset: 0x10
// ============================= //
Struct 7487330f75
	float aa98cee3a3; // Offset: 0x0
	float afc5d6a1b6; // Offset: 0x4
	float 9732dd58aa; // Offset: 0x8
	Vector2D cbab5b34bd; // Offset: 0xc
	Vector2D 2738e1ae71; // Offset: 0x14
	float 55e9397bf0; // Offset: 0x1c
	float 7c4204102b; // Offset: 0x20
	float b39b63d248; // Offset: 0x24
// ============================= //
Struct ef1ea0d67d
	ParticleSystem* 3bc385d5c4; // Offset: 0x0
	MatineeCameraShake* d7b5532bda; // Offset: 0x8
	Vector2D d639ebf9b3; // Offset: 0x10
	Vector2D 3f8cbb3c5c; // Offset: 0x18
	Vector2D 14d166c755; // Offset: 0x20
	Vector2D 7cfca005d3; // Offset: 0x28
	Vector2D f9c03dce61; // Offset: 0x30
	Vector2D 9c7167e319; // Offset: 0x38
	c835d7a808* b1fb6cdc3a; // Offset: 0x40
	MatineeCameraShake* bc3dc36903; // Offset: 0x48
	ParticleSystem* 65c3317172; // Offset: 0x50
// ============================= //
Class MatineeCameraShake.1c29c51cb3.Object
	7adaf104d1 FOVOscillation; // Offset: 0xd8
	CameraAnim* Anim; // Offset: 0xe8
	af8c01cac6* AnimInst; // Offset: 0xf0
	4764e2d7e4 LocOscillation; // Offset: 0x108
	float OscillatorTimeRemaining; // Offset: 0x138
	976ecf58df RotOscillation; // Offset: 0x13c
	bool bRandomAnimSegment; // Offset: 0x16c
// ============================= //
Struct 7adaf104d1
	float Amplitude; // Offset: 0x0
	float Frequency; // Offset: 0x4
	TEnumAsByte<EInitialOscillatorOffset> InitialOffset; // Offset: 0x8
	TEnumAsByte<EOscillatorWaveform> Waveform; // Offset: 0x9
// ============================= //
Enum EInitialOscillatorOffset
	EOO_OffsetRandom = 0,
	EOO_OffsetZero = 1,
	EOO_MAX = 2;
// ============================= //
Enum EOscillatorWaveform
	EOscillatorWaveform::SineWave = 0,
	EOscillatorWaveform::PerlinNoise = 1,
	EOscillatorWaveform::EOscillatorWaveform_MAX = 2;
// ============================= //
Struct 4764e2d7e4
	7adaf104d1 X; // Offset: 0x0
	7adaf104d1 Y; // Offset: 0xc
	7adaf104d1 Z; // Offset: 0x18
// ============================= //
Struct 976ecf58df
	7adaf104d1 Pitch; // Offset: 0x0
	7adaf104d1 Yaw; // Offset: 0xc
	7adaf104d1 Roll; // Offset: 0x18
// ============================= //
Struct 71f89b03ab
	float 546fa4a165; // Offset: 0x0
	AkAudioEvent* b68222f5f0; // Offset: 0x8
	AkAudioEvent* 7a03cb7802; // Offset: 0x10
	float 53f2484cc8; // Offset: 0x18
	FName 10f20784f3; // Offset: 0x1c
	FName a24d909f77; // Offset: 0x24
	FName a2fe39c03d; // Offset: 0x2c
	FName 44ad207acc; // Offset: 0x34
	FName 6458e399b9; // Offset: 0x3c
	FName c0ace20674; // Offset: 0x44
	FName db40423992; // Offset: 0x4c
	float 6985550ca3; // Offset: 0x54
	float a1382e27db; // Offset: 0x58
	float 1d136ddb68; // Offset: 0x5c
	AkAudioEvent* ec10cb64ea; // Offset: 0x60
	float 88fb89b442; // Offset: 0x68
	float f5a0279e3f; // Offset: 0x6c
	float af63c8e8b4; // Offset: 0x70
// ============================= //
Struct 04e4cbe0f4
	float 2bd44348be; // Offset: 0x0
	Vector2D a35378bc0c; // Offset: 0x4
	Vector2D 7d75042afd; // Offset: 0xc
	Vector2D 773562e254; // Offset: 0x14
	Vector2D 0c3d371a13; // Offset: 0x1c
	Vector2D 99f7887b0e; // Offset: 0x24
	Vector2D 4020a88754; // Offset: 0x2c
	DamageType* DamageType; // Offset: 0x38
	bool 1492cdd255; // Offset: 0x40
// ============================= //
Struct 59a7d11de8
	float 2fb762cf30; // Offset: 0x0
// ============================= //
Struct 2e3fe0002d
	ReticleSettings* ReticleSettings; // Offset: 0x0
	float ScopeLensCA; // Offset: 0x8
	float ScopeRadiusFar; // Offset: 0xc
	float BloomIntensity; // Offset: 0x10
	Vector2D ReticleRect; // Offset: 0x14
	Vector WeaponCycleCameraOffset; // Offset: 0x1c
	float ScopeRadiusNear; // Offset: 0x28
	float ReticleGamma; // Offset: 0x2c
	float DepthBlurBlackPoint; // Offset: 0x30
	float NearClipMinClamp; // Offset: 0x34
	float NearClipStaticOffset; // Offset: 0x38
	LinearColor ScopeLensTint; // Offset: 0x3c
	Texture* ReticleTexture; // Offset: 0x50
	float ScopeOuterBrightness; // Offset: 0x58
	bool bReticleExtendTextureBorder; // Offset: 0x5c
	float ReticleAngularSize; // Offset: 0x60
	float ParallaxRadiusScale; // Offset: 0x64
	Vector2D RelativeOffsetMap; // Offset: 0x68
	float DepthBlurPower; // Offset: 0x70
	LinearColor ReticleTint; // Offset: 0x74
	float ScopeLensDistortion; // Offset: 0x84
	float DepthBlurWhitePoint; // Offset: 0x88
	d5de9f8df5 BrightSceneVisibility; // Offset: 0x8c
	float BlurLevel; // Offset: 0x98
	float AutoExposureBias; // Offset: 0x9c
	float ParallaxMovementScale; // Offset: 0xa0
// ============================= //
Class ReticleSettings.DataAsset.Object
	bool bUseReticleTextureOverride; // Offset: 0x70
	Vector2D ReticleCenter; // Offset: 0x74
	Texture2D* ReticleTexture; // Offset: 0x80
	TArray<283338a947> ReticleTextureDataArray; // Offset: 0x88
	float ReticleAngularSize; // Offset: 0x98
// ============================= //
Struct 283338a947
	float HaloTextureScale; // Offset: 0x0
	Vector2D ReticleCenter; // Offset: 0x4
	float BrightSceneLuminanceMultiplier; // Offset: 0xc
	float ReticleAngularSize; // Offset: 0x10
	float BrightSceneOpacityMultiplier; // Offset: 0x14
	float ReticleScale; // Offset: 0x18
	bool bUseHaloTexture; // Offset: 0x1c
	float BrightSceneOpacityMultiplierLowResolution; // Offset: 0x20
	Vector ReticleColor; // Offset: 0x24
	Texture2D* ReticleTexture; // Offset: 0x30
// ============================= //
Struct d5de9f8df5
	float OpacityMultiplier; // Offset: 0x0
	float OpacityMultiplierLowResolution; // Offset: 0x4
	float LuminanceMultiplier; // Offset: 0x8
// ============================= //
Class CharacterCustomizeComponent.ActorComponent.Object
	e1c1c567eb* dbcd09c63c; // Offset: 0x298
	CharacterMeshComponent* CharacterMeshComponent; // Offset: 0x2a8
// ============================= //
Class e1c1c567eb.DataAsset.Object
	MapProperty 2b8e014435; // Offset: 0x70
	MapProperty 6ee31d96e9; // Offset: 0xc0
	MapProperty 3d5261d0a3; // Offset: 0x110
	MapProperty 40e4618791; // Offset: 0x160
	MapProperty bc33de857c; // Offset: 0x1b0
	MapProperty 85e3f6c5cc; // Offset: 0x200
// ============================= //
Class CharacterMeshComponent.SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<Object*> 7ea574c6f2; // Offset: 0x1150
	TArray<3cfe496c75> 4a7f395a0f; // Offset: 0x1160
	MapProperty c7d2b59871; // Offset: 0x1188
	MapProperty bbf6e55472; // Offset: 0x11e0
	MapProperty 1fac762081; // Offset: 0x1240
	eeae703230* d8514aabea; // Offset: 0x1290
	SkeletalMesh* MergedMesh; // Offset: 0x12c0
// ============================= //
Class SkeletalMeshComponentBudgeted.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	bool bAutoRegisterWithBudgetAllocator; // Offset: 0x1140
	bool 6fe738e543; // Offset: 0x1140
	bool 0813a9df1a; // Offset: 0x1140
// ============================= //
Struct 3cfe496c75
	Transform 3889924636; // Offset: 0x0
	Transform fa211257a2; // Offset: 0x30
	Transform e5fad486a1; // Offset: 0x60
// ============================= //
Class XtrmEmoteComponent.ActorComponent.Object
	3beac086b4 312b3e1e3d; // Offset: 0x1d0
	AnimMontage* dcf13d992b; // Offset: 0x238
	AkAudioEvent* 4695b67b9a; // Offset: 0x240
	MapProperty 0d2a03bb94; // Offset: 0x248
	TArray<ParticleSystemComponent*> 5cccd3070f; // Offset: 0x2a8
	bool f9b7c50217; // Offset: 0x2b8
	TArray<AsyncStaticMeshComponent*> ebad2efeef; // Offset: 0x398
	MapProperty 474c0427c8; // Offset: 0x3a8
// ============================= //
Struct 3beac086b4
	float a04011dfba; // Offset: 0x0
	XtrmCharacter* 616dcfd29b; // Offset: 0x4
	TArray<UInt32Property> 1724743d19; // Offset: 0x28
	bool bLooping; // Offset: 0x38
	UInt32Property EmoteId; // Offset: 0x3c
// ============================= //
Struct 4910149af6
	int Face; // Offset: 0x0
	int SkinTone; // Offset: 0x4
	int HairColor; // Offset: 0x8
	int Hair; // Offset: 0xc
// ============================= //
Struct 98f8084266
	XtrmPlayerState* 104fa390b0; // Offset: 0x0
	TEnumAsByte<EDamageReason> DamageReason; // Offset: 0x8
	Actor* 7119026389; // Offset: 0x10
	DateTime fa48004f92; // Offset: 0x28
	DamageEventInfoBase* 59a7fd3b5c; // Offset: 0x30
// ============================= //
Struct DateTime
// ============================= //
Class DamageEventInfoBase.Object
// ============================= //
Class ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor; // Offset: 0x534
	float ArrowLength; // Offset: 0x538
	float ScreenSize; // Offset: 0x53c
	float ArrowSize; // Offset: 0x540
	bool bIsScreenSizeScaled; // Offset: 0x544
	bool bTreatAsASprite; // Offset: 0x544
// ============================= //
Class d30b84de44.DataAsset.Object
	AkAudioEvent* 3cfb5a24bd; // Offset: 0x78
	AkAudioEvent* 2097e1cc5c; // Offset: 0x88
	AkAudioEvent* f6b4532248; // Offset: 0x90
	AkAudioEvent* 8a1474d0aa; // Offset: 0xa0
	CurveFloat* 95c6ad1507; // Offset: 0xb0
	AkAudioEvent* fd62725549; // Offset: 0xb8
// ============================= //
Class BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	bool EnableStayUprightConstraint; // Offset: 0x278
	float FluidLinearDamping; // Offset: 0x27c
	Vector VelocityDamper; // Offset: 0x280
	bool DrawDebugPoints; // Offset: 0x28c
	float StayUprightDamping; // Offset: 0x290
	float StayUprightStiffness; // Offset: 0x294
	bool SnapToSurfaceIfNoPhysics; // Offset: 0x298
	float MaxUnderwaterVelocity; // Offset: 0x2a8
	OceanManager* OceanManager; // Offset: 0x2b0
	TArray<float> PointDensityOverride; // Offset: 0x2b8
	float MeshDensity; // Offset: 0x2c8
	TArray<fba292d92b> BoneOverride; // Offset: 0x2d0
	bool EnableWaveForces; // Offset: 0x2e0
	float FluidDensity; // Offset: 0x2e4
	TArray<Vector> TestPoints; // Offset: 0x2e8
	bool TwoGerstnerIterations; // Offset: 0x2f8
	TEnumAsByte<ETickingGroup> TickGroup; // Offset: 0x300
	float TestPointRadius; // Offset: 0x304
	Rotator StayUprightDesiredRotation; // Offset: 0x308
	float WaveForceMultiplier; // Offset: 0x314
	bool ClampMaxVelocity; // Offset: 0x318
	bool ApplyForceToBones; // Offset: 0x319
	float FluidAngularDamping; // Offset: 0x320
// ============================= //
Class OceanManager.Actor.Object
	float GlobalWaveSpeed; // Offset: 0x2b8
	float NetWorkTimeOffset; // Offset: 0x2bc
	TArray<08edeafce5> WaveClusters; // Offset: 0x2c8
	Vector2D GlobalWaveDirection; // Offset: 0x2d8
	float ModulationStartHeight; // Offset: 0x2e0
	bool bEnableLandscapeModulation; // Offset: 0x2e4
	float ModulationPower; // Offset: 0x2e8
	float DistanceCheck; // Offset: 0x300
	Landscape* Landscape; // Offset: 0x308
	bool EnableGerstnerWaves; // Offset: 0x314
	TArray<ae2a35f57d> WaveSetOffsetsOverride; // Offset: 0x318
	Texture2D* HeightmapTexture; // Offset: 0x328
	float ModulationMaxHeight; // Offset: 0x330
	float GlobalWaveAmplitude; // Offset: 0x334
// ============================= //
Struct 08edeafce5
	float Rotation; // Offset: 0x0
	float Length; // Offset: 0x4
	float Amplitude; // Offset: 0x8
	float Steepness; // Offset: 0xc
	float TimeScale; // Offset: 0x10
// ============================= //
Class Landscape.LandscapeProxy.Actor.Object
// ============================= //
Class LandscapeProxy.Actor.Object
	TArray<HierarchicalInstancedStaticMeshComponent*> eab1232cb0; // Offset: 0x2c0
	float LDMaxDrawDistance; // Offset: 0x2d0
	MapProperty 60ee99de65; // Offset: 0x2f8
	MaterialInterface* LandscapeMaterial; // Offset: 0x348
	TEnumAsByte<ERendererStencilMask> CustomDepthStencilWriteMask; // Offset: 0x354
	TArray<LandscapeHeightfieldCollisionComponent*> 0bf1f3c5e3; // Offset: 0x360
	bool bMeshHoles; // Offset: 0x3ac
	int VirtualTextureLodBias; // Offset: 0x3b0
	LightingChannels LightingChannels; // Offset: 0x3bc
	LandscapeSplinesComponent* SplineComponent; // Offset: 0x3c0
	TArray<9914ea4095> LODDistancesSet; // Offset: 0x3d8
	f28c6334fd LightmassSettings; // Offset: 0x3ec
	BodyInstance BodyInstance; // Offset: 0x408
	MaterialInterface* LandscapeHoleMaterial; // Offset: 0x5a0
	int VirtualTextureNumLods; // Offset: 0x5ac
	bool CastShadow; // Offset: 0x600
	bool bCastDynamicShadow; // Offset: 0x600
	bool bCastStaticShadow; // Offset: 0x600
	bool bCastFarShadow; // Offset: 0x600
	bool bCastHiddenShadow; // Offset: 0x600
	bool bCastShadowAsTwoSided; // Offset: 0x600
	bool bAffectDistanceFieldLighting; // Offset: 0x600
	TArray<fabaea4de9> LandscapeMaterialsOverride; // Offset: 0x608
	bool 4c8df66985; // Offset: 0x618
	bool bRenderCustomDepth; // Offset: 0x618
	TArray<RuntimeVirtualTexture*> RuntimeVirtualTextures; // Offset: 0x620
	TEnumAsByte<ERuntimeVirtualTextureMainPassType> VirtualTextureRenderPassType; // Offset: 0x630
	TEnumAsByte<ENavDataGatheringMode> f7161c7785; // Offset: 0x638
	PhysicalMaterial* 51b292fd3c; // Offset: 0x640
	TArray<LandscapeComponent*> LandscapeComponents; // Offset: 0x648
	bool bGenerateOverlapEvents; // Offset: 0x660
	bool 24551fa050; // Offset: 0x660
	bool 907edef2ca; // Offset: 0x66a
	bool f454cebfcb; // Offset: 0x66a
	uint8_t MeshHolesMaxLod; // Offset: 0x672
	int CustomDepthStencilValue; // Offset: 0x674
// ============================= //
Class HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<int> 68ee1b06f1; // Offset: 0x6f8
	bool d49de48ebc; // Offset: 0x724
	TArray<Box> 946229c506; // Offset: 0x728
// ============================= //
Class InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<int> fa772cf4d2; // Offset: 0x658
	TArray<de0d50ac8d> PerInstanceSMData; // Offset: 0x680
	TArray<float> PerInstanceSMCustomData; // Offset: 0x690
	int InstanceEndCullDistance; // Offset: 0x6a8
	int 3114fbbb7b; // Offset: 0x6ac
	int InstanceStartCullDistance; // Offset: 0x6b8
	TArray<a1a1d91fee> 3d3ed47bb0; // Offset: 0x6c0
	int InstancingRandomSeed; // Offset: 0x6d0
// ============================= //
Struct de0d50ac8d
	Matrix Transform; // Offset: 0x0
// ============================= //
Struct a1a1d91fee
// ============================= //
Class LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<uint8_t> 3f683dad6e; // Offset: 0x548
	TArray<PhysicalMaterial*> 264ddf96b7; // Offset: 0x570
	TArray<LandscapeLayerInfoObject*> 637bbf748a; // Offset: 0x580
	LandscapeComponent* RenderComponent; // Offset: 0x5c8
// ============================= //
Class LandscapeLayerInfoObject.Object
	PhysicalMaterial* PhysMaterial; // Offset: 0x68
	FName LayerName; // Offset: 0x70
// ============================= //
Class LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<cbbed14f8f> 1fb37e922b; // Offset: 0x540
	TArray<float> SubSectionLODMultiplier; // Offset: 0x550
	int LODBias; // Offset: 0x560
	LandscapeHeightfieldCollisionComponent* CollisionComponent; // Offset: 0x574
	TArray<MaterialInstanceDynamic*> 6ff553fe7c; // Offset: 0x5b8
	Texture2D* GIBakedBaseColorTexture; // Offset: 0x5e8
	TArray<MaterialInterface*> 6b4b70f729; // Offset: 0x618
	TArray<7fae04c12e> OverrideMaterials; // Offset: 0x628
	MaterialInterface* MobileMaterialInterface; // Offset: 0x638
	Texture2D* d0b6fd1635; // Offset: 0x640
	TArray<MaterialInstanceDynamic*> e2554c707f; // Offset: 0x648
	TArray<Texture2D*> 7ff8b6d2cc; // Offset: 0x658
	TArray<Guid> IrrelevantLights; // Offset: 0x668
	TArray<Texture2D*> 62dd8fb281; // Offset: 0x680
	MaterialInterface* OverrideHoleMaterial; // Offset: 0x6b0
	int SectionBaseX; // Offset: 0x6b8
	LandscapeLODStreamingProxy* 8b79afaede; // Offset: 0x6d0
	TArray<int8_t> ffff436fce; // Offset: 0x720
	TArray<MaterialInstanceConstant*> MaterialInstances; // Offset: 0x740
	int ForcedLOD; // Offset: 0x750
	MaterialInterface* OverrideMaterial; // Offset: 0x758
	TArray<uint8_t> f31b36b3c1; // Offset: 0x760
	Texture2D* HeightmapTexture; // Offset: 0x770
	TArray<int8_t> 808f812d06; // Offset: 0x780
	int SectionBaseY; // Offset: 0x790
// ============================= //
Struct cbbed14f8f
	LandscapeLayerInfoObject* LayerInfo; // Offset: 0x0
	uint8_t d47de2210e; // Offset: 0x8
	uint8_t 9ebaf7c349; // Offset: 0x9
// ============================= //
Struct 7fae04c12e
	PerPlatformInt LODIndex; // Offset: 0x0
	MaterialInterface* Material; // Offset: 0x8
// ============================= //
Class LandscapeLODStreamingProxy.638112bfc1.Object
// ============================= //
Class MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	PhysicalMaterialMask* PhysMaterialMask; // Offset: 0x3b0
// ============================= //
Class PhysicalMaterialMask.Object
	TEnumAsByte<TextureAddress> AddressX; // Offset: 0x68
	TEnumAsByte<TextureAddress> AddressY; // Offset: 0x69
	int UVChannelIndex; // Offset: 0x6c
// ============================= //
Class LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	TArray<LandscapeSplineSegment*> Segments; // Offset: 0x538
	TArray<MeshComponent*> 9ebf74de2c; // Offset: 0x548
	TArray<LandscapeSplineControlPoint*> ControlPoints; // Offset: 0x558
// ============================= //
Class LandscapeSplineSegment.Object
	213866fed6 Connections; // Offset: 0x68
	InterpCurveVector SplineInfo; // Offset: 0x98
	TArray<6134f9e6c2> Points; // Offset: 0xb0
	Box Bounds; // Offset: 0xc0
	TArray<SplineMeshComponent*> LocalMeshComponents; // Offset: 0xe0
// ============================= //
Struct 213866fed6
	LandscapeSplineControlPoint* ControlPoint; // Offset: 0x0
	float ed8455220d; // Offset: 0x8
	FName SocketName; // Offset: 0xc
// ============================= //
Class LandscapeSplineControlPoint.Object
	Vector Location; // Offset: 0x68
	Rotator Rotation; // Offset: 0x74
	float Width; // Offset: 0x80
	float b59f9a9c71; // Offset: 0x84
	float f8f744a56e; // Offset: 0x88
	float ee4f871c77; // Offset: 0x8c
	float 3a3db28e8f; // Offset: 0x90
	float c46281af1e; // Offset: 0x94
	float 27e4e6cdbd; // Offset: 0x98
	float 6cef87ece5; // Offset: 0x9c
	TArray<fa6248a141> 36002ff78e; // Offset: 0xa0
	TArray<6134f9e6c2> Points; // Offset: 0xb0
	Box Bounds; // Offset: 0xc0
	ControlPointMeshComponent* LocalMeshComponent; // Offset: 0xe0
// ============================= //
Struct fa6248a141
	LandscapeSplineSegment* Segment; // Offset: 0x0
	bool End; // Offset: 0x8
// ============================= //
Struct 6134f9e6c2
	Vector Center; // Offset: 0x0
	Vector Left; // Offset: 0xc
	Vector Right; // Offset: 0x18
	Vector 9081d8d4c2; // Offset: 0x24
	Vector 17235dfd52; // Offset: 0x30
	Vector cf40e6d526; // Offset: 0x3c
	Vector 17e73d9953; // Offset: 0x48
	Vector d3f95151ea; // Offset: 0x54
	Vector b6ff343754; // Offset: 0x60
	float 5918c9034a; // Offset: 0x6c
// ============================= //
Class ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
// ============================= //
Class SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	28b517d0bb SplineParams; // Offset: 0x648
	BodySetup* BodySetup; // Offset: 0x6a8
	bool d4f73d91c5; // Offset: 0x6bd
	bool 8041a2a218; // Offset: 0x6bd
	bool 91ab49bafd; // Offset: 0x6bd
// ============================= //
Struct 28b517d0bb
	Vector StartPos; // Offset: 0x0
	Vector 834bfd93f6; // Offset: 0xc
	Vector2D 7f2e8e98d4; // Offset: 0x18
	float 62aff4957d; // Offset: 0x20
	Vector2D StartOffset; // Offset: 0x24
	Vector EndPos; // Offset: 0x2c
	Vector2D f4654033cf; // Offset: 0x38
	Vector 60771f087e; // Offset: 0x40
	float 6b452e49e0; // Offset: 0x4c
	Vector2D dd38d93563; // Offset: 0x50
// ============================= //
Struct 9914ea4095
	TArray<float> Distances; // Offset: 0x0
// ============================= //
Struct fabaea4de9
	PerPlatformInt LODIndex; // Offset: 0x0
	MaterialInterface* Material; // Offset: 0x8
// ============================= //
Enum ENavDataGatheringMode
	ENavDataGatheringMode::Default = 0,
	ENavDataGatheringMode::Instant = 1,
	ENavDataGatheringMode::Lazy = 2,
	ENavDataGatheringMode::ENavDataGatheringMode_MAX = 3;
// ============================= //
Struct ae2a35f57d
	08edeafce5 Wave01; // Offset: 0x0
	08edeafce5 Wave02; // Offset: 0x14
	08edeafce5 Wave03; // Offset: 0x28
	08edeafce5 Wave04; // Offset: 0x3c
	08edeafce5 Wave05; // Offset: 0x50
	08edeafce5 Wave06; // Offset: 0x64
	08edeafce5 Wave07; // Offset: 0x78
	08edeafce5 Wave08; // Offset: 0x8c
// ============================= //
Struct fba292d92b
	FName BoneName; // Offset: 0x0
	float Density; // Offset: 0x8
	float TestRadius; // Offset: 0xc
// ============================= //
Class VehicleSyncComponent.ActorComponent.Object
	487638264f* 487638264f; // Offset: 0x110
	bool 1661c0a59d; // Offset: 0x13d
	MulticastInlineDelegateProperty OnSyncHit; // Offset: 0x140
// ============================= //
Class 487638264f.DataAsset.Object
// ============================= //
Class db15eddec6.DataAsset.Object
	FName 47781c9e59; // Offset: 0x70
	FName e9fd61309d; // Offset: 0x78
	CurveFloat* 5232743d36; // Offset: 0x80
	CurveFloat* d01ffb14e8; // Offset: 0x88
// ============================= //
Class 2102794289.DataAsset.Object
	f773e87c74* a8b0c3ff71; // Offset: 0x90
	TEnumAsByte<XtrmAudioInterpolation> InterpolationCurve; // Offset: 0xb0
// ============================= //
Class f773e87c74.DataAsset.Object
	MapProperty 70aba6d420; // Offset: 0x70
// ============================= //
Enum XtrmAudioInterpolation
	XtrmAudioInterpolation::AudioInterpolation_Log3 = 0,
	XtrmAudioInterpolation::AudioInterpolation_Sine = 1,
	XtrmAudioInterpolation::AudioInterpolation_Log1 = 2,
	XtrmAudioInterpolation::AudioInterpolation_InvSCurve = 3,
	XtrmAudioInterpolation::AudioInterpolation_Linear = 4,
	XtrmAudioInterpolation::AudioInterpolation_SCurve = 5,
	XtrmAudioInterpolation::AudioInterpolation_Exp1 = 6,
	XtrmAudioInterpolation::AudioInterpolation_SineRecip = 7,
	XtrmAudioInterpolation::AudioInterpolation_Exp3 = 8,
	XtrmAudioInterpolation::AudioInterpolation_MAX = 9;
// ============================= //
Class VehicleExplosionComponent.RadialForceComponent.SceneComponent.ActorComponent.Object
	TArray<int> 7edbb467d2; // Offset: 0x2a8
	2ea76c41af 0fcdaf6031; // Offset: 0x2c8
	XtrmParticle* e622c87635; // Offset: 0x320
	MaterialInterface* 3ada70e530; // Offset: 0x330
	6192018085* 3fd096f387; // Offset: 0x370
// ============================= //
Class RadialForceComponent.SceneComponent.ActorComponent.Object
	float ImpulseStrength; // Offset: 0x278
	TEnumAsByte<ERadialImpulseFalloff> Falloff; // Offset: 0x284
	bool bImpulseVelChange; // Offset: 0x285
	bool bIgnoreOwningActor; // Offset: 0x285
	float ForceStrength; // Offset: 0x288
	float DestructibleDamage; // Offset: 0x28c
	float Radius; // Offset: 0x290
	TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypesToAffect; // Offset: 0x298
// ============================= //
Enum ERadialImpulseFalloff
	RIF_Constant = 0,
	RIF_Linear = 1,
	RIF_MAX = 2;
// ============================= //
Enum EObjectTypeQuery
	ObjectTypeQuery1 = 0,
	ObjectTypeQuery2 = 1,
	ObjectTypeQuery3 = 2,
	ObjectTypeQuery4 = 3,
	ObjectTypeQuery5 = 4,
	ObjectTypeQuery6 = 5,
	ObjectTypeQuery7 = 6,
	ObjectTypeQuery8 = 7,
	ObjectTypeQuery9 = 8,
	ObjectTypeQuery10 = 9,
	ObjectTypeQuery11 = 10,
	ObjectTypeQuery12 = 11,
	ObjectTypeQuery13 = 12,
	ObjectTypeQuery14 = 13,
	ObjectTypeQuery15 = 14,
	ObjectTypeQuery16 = 15,
	ObjectTypeQuery17 = 16,
	ObjectTypeQuery18 = 17,
	ObjectTypeQuery19 = 18,
	ObjectTypeQuery20 = 19,
	ObjectTypeQuery21 = 20,
	ObjectTypeQuery22 = 21,
	ObjectTypeQuery23 = 22,
	ObjectTypeQuery24 = 23,
	ObjectTypeQuery25 = 24,
	ObjectTypeQuery26 = 25,
	ObjectTypeQuery27 = 26,
	ObjectTypeQuery28 = 27,
	ObjectTypeQuery29 = 28,
	ObjectTypeQuery30 = 29,
	ObjectTypeQuery31 = 30,
	ObjectTypeQuery32 = 31,
	ObjectTypeQuery_MAX = 32,
	EObjectTypeQuery_MAX = 33;
// ============================= //
Struct 2ea76c41af
	MapProperty 40585d0a45; // Offset: 0x0
	bool IsActive; // Offset: 0x50
// ============================= //
Class 6192018085.DataAsset.Object
	54a318b1a5* bf57fb6ab5; // Offset: 0x70
	XtrmParticle* 194284a323; // Offset: 0x90
// ============================= //
Class 54a318b1a5.DamageType.Object
	TArray<f8766139d1> DamageRatioInfos; // Offset: 0x80
	TEnumAsByte<EDamageTypeCategory> DamageTypeCategory; // Offset: 0x90
// ============================= //
Struct f8766139d1
	float 2cb4b13518; // Offset: 0x0
	TEnumAsByte<EDamageVictimActorType> 9541913f0e; // Offset: 0x4
// ============================= //
Enum EDamageVictimActorType
	EDamageVictimActorType::Character = 0,
	EDamageVictimActorType::Vehicle = 1,
	EDamageVictimActorType::Wheel = 2,
	EDamageVictimActorType::DestructibleActor = 3,
	EDamageVictimActorType::ExplosiveItem = 4,
	EDamageVictimActorType::Drone = 5,
	EDamageVictimActorType::DeployableShield = 6,
	EDamageVictimActorType::EDamageVictimActorType_MAX = 7;
// ============================= //
Struct 4ec523ccaf
	float ab61c67307; // Offset: 0x4
	float StartTime; // Offset: 0x8
	float 34ac4121aa; // Offset: 0x10
	float 1be7930808; // Offset: 0x14
	TEnumAsByte<EVehicleEngineState> ServerState; // Offset: 0x1c
// ============================= //
Enum EVehicleEngineState
	EVehicleEngineState::EEngineStateAutoOff = 0,
	EVehicleEngineState::EEngineStateAutoOn = 1,
	EVehicleEngineState::EEngineStateManualOff = 2,
	EVehicleEngineState::EEngineStateManualOn = 3,
	EVehicleEngineState::EVehicleEngineState_MAX = 4;
// ============================= //
BlueprintGeneratedClass BP_Dacia_White_C
	3aeed9dadb UberGraphFrame; // Offset: 0x800
	SceneComponent* Scene; // Offset: 0x808
	StaticMeshComponent* Door_BR; // Offset: 0x810
	StaticMeshComponent* Door_BL; // Offset: 0x818
	StaticMeshComponent* Door_FR; // Offset: 0x820
	StaticMeshComponent* Door_FL; // Offset: 0x828
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BR; // Offset: 0x830
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BL; // Offset: 0x838
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FR; // Offset: 0x840
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FL; // Offset: 0x848
	VehicleDoorComponent* DoorComponent; // Offset: 0x850
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x858
// ============================= //
Struct 3aeed9dadb
// ============================= //
Class InteractableDoorSeatCollision.InteractableSeatCollision.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FName 824c4dfbb7; // Offset: 0x5a4
// ============================= //
BlueprintGeneratedClass BP_Motorbike_Sidecar_C
	VehicleRadioComponent* VehicleRadio; // Offset: 0x9f8
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0xa00
	InteractableSeatCollision* InteractableSeatCollision_Sidecar; // Offset: 0xa08
	InteractableSeatCollision* InteractableSeatCollision_Passenger; // Offset: 0xa10
	InteractableSeatCollision* InteractableSeatCollision_Driver; // Offset: 0xa18
// ============================= //
Class XtrmMotorbikeVehicle_Sidecar.XtrmMotorbikeVehicle.XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object
	Vector a1d810e4b9; // Offset: 0x9e4
	float 505dda2c1a; // Offset: 0x9f0
	float 3c63078f2c; // Offset: 0x9f4
// ============================= //
Class XtrmMotorbikeVehicle.XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object
	Vector2D d7ce824e92; // Offset: 0x808
	Vector2D e592a1f140; // Offset: 0x810
	bool 8face7fbba; // Offset: 0x820
	9f4912a594 94a8fd261d; // Offset: 0x840
	bool bRunStabilizeOnEntry; // Offset: 0x854
	XtrmAnchorActor* 2a6b126e68; // Offset: 0x8b8
	9f4912a594 6afcb4d712; // Offset: 0x8dc
	Vector2D c7a42b365b; // Offset: 0x928
	PhysicsConstraintComponent* ConstraintComp; // Offset: 0x930
	FName 2ef20daaef; // Offset: 0x944
	float StabilizeInitialTimer; // Offset: 0x9c4
// ============================= //
Struct 9f4912a594
	float 937a97e4a7; // Offset: 0x0
	float 31637ef853; // Offset: 0x4
	float 6f53d228c0; // Offset: 0x8
	float 5141b76824; // Offset: 0xc
// ============================= //
Class VehicleRadioComponent.XtrmBaseRadioComponent.ActorComponent.Object
// ============================= //
Class XtrmBaseRadioComponent.ActorComponent.Object
	float cd6d3bbd2b; // Offset: 0x104
	bcf039bdc5 3a83129fed; // Offset: 0x108
	bcf039bdc5 e24c643876; // Offset: 0x118
	397241b548* ec8a783bef; // Offset: 0x120
	AkComponent* 2fc2158b67; // Offset: 0x128
	int8_t 7c2ffb0d06; // Offset: 0x134
// ============================= //
Struct bcf039bdc5
	UInt64Property Handle; // Offset: 0x0
// ============================= //
Class 397241b548.DataAsset.Object
	AkAudioEvent* 439af2a096; // Offset: 0x70
	TArray<6c13506bb3> 54689607a4; // Offset: 0x80
// ============================= //
Struct 6c13506bb3
	float 230401b0c8; // Offset: 0x0
	AkAudioEvent* f33bd424f8; // Offset: 0x8
// ============================= //
Class XtrmAnchorActor.Actor.Object
	SphereComponent* SphereComp; // Offset: 0x2b8
	PhysicsConstraintComponent* ConstraintComp; // Offset: 0x2c0
// ============================= //
Class PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	PhysicsConstraintTemplate* 299542a4b8; // Offset: 0x278
	ConstraintInstance ConstraintInstance; // Offset: 0x280
	876afcb897 b51a64936f; // Offset: 0x440
	Actor* eafd2dafd7; // Offset: 0x448
	Actor* 2cb6b08b1f; // Offset: 0x450
	876afcb897 1494984684; // Offset: 0x458
	MulticastInlineDelegateProperty OnConstraintBroken; // Offset: 0x460
// ============================= //
Struct 876afcb897
	FName ComponentName; // Offset: 0x0
// ============================= //
BlueprintGeneratedClass BP_Volta_Blue_C
	3aeed9dadb UberGraphFrame; // Offset: 0x800
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BR; // Offset: 0x808
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BL; // Offset: 0x810
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FR; // Offset: 0x818
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FL; // Offset: 0x820
	VehicleDoorComponent* DoorComponent; // Offset: 0x828
	StaticMeshComponent* Door_BR; // Offset: 0x830
	StaticMeshComponent* Door_BL; // Offset: 0x838
	StaticMeshComponent* Door_FR; // Offset: 0x840
	StaticMeshComponent* Door_FL; // Offset: 0x848
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x850
// ============================= //
BlueprintGeneratedClass BP_VrionT_C
	3aeed9dadb UberGraphFrame; // Offset: 0x860
// ============================= //
BlueprintGeneratedClass BP_Vrion_C
	3aeed9dadb UberGraphFrame; // Offset: 0x800
	SceneComponent* Scene; // Offset: 0x808
	VehicleDoorComponent* DoorComponent; // Offset: 0x810
	StaticMeshComponent* Door_BR; // Offset: 0x818
	StaticMeshComponent* Door_FL; // Offset: 0x820
	StaticMeshComponent* Door_BL; // Offset: 0x828
	StaticMeshComponent* Door_FR; // Offset: 0x830
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BL; // Offset: 0x838
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BR; // Offset: 0x840
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FL; // Offset: 0x848
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FR; // Offset: 0x850
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x858
// ============================= //
BlueprintGeneratedClass BP_UAZ_Open_C
	3aeed9dadb UberGraphFrame; // Offset: 0x858
// ============================= //
BlueprintGeneratedClass BP_UAZ_C
	3aeed9dadb UberGraphFrame; // Offset: 0x800
	VehicleDoorComponent* DoorComponent; // Offset: 0x808
	StaticMeshComponent* Door_BR; // Offset: 0x810
	StaticMeshComponent* Door_FL; // Offset: 0x818
	StaticMeshComponent* Door_BL; // Offset: 0x820
	StaticMeshComponent* Door_FR; // Offset: 0x828
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BL; // Offset: 0x830
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_BR; // Offset: 0x838
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FL; // Offset: 0x840
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FR; // Offset: 0x848
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x850
// ============================= //
BlueprintGeneratedClass BP_Lightning_C
	VehicleRadioComponent* VehicleRadio; // Offset: 0x9e8
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x9f0
	InteractableSeatCollision* InteractableSeatCollision_Passenger; // Offset: 0x9f8
	InteractableSeatCollision* InteractableSeatCollision_Driver; // Offset: 0xa00
// ============================= //
Class XtrmMotorbikeVehicle_Standalone.XtrmMotorbikeVehicle.XtrmWheeledVehicle.WheeledVehicle.Pawn.Actor.Object
// ============================= //
BlueprintGeneratedClass BP_Dacia_Blue_C
// ============================= //
BlueprintGeneratedClass BP_Motorbike_C
	VehicleRadioComponent* VehicleRadio; // Offset: 0x9e8
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x9f0
	InteractableSeatCollision* InteractableSeatCollision_Passenger; // Offset: 0x9f8
	InteractableSeatCollision* InteractableSeatCollision_Driver; // Offset: 0xa00
// ============================= //
BlueprintGeneratedClass BP_Nova_C
	3aeed9dadb UberGraphFrame; // Offset: 0x800
	StaticMeshComponent* Door_FR; // Offset: 0x808
	StaticMeshComponent* Door_FL; // Offset: 0x810
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FR; // Offset: 0x818
	InteractableDoorSeatCollision* InteractableDoorSeatCollision_FL; // Offset: 0x820
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x828
	VehicleDoorComponent* DoorComponent; // Offset: 0x830
// ============================= //
BlueprintGeneratedClass BP_Buggy_C
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x800
	InteractableSeatCollision* InteractableSeatCollision_Passenger; // Offset: 0x808
	InteractableSeatCollision* InteractableSeatCollision_Driver; // Offset: 0x810
// ============================= //
BlueprintGeneratedClass BP_Volta_Sliver_C
// ============================= //
BlueprintGeneratedClass BP_Vulture_C
	VehicleRadioComponent* VehicleRadio; // Offset: 0x9e8
	VehicleTrunkComponent* VehicleTrunk; // Offset: 0x9f0
	InteractableSeatCollision* InteractableSeatCollision_Passenger; // Offset: 0x9f8
	InteractableSeatCollision* InteractableSeatCollision_Driver; // Offset: 0xa00
// ============================= //
BlueprintGeneratedClass BP_TrainingGameState_C
	SceneComponent* DefaultSceneRoot; // Offset: 0x440
// ============================= //
Class XtrmTrainingGameState.XtrmGameState.GameState.GameStateBase.Info.Actor.Object
	bool 6be103f0c9; // Offset: 0x430
	float TimeLimitSeconds; // Offset: 0x434
	int fdf492ed88; // Offset: 0x438
// ============================= //
Class XtrmGameState.GameState.GameStateBase.Info.Actor.Object
	3f988fc5f0* 3f988fc5f0; // Offset: 0x330
	XtrmGameMode* XtrmGameMode; // Offset: 0x338
	TArray<Team*> TeamArray; // Offset: 0x370
	TArray<XtrmPhysicsWaterVolume*> b56267ebbd; // Offset: 0x380
	int TeamSize; // Offset: 0x390
	bool ce48f36714; // Offset: 0x394
	3f988fc5f0* e3daeab4f9; // Offset: 0x398
	bool 11afcb5e51; // Offset: 0x3a0
	bool bIsCustomMatch; // Offset: 0x3a1
	float ParachuteAutoDeployAltitudeMultiplier; // Offset: 0x3a4
	FString SessionId; // Offset: 0x3a8
	d1c0209cc4* e260bf58b5; // Offset: 0x3b8
	bool a058b0379d; // Offset: 0x3c0
	d1c0209cc4* RadioMessageManager; // Offset: 0x3c8
	bool 0f07768acd; // Offset: 0x3d0
	CustomCarepackageRulesComponent* CustomCarepackageRulesComponent; // Offset: 0x3d8
	int8_t 06e972c395; // Offset: 0x3e0
	float CorpseLifeSpan; // Offset: 0x3e8
	float 5ff2b6eb9b; // Offset: 0x3f4
	bool bFlareGun; // Offset: 0x3f8
	float ff991c341e; // Offset: 0x3fc
	float ba8f8b5314; // Offset: 0x404
	ObserverShareableState* ObserverShareableState; // Offset: 0x410
// ============================= //
Class GameState.GameStateBase.Info.Actor.Object
	FName MatchState; // Offset: 0x318
	int ElapsedTime; // Offset: 0x320
	FName PreviousMatchState; // Offset: 0x324
// ============================= //
Class 3f988fc5f0.Object
	DataTable* d35d1ec0eb; // Offset: 0x68
	DataTable* 9ab1491082; // Offset: 0x70
	MapProperty 0856557aec; // Offset: 0xc8
	MapProperty 490fa9f513; // Offset: 0x118
// ============================= //
Class DataTable.Object
	bool a2b63f69f6; // Offset: 0xd0
	bool e6f95501ad; // Offset: 0xd0
	bool 04ac1a118f; // Offset: 0xd0
	ScriptStruct* RowStruct; // Offset: 0xe8
// ============================= //
Class ScriptStruct.Struct.Field.Object
// ============================= //
Class XtrmGameMode.GameMode.GameModeBase.Info.Actor.Object
	TArray<FString> KickBanPlayerList; // Offset: 0x3a0
	bool bVehicleSpawnEnable; // Offset: 0x3c0
	Team* TeamClass; // Offset: 0x3d0
	c40a9616ec* 65b01ef51e; // Offset: 0x3d8
	MapProperty 0e243bd983; // Offset: 0x408
	ItemSpawnProcessor* ItemSpawnProcessor; // Offset: 0x478
	bool 410c52e789; // Offset: 0x481
	float BpRewardStartTimeSeconds; // Offset: 0x484
	VehicleSpawnProcessor* VehicleSpawnProcessor; // Offset: 0x488
	int PlayerSpawnTryMaxCount; // Offset: 0x494
	MapProperty a81dd502a3; // Offset: 0x498
	MulticastInlineDelegateProperty OnMatchStarted; // Offset: 0x500
	a1cfcb7984* a1cfcb7984; // Offset: 0x518
	bool bItemSpawnEnable; // Offset: 0x560
	ObserverShareableState* ObserverShareableStateClass; // Offset: 0x568
	MapProperty VehicleSpawnProcessorClassRefMap; // Offset: 0x570
	FName b21dccacf0; // Offset: 0x5c0
	InGameMissionProcessor* MissionProcessorClass; // Offset: 0x5c8
	MapProperty ItemSpawnProcessorClassRefMap; // Offset: 0x628
	ebba92e057* 3278b104c8; // Offset: 0x688
	8ad25a24eb* 325a5989b0; // Offset: 0x690
	TEnumAsByte<ECameraViewBehaviour> CameraViewBehaviour; // Offset: 0x69c
	9f3f1776b5* 97957c328b; // Offset: 0x6a0
	TArray<PlayerState*> 0285d43ec2; // Offset: 0x6e0
	InGameMissionProcessor* aa8db6df55; // Offset: 0x6f0
	TeamMemberState* TeamMemberStateClass; // Offset: 0x700
	e7df01689a* InventoryPresetRuleData; // Offset: 0x718
	XtrmCharactersPrivateActor* DefaultPawnsPrivateActorClass; // Offset: 0x728
	int TeamSize; // Offset: 0x730
// ============================= //
Class GameMode.GameModeBase.Info.Actor.Object
	int NumSpectators; // Offset: 0x358
	bool bDelayedStart; // Offset: 0x35c
	112ea71b06* 410ea45517; // Offset: 0x360
	int NumTravellingPlayers; // Offset: 0x368
	float MinRespawnDelay; // Offset: 0x370
	bool bHandleDedicatedServerReplays; // Offset: 0x378
	int NumBots; // Offset: 0x37c
	TArray<PlayerState*> ffb7722c60; // Offset: 0x380
	int NumPlayers; // Offset: 0x390
	FName MatchState; // Offset: 0x394
// ============================= //
Class c40a9616ec.DataAsset.Object
	MapProperty b483b80b34; // Offset: 0x70
// ============================= //
Class ItemSpawnProcessor.Object
	SoftObjectPath 5373530675; // Offset: 0x68
	World* World; // Offset: 0x80
	MapProperty 79bb441e4c; // Offset: 0x90
	MapProperty 5397a67722; // Offset: 0xe0
	MapProperty 977fc211f0; // Offset: 0x130
	SoftObjectPath 31f3ef2c19; // Offset: 0x180
	SoftObjectPath 8afb6b057b; // Offset: 0x1a0
	DataTable* e9c37322c3; // Offset: 0x1b8
	DataTable* 8088dfbf55; // Offset: 0x1c8
	MapProperty a2d26660aa; // Offset: 0x220
	TArray<816c93a588> 02b37a7fe9; // Offset: 0x270
	DataTable* a692acfad2; // Offset: 0x280
	MapProperty 9ea3fdc4bf; // Offset: 0x288
	MapProperty d888590647; // Offset: 0x2d8
// ============================= //
Struct 816c93a588
	Actor* Key; // Offset: 0x0
	b684196c92 Value; // Offset: 0x20
// ============================= //
Struct b684196c92
	MapProperty GroupDataMap; // Offset: 0x0
// ============================= //
Class VehicleSpawnProcessor.Object
	DataTable* e9c37322c3; // Offset: 0x68
	MapProperty RawSpotGroupProperties; // Offset: 0x70
	float SpawnZOffsetFromFloor; // Offset: 0xc0
	421b357fe2 421b357fe2; // Offset: 0x120
	SoftObjectPath 662590cf48; // Offset: 0x560
// ============================= //
Struct 421b357fe2
	MapProperty 38a3008ea0; // Offset: 0x0
// ============================= //
Class a1cfcb7984.Object
	70fa3435ee* 7f8b8928e7; // Offset: 0x68
	269d541cc1* 626aa000bd; // Offset: 0x70
	b02f585484* 544ee98c20; // Offset: 0x78
	TArray<60bc8baa74*> c91013ea85; // Offset: 0xa8
// ============================= //
Class 70fa3435ee.60bc8baa74.Object
// ============================= //
Class 60bc8baa74.Object
// ============================= //
Class 269d541cc1.60bc8baa74.Object
	SetProperty 3d626c343c; // Offset: 0x90
	MapProperty a676b9df2b; // Offset: 0xe0
// ============================= //
Class b02f585484.60bc8baa74.Object
// ============================= //
Class ObserverShareableState.Actor.Object
	TArray<3b0fc35216> 1b2246276b; // Offset: 0x2b8
// ============================= //
Struct 3b0fc35216
	UInt32Property UniqueId; // Offset: 0x0
	TEnumAsByte<EItemPackageType> ItemPackageType; // Offset: 0x4
	Vector_NetQuantize100 ea83b41cd2; // Offset: 0x28
	TEnumAsByte<EItemPackageIconType> 9a835c700e; // Offset: 0x34
// ============================= //
Enum EItemPackageType
	EItemPackageType::Invalid = 0,
	EItemPackageType::CarePackage = 1,
	EItemPackageType::EItemPackageType_MAX = 2;
// ============================= //
Enum EItemPackageIconType
	EItemPackageIconType::Normal = 0,
	EItemPackageIconType::Flying = 1,
	EItemPackageIconType::Opened = 2,
	EItemPackageIconType::EItemPackageIconType_MAX = 3;
// ============================= //
Class InGameMissionProcessor.Object
	SoftObjectPath c7f70317a6; // Offset: 0xb8
	MapProperty c15f7785cf; // Offset: 0xd0
	SoftObjectPath e82e4f7b21; // Offset: 0x120
	SoftObjectPath d2c689aae3; // Offset: 0x138
// ============================= //
Class ebba92e057.Object
	MapProperty 127a9fbff4; // Offset: 0x70
// ============================= //
Class 8ad25a24eb.DataAsset.Object
	4a35afe79b 87430e5668; // Offset: 0x70
	4a35afe79b e38079288c; // Offset: 0x88
	4a35afe79b b56802cc2c; // Offset: 0xa0
// ============================= //
Struct 4a35afe79b
	bool c9ca2f0ebd; // Offset: 0x0
	TArray<TEnumAsByte<EDamageTypeCategory>> b9e9c92b87; // Offset: 0x8
// ============================= //
Class 9f3f1776b5.DataAsset.Object
	TArray<50e2192086> 676ad0b7a7; // Offset: 0x70
// ============================= //
Struct 50e2192086
	TArray<0f0df653f0> Datas; // Offset: 0x0
// ============================= //
Struct 0f0df653f0
	Vector Position; // Offset: 0x0
	uint8_t Type; // Offset: 0xc
	Rotator Rotator; // Offset: 0x10
	Vector2D RandomRotatorRange; // Offset: 0x1c
// ============================= //
Class e7df01689a.DataAsset.Object
	MapProperty a811667530; // Offset: 0x70
	TArray<TEnumAsByte<EEquipSlotID>> 2dbfe7da08; // Offset: 0xc0
	TArray<TEnumAsByte<EEquipSlotID>> fe09e7de05; // Offset: 0xd8
	TArray<TEnumAsByte<ESkinCategory>> 3c41fdcbdc; // Offset: 0xe8
	TArray<e86b26fba6> 583cc8bdf0; // Offset: 0xf8
// ============================= //
Function 588cfed57a
	uint8_t CraftingState; // Offset: 0x0
	int GunItemId; // Offset: 0x4
	TEnumAsByte<EAccessorySlot> WeaponSlot; // Offset: 0x8
	UInt32Property CustomizingID; // Offset: 0xc
// ============================= //
Struct e86b26fba6
	TArray<ad6650507d> ItemList; // Offset: 0x0
	bool bIsApplied; // Offset: 0x10
	FString PresetId; // Offset: 0x18
// ============================= //
Struct ad6650507d
	int ItemId; // Offset: 0x0
	TArray<int> AttachedItemIDs; // Offset: 0x8
// ============================= //
Class XtrmPhysicsWaterVolume.PhysicsVolume.Volume.Brush.Actor.Object
	TArray<Actor*> c843357c40; // Offset: 0x330
	OceanManager* OceanManager; // Offset: 0x350
	XtrmParticle* 1e83cd3b1f; // Offset: 0x358
	MapProperty 443be2cb9b; // Offset: 0x360
	XtrmParticle* 2cfc181b9b; // Offset: 0x3b0
// ============================= //
Class XtrmPlayerInfoWeaponWidget.XtrmUserWidget.UserWidget.Widget.Visual.Object
	SlateColor WarningLoadedColor; // Offset: 0x828
	MapProperty MeleeIconList; // Offset: 0x850
	WidgetSwitcher* State_WS; // Offset: 0x8b0
	SizeBox* GunState_Main; // Offset: 0x8b8
	WidgetSwitcher* Reloading_WS; // Offset: 0x8c0
	TextBlock* LoadedBullet_TB; // Offset: 0x8c8
	Image* ReloadingGun_IG; // Offset: 0x8d0
	TextBlock* RemainBullet_TB; // Offset: 0x8d8
	Image* FiringMode_IG; // Offset: 0x8e0
	TextBlock* BreathRatio_TB; // Offset: 0x8e8
	Image* Grenade_IG; // Offset: 0x8f0
	TextBlock* RemainGrenade_TB; // Offset: 0x8f8
	Image* Melee_IG; // Offset: 0x900
	TArray<Texture2D*> FiringModeImageList; // Offset: 0x908
	SlateColor NormalLoadedColor; // Offset: 0x920
	MapProperty GrenadeIconList; // Offset: 0x950
	SlateColor ErrorLoadedColor; // Offset: 0x9c0
	MaterialInstanceDynamic* ReloadingGun_IG_MI; // Offset: 0x9e8
// ============================= //
Class WidgetSwitcher.PanelWidget.Widget.Visual.Object
	int ActiveWidgetIndex; // Offset: 0x210
// ============================= //
Class SizeBox.ContentWidget.PanelWidget.Widget.Visual.Object
	float HeightOverride; // Offset: 0x1fc
	float WidthOverride; // Offset: 0x200
	float MaxAspectRatio; // Offset: 0x204
	float MaxDesiredHeight; // Offset: 0x208
	float MaxDesiredWidth; // Offset: 0x20c
	float MinDesiredHeight; // Offset: 0x210
	float MinAspectRatio; // Offset: 0x214
	float MinDesiredWidth; // Offset: 0x218
	bool bOverride_WidthOverride; // Offset: 0x230
	bool bOverride_HeightOverride; // Offset: 0x230
	bool bOverride_MinDesiredWidth; // Offset: 0x230
	bool bOverride_MinDesiredHeight; // Offset: 0x230
	bool bOverride_MaxDesiredWidth; // Offset: 0x230
	bool bOverride_MaxDesiredHeight; // Offset: 0x230
	bool bOverride_MinAspectRatio; // Offset: 0x230
	bool bOverride_MaxAspectRatio; // Offset: 0x230
// ============================= //
Class TextBlock.TextLayoutWidget.Widget.Visual.Object
	SlateColor ColorAndOpacity; // Offset: 0x1d8
	DelegateProperty TextDelegate; // Offset: 0x218
	bool bWrapWithInvalidationPanel; // Offset: 0x240
	DelegateProperty ShadowColorAndOpacityDelegate; // Offset: 0x244
	bool bSimpleTextMode; // Offset: 0x26c
	LinearColor ShadowColorAndOpacity; // Offset: 0x270
	TEnumAsByte<ETextTransformPolicy> TextTransformPolicy; // Offset: 0x280
	DelegateProperty ColorAndOpacityDelegate; // Offset: 0x284
	SlateBrush StrikeBrush; // Offset: 0x2b0
	Vector2D ShadowOffset; // Offset: 0x338
	SlateFontInfo Font; // Offset: 0x350
	float MinDesiredWidth; // Offset: 0x3a8
// ============================= //
Class TextLayoutWidget.Widget.Visual.Object
	float WrapTextAt; // Offset: 0x1b0
	TEnumAsByte<ETextJustify> Justification; // Offset: 0x1b4
	ShapedTextOptions ShapedTextOptions; // Offset: 0x1b5
	bool AutoWrapText; // Offset: 0x1b8
	float LineHeightPercentage; // Offset: 0x1bc
	Margin Margin; // Offset: 0x1c0
	TEnumAsByte<ETextWrappingPolicy> WrappingPolicy; // Offset: 0x1d0
// ============================= //
Enum ETextJustify
	ETextJustify::Left = 0,
	ETextJustify::Center = 1,
	ETextJustify::Right = 2,
	ETextJustify::ETextJustify_MAX = 3;
// ============================= //
Struct ShapedTextOptions
	bool bOverride_TextShapingMethod; // Offset: 0x0
	bool bOverride_TextFlowDirection; // Offset: 0x0
	TEnumAsByte<ETextShapingMethod> TextShapingMethod; // Offset: 0x1
	TEnumAsByte<ETextFlowDirection> TextFlowDirection; // Offset: 0x2
// ============================= //
Enum ETextShapingMethod
	ETextShapingMethod::Auto = 0,
	ETextShapingMethod::KerningOnly = 1,
	ETextShapingMethod::FullShaping = 2,
	ETextShapingMethod::ETextShapingMethod_MAX = 3;
// ============================= //
Enum ETextFlowDirection
	ETextFlowDirection::Auto = 0,
	ETextFlowDirection::LeftToRight = 1,
	ETextFlowDirection::RightToLeft = 2,
	ETextFlowDirection::ETextFlowDirection_MAX = 3;
// ============================= //
Enum ETextWrappingPolicy
	ETextWrappingPolicy::DefaultWrapping = 0,
	ETextWrappingPolicy::AllowPerCharacterWrapping = 1,
	ETextWrappingPolicy::ETextWrappingPolicy_MAX = 2;
// ============================= //
Enum ETextTransformPolicy
	ETextTransformPolicy::None = 0,
	ETextTransformPolicy::ToLower = 1,
	ETextTransformPolicy::ToUpper = 2,
	ETextTransformPolicy::ETextTransformPolicy_MAX = 3;
// ============================= //
Struct SlateBrush
	Vector2D ImageSize; // Offset: 0x8
	Margin Margin; // Offset: 0x10
	SlateColor TintColor; // Offset: 0x20
	Object* ResourceObject; // Offset: 0x48
	FName ResourceName; // Offset: 0x50
	Box2D 377c1d0706; // Offset: 0x58
	TEnumAsByte<ESlateBrushDrawType> DrawAs; // Offset: 0x6c
	TEnumAsByte<ESlateBrushTileType> Tiling; // Offset: 0x6d
	TEnumAsByte<ESlateBrushMirrorType> Mirroring; // Offset: 0x6e
	TEnumAsByte<ESlateBrushImageType> ImageType; // Offset: 0x6f
	bool 1fd4de77c7; // Offset: 0x80
	bool bHasUObject; // Offset: 0x80
// ============================= //
Struct Box2D
	Vector2D Min; // Offset: 0x0
	Vector2D Max; // Offset: 0x8
	uint8_t bIsValid; // Offset: 0x10
// ============================= //
Enum ESlateBrushDrawType
	ESlateBrushDrawType::NoDrawType = 0,
	ESlateBrushDrawType::Box = 1,
	ESlateBrushDrawType::Border = 2,
	ESlateBrushDrawType::Image = 3,
	ESlateBrushDrawType::ESlateBrushDrawType_MAX = 4;
// ============================= //
Enum ESlateBrushTileType
	ESlateBrushTileType::NoTile = 0,
	ESlateBrushTileType::Horizontal = 1,
	ESlateBrushTileType::Vertical = 2,
	ESlateBrushTileType::Both = 3,
	ESlateBrushTileType::ESlateBrushTileType_MAX = 4;
// ============================= //
Enum ESlateBrushMirrorType
	ESlateBrushMirrorType::NoMirror = 0,
	ESlateBrushMirrorType::Horizontal = 1,
	ESlateBrushMirrorType::Vertical = 2,
	ESlateBrushMirrorType::Both = 3,
	ESlateBrushMirrorType::ESlateBrushMirrorType_MAX = 4;
// ============================= //
Enum ESlateBrushImageType
	ESlateBrushImageType::NoImage = 0,
	ESlateBrushImageType::FullColor = 1,
	ESlateBrushImageType::Linear = 2,
	ESlateBrushImageType::ESlateBrushImageType_MAX = 3;
// ============================= //
Struct SlateFontInfo
	Object* FontObject; // Offset: 0x0
	Object* FontMaterial; // Offset: 0x8
	FontOutlineSettings OutlineSettings; // Offset: 0x10
	FName TypefaceFontName; // Offset: 0x40
	int Size; // Offset: 0x48
	int LetterSpacing; // Offset: 0x4c
// ============================= //
Struct FontOutlineSettings
	int OutlineSize; // Offset: 0x0
	bool bSeparateFillAlpha; // Offset: 0x4
	bool bApplyOutlineToDropShadows; // Offset: 0x5
	Object* OutlineMaterial; // Offset: 0x8
	LinearColor OutlineColor; // Offset: 0x10
// ============================= //
Class Image.Widget.Visual.Object
	DelegateProperty BrushDelegate; // Offset: 0x1c8
	LinearColor ColorAndOpacity; // Offset: 0x1f0
	DelegateProperty ColorAndOpacityDelegate; // Offset: 0x200
	SlateBrush Brush; // Offset: 0x230
	DelegateProperty OnMouseButtonDownEvent; // Offset: 0x2c8
// ============================= //
Class d1c0209cc4.Object
	MapProperty 758a84e85c; // Offset: 0xa8
	TArray<float> dce5dc7a24; // Offset: 0x150
	StringTable* 5d7dbaffa3; // Offset: 0x200
	AkAudioEvent* 02f9e5dc11; // Offset: 0x220
	MapProperty cef65e5816; // Offset: 0x260
// ============================= //
Class StringTable.Object
// ============================= //
Class CustomCarepackageRulesComponent.ActorComponent.Object
	TArray<cecbaa22ef> CustomCarepackageCircleArray; // Offset: 0x108
	float SecondsToKeepPackageInfoAfterLanding; // Offset: 0x118
	BluezoneController* 925c7fd5ed; // Offset: 0x1a4
	BattleRoyaleGameMode* XtrmGameMode; // Offset: 0x1c4
// ============================= //
Struct cecbaa22ef
	int AddWhiteZoneCarepackages; // Offset: 0x0
	int AddOutsideZoneCarepackages; // Offset: 0x4
// ============================= //
Class BluezoneController.ModeController.AIController.Controller.Actor.Object
	TArray<XtrmPassBluezoneArea*> f1f50d6d9a; // Offset: 0x438
	Vector2D ba4e36b702; // Offset: 0x468
	DataTable* 9b01be1bde; // Offset: 0x470
	BehaviorTree* b5f4984f4e; // Offset: 0x4a0
	StringTable* StringTable; // Offset: 0x4b0
	TArray<XtrmBlueZoneCreateArea*> 7177246a04; // Offset: 0x4b8
	float WaterVolumeRayHeight; // Offset: 0x4e4
	TArray<9c77e627eb> BattleRoyalePoisonGasDataArray; // Offset: 0x4e8
	TArray<XtrmPassBlueZoneAreaRectangle*> d64653e404; // Offset: 0x4f8
	TArray<Vector> 0f0d13268e; // Offset: 0x508
	4538cbb3a0 4538cbb3a0; // Offset: 0x520
	TArray<Vector> f2bbd6437b; // Offset: 0x530
	MapProperty BluezoneDataTableAssetMap; // Offset: 0x540
	TArray<float> PoisonWarningTime; // Offset: 0x5a0
	int NextPoisonGasIndex; // Offset: 0x5bc
// ============================= //
Class ModeController.AIController.Controller.Actor.Object
// ============================= //
Class AIController.Controller.Actor.Object
	NavigationQueryFilter* DefaultNavigationFilterClass; // Offset: 0x3d0
	BrainComponent* BrainComponent; // Offset: 0x3d8
	bool bStartAILogicOnPossess; // Offset: 0x3e0
	bool bStopAILogicOnUnposses; // Offset: 0x3e0
	bool d59408ea94; // Offset: 0x3e0
	bool bSkipExtraLOSChecks; // Offset: 0x3e0
	bool bAllowStrafe; // Offset: 0x3e0
	bool bWantsPlayerState; // Offset: 0x3e0
	bool bSetControlRotationFromPawnOrientation; // Offset: 0x3e0
	PawnActionsComponent* ActionsComp; // Offset: 0x3e8
	MulticastInlineDelegateProperty ReceiveMoveCompleted; // Offset: 0x3f0
	BlackboardComponent* Blackboard; // Offset: 0x408
	PathFollowingComponent* PathFollowingComponent; // Offset: 0x410
	GameplayTasksComponent* ddde55a24b; // Offset: 0x418
	AIPerceptionComponent* 11fa6c08cb; // Offset: 0x430
// ============================= //
Class XtrmPassBluezoneArea.XtrmPassArea.Actor.Object
// ============================= //
Class XtrmPassArea.Actor.Object
	SphereComponent* SphereComponent; // Offset: 0x2b8
// ============================= //
Class NavigationQueryFilter.Object
	NavigationFilterFlags ExcludeFlags; // Offset: 0x68
	NavigationFilterFlags IncludeFlags; // Offset: 0x6c
	TArray<NavigationFilterArea> Areas; // Offset: 0x70
// ============================= //
Struct NavigationFilterFlags
	bool 3effeaa399; // Offset: 0x0
	bool 3a2fc46e44; // Offset: 0x0
	bool 9a71502366; // Offset: 0x0
	bool bbbb4331cf; // Offset: 0x0
	bool 18923cba46; // Offset: 0x0
	bool 20d22e465b; // Offset: 0x0
	bool 0ad75e72e2; // Offset: 0x0
	bool 18e6565494; // Offset: 0x0
	bool d6482d0600; // Offset: 0x1
	bool 74ed4aa863; // Offset: 0x1
	bool 05df77ecea; // Offset: 0x1
	bool dfc64c06b0; // Offset: 0x1
	bool 2f0700e40d; // Offset: 0x1
	bool 630e80c141; // Offset: 0x1
	bool 1e7234b4cb; // Offset: 0x1
	bool e800d47c04; // Offset: 0x1
// ============================= //
Struct NavigationFilterArea
	NavArea* AreaClass; // Offset: 0x0
	float b1e1aa51a6; // Offset: 0x8
	float 094c1b6634; // Offset: 0xc
	bool cee918ed5a; // Offset: 0x10
	bool bOverrideTravelCost; // Offset: 0x10
	bool bOverrideEnteringCost; // Offset: 0x10
// ============================= //
Class NavArea.2571ea275f.Object
	float DefaultCost; // Offset: 0x6c
	float FixedAreaEnteringCost; // Offset: 0x70
	Color DrawColor; // Offset: 0x74
	NavAgentSelector SupportedAgents; // Offset: 0x78
	bool bSupportsAgent0; // Offset: 0x7c
	bool bSupportsAgent1; // Offset: 0x7c
	bool bSupportsAgent2; // Offset: 0x7c
	bool bSupportsAgent3; // Offset: 0x7c
	bool bSupportsAgent4; // Offset: 0x7c
	bool bSupportsAgent5; // Offset: 0x7c
	bool bSupportsAgent6; // Offset: 0x7c
	bool bSupportsAgent7; // Offset: 0x7c
	bool bSupportsAgent8; // Offset: 0x7d
	bool bSupportsAgent9; // Offset: 0x7d
	bool bSupportsAgent10; // Offset: 0x7d
	bool bSupportsAgent11; // Offset: 0x7d
	bool bSupportsAgent12; // Offset: 0x7d
	bool bSupportsAgent13; // Offset: 0x7d
	bool bSupportsAgent14; // Offset: 0x7d
	bool bSupportsAgent15; // Offset: 0x7d
// ============================= //
Class BehaviorTree.Object
	TArray<34d9a53d6e> 0b631f5a1c; // Offset: 0x78
	BTCompositeNode* RootNode; // Offset: 0x88
	BlackboardData* BlackboardAsset; // Offset: 0x90
	TArray<BTDecorator*> 029448f009; // Offset: 0x98
// ============================= //
Struct 34d9a53d6e
	TEnumAsByte<EBTDecoratorLogic> Operation; // Offset: 0x0
	uint16_t Number; // Offset: 0x2
// ============================= //
Enum EBTDecoratorLogic
	EBTDecoratorLogic::Invalid = 0,
	EBTDecoratorLogic::Test = 1,
	EBTDecoratorLogic::And = 2,
	EBTDecoratorLogic::Or = 3,
	EBTDecoratorLogic::Not = 4,
	EBTDecoratorLogic::EBTDecoratorLogic_MAX = 5;
// ============================= //
Class BTCompositeNode.BTNode.Object
	TArray<BTService*> Services; // Offset: 0xb0
	bool 5e7b276990; // Offset: 0xc0
	TArray<d9207e1243> Children; // Offset: 0xc8
// ============================= //
Class BTNode.Object
	BehaviorTree* 2d01841106; // Offset: 0x70
	BTCompositeNode* ParentNode; // Offset: 0x78
// ============================= //
Class BTService.BTAuxiliaryNode.BTNode.Object
	bool e22d53b4e3; // Offset: 0xa4
	bool 9d0b4becd3; // Offset: 0xa4
// ============================= //
Class BTAuxiliaryNode.BTNode.Object
// ============================= //
Struct d9207e1243
	BTCompositeNode* f57a4e1d70; // Offset: 0x0
	BTTaskNode* 8310b31475; // Offset: 0x8
	TArray<BTDecorator*> Decorators; // Offset: 0x10
	TArray<34d9a53d6e> 766f16855b; // Offset: 0x20
// ============================= //
Class BTTaskNode.BTNode.Object
	TArray<BTService*> Services; // Offset: 0x98
	bool a96696bfc0; // Offset: 0xa8
// ============================= //
Class BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool 5453f5a1b8; // Offset: 0x99
// ============================= //
Class BlackboardData.DataAsset.Object
	TArray<BlackboardEntry> Keys; // Offset: 0x70
	bool 62ca853fe5; // Offset: 0x80
	BlackboardData* Parent; // Offset: 0x88
// ============================= //
Struct BlackboardEntry
	FName EntryName; // Offset: 0x0
	BlackboardKeyType* KeyType; // Offset: 0x8
	bool 87c732a8f3; // Offset: 0x10
// ============================= //
Class BlackboardKeyType.Object
// ============================= //
Class XtrmBlueZoneCreateArea.Actor.Object
	SphereComponent* SphereComponent; // Offset: 0x2b8
// ============================= //
Struct 9c77e627eb
	float StartDelay; // Offset: 0x0
	float WarningDuration; // Offset: 0x4
	float PoisonGasDamagePerSecond; // Offset: 0x8
	float ReleaseDuration; // Offset: 0xc
	float DamageMagnifier; // Offset: 0x10
	float RadiusRate; // Offset: 0x14
	CurveFloat* DamageMagnifierCurve; // Offset: 0x18
	float RandomRadiusRate; // Offset: 0x20
	float DamageMagnifierForDistance; // Offset: 0x24
	float SpreadRatio; // Offset: 0x28
// ============================= //
Class XtrmPassBlueZoneAreaRectangle.XtrmPassAreaRectangle.Actor.Object
// ============================= //
Class XtrmPassAreaRectangle.Actor.Object
	BoxComponent* BoxComponent; // Offset: 0x2e0
// ============================= //
Struct 4538cbb3a0
	TArray<9c77e627eb> 2b38f9dac8; // Offset: 0x0
// ============================= //
Class BrainComponent.ActorComponent.Object
	BlackboardComponent* 503c2d79c4; // Offset: 0x110
	AIController* 035e536f33; // Offset: 0x138
// ============================= //
Class BlackboardComponent.ActorComponent.Object
	BlackboardData* BlackboardAsset; // Offset: 0x108
	BrainComponent* BrainComp; // Offset: 0x120
	BlackboardData* DefaultBlackboardAsset; // Offset: 0x128
	TArray<BlackboardKeyType*> edd2e8503b; // Offset: 0x140
// ============================= //
Class PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn; // Offset: 0x108
	TArray<ba31f297cc> b5b09953f5; // Offset: 0x110
	PawnAction* CurrentAction; // Offset: 0x120
	TArray<850d6b5c11> ActionEvents; // Offset: 0x130
// ============================= //
Struct ba31f297cc
	PawnAction* 060903f739; // Offset: 0x0
// ============================= //
Class PawnAction.Object
	PawnAction* ChildAction; // Offset: 0x70
	PawnActionsComponent* OwnerComponent; // Offset: 0x78
	BrainComponent* BrainComp; // Offset: 0xa0
	Object* Instigator; // Offset: 0xb0
	bool bAllowNewSameClassInstance; // Offset: 0xc0
	bool bReplaceActiveSameClassInstance; // Offset: 0xc0
	bool bShouldPauseMovement; // Offset: 0xc0
	bool bAlwaysNotifyOnFinished; // Offset: 0xc0
	PawnAction* 3f43b3261f; // Offset: 0xd0
// ============================= //
Struct 850d6b5c11
	PawnAction* Action; // Offset: 0x0
// ============================= //
Class PathFollowingComponent.ActorComponent.Object
	NavigationData* 46f5a0bd5f; // Offset: 0x160
	NavMovementComponent* MovementComp; // Offset: 0x190
// ============================= //
Class NavigationData.Actor.Object
	NavDataConfig NavDataConfig; // Offset: 0x2c0
	bool 4e99c0ec42; // Offset: 0x360
	bool bForceRebuildOnLoad; // Offset: 0x360
	bool bAutoDestroyWhenNoNavigation; // Offset: 0x360
	bool bCanBeMainNavData; // Offset: 0x360
	bool bCanSpawnOnRebuild; // Offset: 0x360
	bool bRebuildAtRuntime; // Offset: 0x360
	float ObservedPathsTickInterval; // Offset: 0x364
	TEnumAsByte<ERuntimeGenerationType> RuntimeGeneration; // Offset: 0x380
	TArray<SupportedAreaData> 5bb67d2550; // Offset: 0x440
	PrimitiveComponent* RenderingComp; // Offset: 0x478
// ============================= //
Struct NavDataConfig.a057bbcf4b.ebc7160fb5
	FName Name; // Offset: 0x30
	Color Color; // Offset: 0x38
	Vector DefaultQueryExtent; // Offset: 0x3c
	Actor* NavigationDataClass; // Offset: 0x48
	Actor* NavDataClass; // Offset: 0x50
// ============================= //
Enum ERuntimeGenerationType
	ERuntimeGenerationType::Static = 0,
	ERuntimeGenerationType::DynamicModifiersOnly = 1,
	ERuntimeGenerationType::Dynamic = 2,
	ERuntimeGenerationType::LegacyGeneration = 3,
	ERuntimeGenerationType::ERuntimeGenerationType_MAX = 4;
// ============================= //
Struct SupportedAreaData
	FString ec52510e03; // Offset: 0x0
	int c5d285996f; // Offset: 0x10
	Object* AreaClass; // Offset: 0x18
// ============================= //
Class GameplayTasksComponent.ActorComponent.Object
	bool 7c1bfba364; // Offset: 0x114
	TArray<GameplayTask*> c1c281fa67; // Offset: 0x118
	TArray<GameplayTask*> 6c58869b11; // Offset: 0x128
	TArray<GameplayTask*> 368cdb1bb4; // Offset: 0x138
	MulticastInlineDelegateProperty OnClaimedResourcesChange; // Offset: 0x150
	TArray<GameplayTask*> f41d860b5d; // Offset: 0x178
// ============================= //
Class GameplayTask.Object
	TEnumAsByte<ETaskResourceOverlapPolicy> ResourceOverlapPolicy; // Offset: 0xc4
	FName InstanceName; // Offset: 0xc8
	GameplayTask* 8310b31475; // Offset: 0xd0
// ============================= //
Enum ETaskResourceOverlapPolicy
	ETaskResourceOverlapPolicy::StartOnTop = 0,
	ETaskResourceOverlapPolicy::StartAtEnd = 1,
	ETaskResourceOverlapPolicy::ETaskResourceOverlapPolicy_MAX = 2;
// ============================= //
Class AIPerceptionComponent.ActorComponent.Object
	MulticastInlineDelegateProperty OnPerceptionUpdated; // Offset: 0x108
	MulticastInlineDelegateProperty OnTargetPerceptionInfoUpdated; // Offset: 0x118
	MulticastInlineDelegateProperty OnTargetPerceptionUpdated; // Offset: 0x128
	TArray<AISenseConfig*> 9cbccbad16; // Offset: 0x198
	AISense* fd77924e19; // Offset: 0x1a8
	AIController* 035e536f33; // Offset: 0x1c8
// ============================= //
Class AISenseConfig.Object
	Color DebugColor; // Offset: 0x68
	float MaxAge; // Offset: 0x6c
	bool bStartsEnabled; // Offset: 0x70
// ============================= //
Class AISense.Object
	AIPerceptionSystem* 6d5489f4cb; // Offset: 0x68
	bool bWantsNewPawnNotification; // Offset: 0x80
	bool bAutoRegisterAllPawnsAsSources; // Offset: 0x80
	float DefaultExpirationAge; // Offset: 0xb0
	TEnumAsByte<EAISenseNotifyType> NotifyType; // Offset: 0xb4
// ============================= //
Class AIPerceptionSystem.AISubsystem.Object
	TArray<AISense*> c8d2794dda; // Offset: 0x138
	float PerceptionAgingRate; // Offset: 0x180
// ============================= //
Class AISubsystem.Object
	AISystem* AISystem; // Offset: 0x70
// ============================= //
Class AISystem.AISystemBase.Object
	float PathfollowingRegularPathPointAcceptanceRadius; // Offset: 0x94
	bool bAllowControllersAsEQSQuerier; // Offset: 0x98
	bool bForgetStaleActors; // Offset: 0x99
	bool bFinishMoveOnGoalOverlap; // Offset: 0x9a
	EnvQueryManager* 49c6263c07; // Offset: 0xa0
	float AcceptanceRadius; // Offset: 0xa8
	BehaviorTreeManager* BehaviorTreeManager; // Offset: 0xb0
	AIHotSpotManager* HotSpotManager; // Offset: 0x108
	AIPerceptionSystem* PerceptionSystem; // Offset: 0x110
	float PathfollowingNavLinkAcceptanceRadius; // Offset: 0x118
	bool bAddBlackboardSelfKey; // Offset: 0x11c
	TArray<AIAsyncTaskBlueprintProxy*> cbee12b9a6; // Offset: 0x120
	bool bAcceptPartialPaths; // Offset: 0x130
	TEnumAsByte<ECollisionChannel> DefaultSightCollisionChannel; // Offset: 0x131
	bool bEnableBTAITasks; // Offset: 0x132
	SoftClassPath HotSpotManagerClassName; // Offset: 0x138
	bool bAllowStrafing; // Offset: 0x150
	SoftClassPath PerceptionSystemClassName; // Offset: 0x158
	601435b7fa* a2b184364c; // Offset: 0x170
	bool bEnableDebuggerPlugin; // Offset: 0x178
// ============================= //
Class EnvQueryManager.AISubsystem.Object
	TArray<EnvQueryContext*> 3f44730034; // Offset: 0x80
	TArray<6796b98e38> 7525ec1f27; // Offset: 0xa0
	TArray<adb9f42eda*> f540a80618; // Offset: 0xb0
	int QueryCountWarningThreshold; // Offset: 0x118
	float MaxAllowedTestingTime; // Offset: 0x11c
	bool bTestQueriesUsingBreadth; // Offset: 0x120
	double QueryCountWarningInterval; // Offset: 0x178
// ============================= //
Class EnvQueryContext.Object
// ============================= //
Struct 6796b98e38
	EnvQuery* Template; // Offset: 0x0
// ============================= //
Class EnvQuery.DataAsset.Object
	FName 01dc586354; // Offset: 0x70
	TArray<EnvQueryOption*> Options; // Offset: 0x78
// ============================= //
Class EnvQueryOption.Object
	TArray<EnvQueryTest*> Tests; // Offset: 0x68
	EnvQueryGenerator* Generator; // Offset: 0x78
// ============================= //
Class EnvQueryTest.ca40f60da7.Object
	AIDataProviderFloatValue f5c2f47eee; // Offset: 0x70
	AIDataProviderFloatValue ReferenceValue; // Offset: 0xb0
	AIDataProviderFloatValue 80a40da2c3; // Offset: 0xf8
	AIDataProviderFloatValue ScoringFactor; // Offset: 0x140
	AIDataProviderFloatValue d1b9cf5386; // Offset: 0x178
	AIDataProviderBoolValue BoolValue; // Offset: 0x1b8
	TEnumAsByte<EEQSNormalizationType> acc2642b4b; // Offset: 0x1f6
	AIDataProviderFloatValue 05e40131ec; // Offset: 0x1f8
	bool 76c6f64fc7; // Offset: 0x230
// ============================= //
Class ca40f60da7.Object
// ============================= //
Struct AIDataProviderFloatValue.8f29696e52.cdd8b4bd45
	float DefaultValue; // Offset: 0x30
// ============================= //
Struct 8f29696e52.cdd8b4bd45
	Object* PropertyType; // Offset: 0x20
// ============================= //
Struct cdd8b4bd45
	2b12dfcb54* d20e569193; // Offset: 0x10
	FName d336fb6caa; // Offset: 0x18
// ============================= //
Class 2b12dfcb54.Object
// ============================= //
Struct AIDataProviderBoolValue.8f29696e52.cdd8b4bd45
	bool DefaultValue; // Offset: 0x30
// ============================= //
Enum EEQSNormalizationType
	EEQSNormalizationType::Absolute = 0,
	EEQSNormalizationType::RelativeToScores = 1,
	EEQSNormalizationType::EEQSNormalizationType_MAX = 2;
// ============================= //
Class EnvQueryGenerator.ca40f60da7.Object
	EnvQueryItemType* ItemType; // Offset: 0x80
	bool 6067fd3e19; // Offset: 0x88
// ============================= //
Class EnvQueryItemType.Object
// ============================= //
Class adb9f42eda.Object
	int QueryID; // Offset: 0x70
	int OptionIndex; // Offset: 0x74
	EnvQueryItemType* ItemType; // Offset: 0x78
	MulticastInlineDelegateProperty OnQueryFinishedEvent; // Offset: 0x98
// ============================= //
Class BehaviorTreeManager.Object
	TArray<BehaviorTreeComponent*> ActiveComponents; // Offset: 0x68
	int MaxDebuggerSteps; // Offset: 0x78
	TArray<ed4cff5b08> 3a5e26536f; // Offset: 0x80
// ============================= //
Class BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	BehaviorTree* DefaultBehaviorTreeAsset; // Offset: 0x160
	TArray<BTNode*> 4940471f5d; // Offset: 0x2e0
// ============================= //
Struct ed4cff5b08
	BehaviorTree* Asset; // Offset: 0x0
	BTCompositeNode* Template; // Offset: 0x8
// ============================= //
Class AIHotSpotManager.Object
// ============================= //
Class AIAsyncTaskBlueprintProxy.Object
	MulticastInlineDelegateProperty OnFail; // Offset: 0xb8
	MulticastInlineDelegateProperty OnSuccess; // Offset: 0xc8
// ============================= //
Class 601435b7fa.Object
// ============================= //
Enum EAISenseNotifyType
	EAISenseNotifyType::OnEveryPerception = 0,
	EAISenseNotifyType::OnPerceptionChange = 1,
	EAISenseNotifyType::EAISenseNotifyType_MAX = 2;
// ============================= //
Class BattleRoyaleGameMode.XtrmGameMode.GameMode.GameModeBase.Info.Actor.Object
	XtrmDroneStoreComponent* DroneStoreComponent; // Offset: 0x738
	BRRebirthSystemComponent* RebirthSystemComponent; // Offset: 0x748
	float MultiplierCarePackageNormal; // Offset: 0x750
	DataTable* 892f645cb1; // Offset: 0x7d0
	bool bFlareGun; // Offset: 0x7d8
	MapProperty 47f8a42845; // Offset: 0x818
	TArray<DataTable*> 4e6db3e8cb; // Offset: 0x868
	MapProperty 01d4802756; // Offset: 0x890
	SoftClassPath CustomCarepackageRulesComponentClass; // Offset: 0x8e8
	CarePackageController* CarePackageController; // Offset: 0x950
	GraveyardCrowProcessor* GraveyardCrowProcessor; // Offset: 0x960
	DataTable* BotCostumeItemsTable; // Offset: 0x970
	MapProperty 9510d3f6c0; // Offset: 0x978
	GraveyardCrowProcessor* GraveyardCrowProcessorClass; // Offset: 0x9d0
	RailVehicleProcessor* RailVehicleProcessorClass; // Offset: 0x9f8
	MapProperty 6e1906a3ee; // Offset: 0xa08
	TArray<bd392f72af> 89a24bce30; // Offset: 0xa60
	SoftClassPath CarePackageControllerClass; // Offset: 0xab8
	AIController* NewAIControllerClass; // Offset: 0xad0
	RailVehicleProcessor* RailVehicleProcessor; // Offset: 0xad8
	ModeController* ModeControllerClass; // Offset: 0xae0
	ModeController* RedZoneControllerClass; // Offset: 0xaf8
	DataTable* BotItemsTable; // Offset: 0xb00
	AiActingComponent* AiActingComponent; // Offset: 0xb10
	TransportAircraftControllerComponent* TransportAircraftController; // Offset: 0xb18
	TransportAircraft* fb725ed272; // Offset: 0xb30
	MapProperty a3ad27936d; // Offset: 0xb38
// ============================= //
Class XtrmDroneStoreComponent.ActorComponent.Object
	fe8533f405* DroneCoinDataAsset; // Offset: 0x110
	MapProperty 2d4d4c4895; // Offset: 0x198
	MapProperty b765ef9055; // Offset: 0x240
// ============================= //
Class fe8533f405.ItemDataAsset.8c272391a6.DataAsset.Object
	4e89b32bdf 4e89b32bdf; // Offset: 0x218
// ============================= //
Class ItemDataAsset.8c272391a6.DataAsset.Object
	ItemData Data; // Offset: 0x158
// ============================= //
Struct 4e89b32bdf
	MapProperty d7ccda7a23; // Offset: 0x0
	MapProperty 1bb8ffd0d0; // Offset: 0x50
// ============================= //
Struct ItemData
	int 46a9be79eb; // Offset: 0x0
	int d23fa0002e; // Offset: 0x4
	AkAudioEvent* InventoryPutSoundAk; // Offset: 0x8
	float ecaaf31cf5; // Offset: 0x10
	int 87e419543a; // Offset: 0x14
	bool 78dd4b3ea6; // Offset: 0x18
	FText 615d915dc1; // Offset: 0x20
	AkAudioEvent* DropSoundAk; // Offset: 0x38
	bool 34fc8d495b; // Offset: 0x40
	bool be5b8fa3ce; // Offset: 0x41
	int SortPriority; // Offset: 0x44
	bool 2b5bbc9e35; // Offset: 0x48
	bool 6d8170b4b2; // Offset: 0x49
	bool 8dc83607fd; // Offset: 0x4a
	Vector f5a6fc2cc3; // Offset: 0x4c
	Rotator 6e0aaadef8; // Offset: 0x58
	StaticMesh* DroppedMesh; // Offset: 0x68
	AkAudioEvent* PickUpSoundAk; // Offset: 0xa8
	uint16_t HealthMax; // Offset: 0xb0
	float c51b8e485c; // Offset: 0xb4
	bool 40ef457221; // Offset: 0xb8
// ============================= //
Class BRRebirthSystemComponent.ActorComponent.Object
	SetProperty f6cdf98940; // Offset: 0x108
	StringTable* WalkieTalkieStringTable; // Offset: 0x160
	float WalkieTalkieAvailableLimitTime; // Offset: 0x168
	TArray<TransportAircraftWalkieTalkie*> d036c3dd4c; // Offset: 0x170
	TransportAircraftWalkieTalkie* 8f9388fbf7; // Offset: 0x1a0
	Vector2D FlyingHeight; // Offset: 0x1a8
// ============================= //
Class TransportAircraftWalkieTalkie.TransportAircraft.Pawn.Actor.Object
// ============================= //
Class TransportAircraft.Pawn.Actor.Object
	Vector2D 8de464c277; // Offset: 0x398
	Vector2D c4959c2da2; // Offset: 0x3b0
	ArrowComponent* ArrowComponent; // Offset: 0x3b8
	TransportAircraftMovement* MovementComponent; // Offset: 0x3c0
	SkinID e570383faa; // Offset: 0x3c8
	XtrmCloudStartWidget* 8089c6ff3d; // Offset: 0x3d8
	Rotator ebe5926411; // Offset: 0x3e0
	XtrmCloudStartWidget* d4f4c3590a; // Offset: 0x3f0
	TransportAircraftSeatComponent* SeatComponent; // Offset: 0x400
	ab9871350c* 0330641f5a; // Offset: 0x408
	SplineComponent* SplineComponent; // Offset: 0x448
	bool bIsVisible; // Offset: 0x498
	AkAudioEvent* ded5f35088; // Offset: 0x4a0
	CameraAnim* 55adb381cd; // Offset: 0x4e0
	StaticMeshComponent* MeshComponent; // Offset: 0x4f0
	AkComponent* AkSoundCom; // Offset: 0x4f8
	TArray<f5c9b7821f> ControlPoints; // Offset: 0x500
	AkAudioEvent* c51a751b85; // Offset: 0x510
// ============================= //
Class TransportAircraftMovement.SimpleInterpolationMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
// ============================= //
Class SimpleInterpolationMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bUseOnlyYawRotation; // Offset: 0x1a5
	float RotationInterpTime; // Offset: 0x1b8
	float ForceMoveTime; // Offset: 0x1d4
	bool bUseSweepMove; // Offset: 0x1d8
	float LocationInterpTime; // Offset: 0x234
// ============================= //
Class XtrmCloudStartWidget.XtrmUserWidget.UserWidget.Widget.Visual.Object
	Image* Cloud; // Offset: 0x818
	MaterialInstanceDynamic* CloudInst; // Offset: 0x830
// ============================= //
Class TransportAircraftSeatComponent.VehicleSeatComponent.ActorComponent.Object
	uint8_t PassengerCount; // Offset: 0x27c
	bool 6094c17b43; // Offset: 0x27d
// ============================= //
Class ab9871350c.EquipmentDataAsset.ItemDataAsset.8c272391a6.DataAsset.Object
	SkydiveComponent* 1a8eb0c104; // Offset: 0x588
// ============================= //
Class EquipmentDataAsset.ItemDataAsset.8c272391a6.DataAsset.Object
	05c258823a c0a901d5e1; // Offset: 0x218
	683202cf8d 683202cf8d; // Offset: 0x238
	05c258823a 8a53937ef1; // Offset: 0x248
	EquipmentItemData cde83ae459; // Offset: 0x268
// ============================= //
Struct 05c258823a
	b20785a31e 95d1723acb; // Offset: 0x0
	TArray<b20785a31e> a5ee055e36; // Offset: 0x10
// ============================= //
Struct b20785a31e
	TArray<UInt32Property> BitMask; // Offset: 0x0
// ============================= //
Struct 683202cf8d
	TEnumAsByte<ETopOuter_Fastening> 9f77433ac2; // Offset: 0x0
	TEnumAsByte<EMask_Sub> c1358653a8; // Offset: 0x1
	TEnumAsByte<ETopOuter_Fit> 3a2e519781; // Offset: 0x2
	TEnumAsByte<ECap_Sub> 0aa4b3085f; // Offset: 0x3
	TEnumAsByte<EHairMeshChange> 241de4fdb6; // Offset: 0x4
	TEnumAsByte<ETopOuter_Ghillie> c980f11e99; // Offset: 0x5
	TEnumAsByte<ETopOuter_Head> af21bac601; // Offset: 0x6
	TEnumAsByte<EShoes_Fit> 66244ec5f9; // Offset: 0x7
	TEnumAsByte<EPants_Fit> 9ebd11a0dc; // Offset: 0x8
	TEnumAsByte<EMask_Shape> 25da4b2381; // Offset: 0x9
	TEnumAsByte<EPants_Shape> 64ed98fbeb; // Offset: 0xa
	TEnumAsByte<EGloves_Fit> 36c89604cb; // Offset: 0xb
	uint8_t 3c9d634729; // Offset: 0xc
// ============================= //
Enum ETopOuter_Fastening
	ETopOuter_Fastening::Close = 0,
	ETopOuter_Fastening::Open = 1,
	ETopOuter_Fastening::ETopOuter_MAX = 2;
// ============================= //
Enum EMask_Sub
	EMask_Sub::None = 0,
	EMask_Sub::Hide = 1,
	EMask_Sub::EMask_MAX = 2;
// ============================= //
Enum ETopOuter_Fit
	ETopOuter_Fit::None = 0,
	ETopOuter_Fit::Slim = 1,
	ETopOuter_Fit::Wide = 2,
	ETopOuter_Fit::ETopOuter_MAX = 3;
// ============================= //
Enum ECap_Sub
	ECap_Sub::None = 0,
	ECap_Sub::Hide = 1,
	ECap_Sub::ECap_MAX = 2;
// ============================= //
Enum EHairMeshChange
	EHairMeshChange::None = 0,
	EHairMeshChange::CutType_001 = 1,
	EHairMeshChange::EHairMeshChange_MAX = 2;
// ============================= //
Enum ETopOuter_Ghillie
	ETopOuter_Ghillie::None = 0,
	ETopOuter_Ghillie::Ghillie = 1,
	ETopOuter_Ghillie::ETopOuter_MAX = 2;
// ============================= //
Enum ETopOuter_Head
	ETopOuter_Head::None = 0,
	ETopOuter_Head::Hood = 1,
	ETopOuter_Head::ETopOuter_MAX = 2;
// ============================= //
Enum EShoes_Fit
	EShoes_Fit::None = 0,
	EShoes_Fit::Slim = 1,
	EShoes_Fit::Wide = 2,
	EShoes_Fit::SuperWide = 3,
	EShoes_Fit::EShoes_MAX = 4;
// ============================= //
Enum EPants_Fit
	EPants_Fit::None = 0,
	EPants_Fit::Slim = 1,
	EPants_Fit::Wide = 2,
	EPants_Fit::EPants_MAX = 3;
// ============================= //
Enum EMask_Shape
	EMask_Shape::None = 0,
	EMask_Shape::Full = 1,
	EMask_Shape::Thief = 2,
	EMask_Shape::Mouth = 3,
	EMask_Shape::EMask_MAX = 4;
// ============================= //
Enum EPants_Shape
	EPants_Shape::Pants = 0,
	EPants_Shape::Skirt = 1,
	EPants_Shape::EPants_MAX = 2;
// ============================= //
Enum EGloves_Fit
	EGloves_Fit::None = 0,
	EGloves_Fit::Slim = 1,
	EGloves_Fit::Wide = 2,
	EGloves_Fit::SuperWide = 3,
	EGloves_Fit::EGloves_MAX = 4;
// ============================= //
Struct EquipmentItemData
	int b98e128066; // Offset: 0x0
	bool 490b2cf923; // Offset: 0x4
	TArray<int> cdab6b16d2; // Offset: 0x8
	TEnumAsByte<EDurabilityConsumeType> 1892a48b32; // Offset: 0x18
	SkeletalMesh* ChangeFemaleMesh; // Offset: 0x20
	bool 9cb1e5ded7; // Offset: 0x60
	SkeletalMesh* ChangeMaleMesh; // Offset: 0x68
	TEnumAsByte<EEquipableItemSoundGroup> SoundGroup; // Offset: 0xa8
	float 2dfa2f9a41; // Offset: 0xac
	int 747a194bc7; // Offset: 0xb0
	float 65fd334ee0; // Offset: 0xb4
	SkeletalMesh* MaleMesh; // Offset: 0xd0
	TArray<86956a90db> e34d33e9bb; // Offset: 0x110
	TEnumAsByte<EAmmoReductionRateArithmeticType> fa7f4b9f67; // Offset: 0x120
	float 825e7f8686; // Offset: 0x124
	d117b6ba3d* bc5fc5b0d9; // Offset: 0x128
	MapProperty 7d0b924ddc; // Offset: 0x130
	TArray<86956a90db> 4449319739; // Offset: 0x180
	bool IsCostume; // Offset: 0x190
	4cb914cd14 4cb914cd14; // Offset: 0x191
	int 0bfc6754b4; // Offset: 0x194
	SkeletalMesh* 7dd2aab2ae; // Offset: 0x198
	SkeletalMesh* 43bdcc0619; // Offset: 0x1d8
	SkeletalMesh* FemaleMesh; // Offset: 0x218
	bool aab075fdf3; // Offset: 0x258
	SkeletalMesh* 165d46f5c5; // Offset: 0x260
	TEnumAsByte<EEquipSlotID> EquipSlotID; // Offset: 0x2a0
	AkAudioEvent* 45e268ad67; // Offset: 0x2a8
	int HiddenSlotBitmask; // Offset: 0x2b0
	bool 3517d6235c; // Offset: 0x2b4
	TEnumAsByte<EEquipableItemSoundType> 4825856e8e; // Offset: 0x2b5
	float b2f257634c; // Offset: 0x2b8
	bool bApplyCostumeSkin; // Offset: 0x2bc
	bool bChangable; // Offset: 0x2bd
	SkeletalMesh* a31db06f73; // Offset: 0x2c0
	float 75e8c0139b; // Offset: 0x300
	AkAudioEvent* 92483b001d; // Offset: 0x308
	TEnumAsByte<ESlotOffsetType> b8957c18db; // Offset: 0x310
	bool f3cac1c081; // Offset: 0x311
// ============================= //
Enum EDurabilityConsumeType
	EDurabilityConsumeType::TotalDamage = 0,
	EDurabilityConsumeType::AbsorbDamage = 1,
	EDurabilityConsumeType::EDurabilityConsumeType_MAX = 2;
// ============================= //
Enum EEquipableItemSoundGroup
	EEquipableItemSoundGroup::Default = 0,
	EEquipableItemSoundGroup::Shoes = 1,
	EEquipableItemSoundGroup::EEquipableItemSoundGroup_MAX = 2;
// ============================= //
Struct 86956a90db
	Vector Center; // Offset: 0x0
	Vector Normal; // Offset: 0xc
	float 8c4144ed0d; // Offset: 0x18
	float d1abbf7441; // Offset: 0x1c
	bool 4b70bf6096; // Offset: 0x20
	bool 0a414bd692; // Offset: 0x21
	bool 6c39927401; // Offset: 0x22
	TEnumAsByte<ECuttingPlaneType> 1056f174c6; // Offset: 0x23
// ============================= //
Enum ECuttingPlaneType
	ECuttingPlaneType::Hands = 0,
	ECuttingPlaneType::Feet = 1,
	ECuttingPlaneType::Hood = 2,
	ECuttingPlaneType::MaxOrNone = 3,
	ECuttingPlaneType::ECuttingPlaneType_MAX = 4;
// ============================= //
Enum EAmmoReductionRateArithmeticType
	EAmmoReductionRateArithmeticType::Multiplication = 0,
	EAmmoReductionRateArithmeticType::Addition = 1,
	EAmmoReductionRateArithmeticType::EAmmoReductionRateArithmeticType_MAX = 2;
// ============================= //
Class d117b6ba3d.7b7d5203b7.SkinDataAsset.8c272391a6.DataAsset.Object
// ============================= //
Class 7b7d5203b7.SkinDataAsset.8c272391a6.DataAsset.Object
// ============================= //
Struct 4cb914cd14
	bool bRenderThermalScope; // Offset: 0x0
// ============================= //
Enum ESlotOffsetType
	ESlotOffsetType::NoOffset = 0,
	ESlotOffsetType::BagLevel1 = 1,
	ESlotOffsetType::BagLevel2 = 2,
	ESlotOffsetType::BagLevel3 = 3,
	ESlotOffsetType::ESlotOffsetType_MAX = 4;
// ============================= //
Struct f5c9b7821f
// ============================= //
Class CarePackageController.ModeController.AIController.Controller.Actor.Object
	Vector2D FlyingHeight; // Offset: 0x45c
	Vector2D FlyHeight_Flare; // Offset: 0x464
	Vector2D SpawnInterval; // Offset: 0x46c
	SoftClassPath a07c91f573; // Offset: 0x478
	TransportAircraftCarePackage* 2e5be53ec6; // Offset: 0x490
	SoftClassPath TransportAircraftFlareGunVehicleClassString; // Offset: 0x498
	float SpawnAreaRadius; // Offset: 0x4b0
	float DropAreaRate; // Offset: 0x4b4
	TArray<TransportAircraftCarePackage*> acab83ff3f; // Offset: 0x4b8
	XtrmTransportAircraftCarePackageAreaRectangle* 0403bbfdf3; // Offset: 0x4c8
	TArray<XtrmPassCarePackageAreaRectangle*> 87500d3c7f; // Offset: 0x4e8
	fff1694c6c* 9dc19d66ac; // Offset: 0x4f8
	fff1694c6c* b92aedaec4; // Offset: 0x500
	float WhiteZoneSpawnInnerRate; // Offset: 0x508
	float MinWhitezoneDiameter; // Offset: 0x50c
	TransportAircraftCarePackage* 65c7d25a59; // Offset: 0x518
	Vector2D StartDelay; // Offset: 0x520
	int MaxCheckDropLocation; // Offset: 0x528
	int MaxConcurrentFlareAirplanes; // Offset: 0x52c
	SoftClassPath fb2e94e0db; // Offset: 0x530
	TransportAircraftCarePackage* 3f5134e0b3; // Offset: 0x548
	float CarePackageLifeTime; // Offset: 0x550
	MapProperty SpawnDelayMap; // Offset: 0x558
	TArray<XtrmPassCarePackageArea*> 0ad5445ffa; // Offset: 0x5a8
// ============================= //
Class TransportAircraftCarePackage.TransportAircraft.Pawn.Actor.Object
	TArray<DropCarePackageTableData> DropCarePackageTableData; // Offset: 0x570
	int ef2f216954; // Offset: 0x5a0
	fff1694c6c* b92aedaec4; // Offset: 0x5b8
	bool bUseCustomCarepackageItem; // Offset: 0x5c0
	bool d6418bc2db; // Offset: 0x5c2
	CarePackageItem* CarePackageItemClass; // Offset: 0x5c8
	XtrmVehicleDrop* CustomCarepackageItem; // Offset: 0x5d0
// ============================= //
Struct DropCarePackageTableData
	float DropPercent; // Offset: 0x0
	int DropCount; // Offset: 0x4
// ============================= //
Class fff1694c6c.Object
// ============================= //
Class CarePackageItem.ItemPackage.Actor.Object
	CarePackageParachute* 855d101257; // Offset: 0x3b8
	XtrmParticle* e871f085f1; // Offset: 0x3c8
	FName 19d3512f8b; // Offset: 0x3d0
	XtrmParticle* 87d73b9f59; // Offset: 0x3d8
	FName 2c8efe311b; // Offset: 0x3e0
	XtrmParticle* ff578a266d; // Offset: 0x3e8
	float 65f27f5bd5; // Offset: 0x3f0
	bool f003e21079; // Offset: 0x400
	FName 34d12fbe25; // Offset: 0x404
	CarePackageParachute* Parachute; // Offset: 0x410
	XtrmParticle* 3412cef5e1; // Offset: 0x420
	XtrmParticle* aba5e722ba; // Offset: 0x428
	bool 2b1f77cacc; // Offset: 0x444
	CarePackageItemMoveComp* MovementComponent; // Offset: 0x448
	XtrmParticle* 992f29fe8c; // Offset: 0x458
	int ef2f216954; // Offset: 0x464
	AkAudioEvent* f4e78c7dc2; // Offset: 0x470
	StaticMesh* 7e97ef9847; // Offset: 0x478
	bool abf8ba3c2f; // Offset: 0x4c0
	bool 9ebdaea16a; // Offset: 0x4d0
	FName ac3b3b6319; // Offset: 0x4d4
	AsyncStaticMeshComponent* VisualStaticMesh; // Offset: 0x4e0
	XtrmParticle* 3a1f95bc4e; // Offset: 0x4f8
	XtrmParticle* 91a815dedf; // Offset: 0x508
// ============================= //
Class CarePackageParachute.Actor.Object
	SkeletalMeshComponent* Mesh; // Offset: 0x2b8
// ============================= //
Class CarePackageItemMoveComp.SimpleInterpolationMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
// ============================= //
Class XtrmVehicleDrop.Actor.Object
	BoxComponent* CollisionComponent; // Offset: 0x2b8
	Pawn* VehicleSpawnClass; // Offset: 0x2c0
	SkeletalMeshComponent* ParachuteMesh; // Offset: 0x2d0
	bool bCorrectForGroundStaticMeshes; // Offset: 0x2d8
	float AltitudeCheck_SphereTraceRadius; // Offset: 0x2dc
	float AltitudeCheck_ArriveDistance; // Offset: 0x2e4
	float AltitudeCheck_LoopTime; // Offset: 0x2e8
	ProjectileMovementComponent* MovementComponent; // Offset: 0x2f0
	float AltitudeCheck_TraceDistance; // Offset: 0x2f8
	SkeletalMeshComponent* FakeMesh; // Offset: 0x300
	Vector2D VelocityClampInMap; // Offset: 0x30c
	Vector2D VelocityClampOutMap; // Offset: 0x31c
	bool bUseAltitudeVelocityClamp; // Offset: 0x324
// ============================= //
Class ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float MinFrictionFraction; // Offset: 0x148
	bool bRotationFollowsVelocity; // Offset: 0x160
	bool bRotationRemainsVertical; // Offset: 0x160
	bool bShouldBounce; // Offset: 0x160
	bool bInitialVelocityInLocalSpace; // Offset: 0x160
	bool bForceSubStepping; // Offset: 0x160
	bool bSimulationEnabled; // Offset: 0x160
	bool bSweepCollision; // Offset: 0x160
	bool bIsHomingProjectile; // Offset: 0x160
	bool bBounceAngleAffectsFriction; // Offset: 0x161
	bool bIsSliding; // Offset: 0x161
	bool bInterpMovement; // Offset: 0x161
	bool bInterpRotation; // Offset: 0x161
	int BounceAdditionalIterations; // Offset: 0x164
	float MaxSimulationTimeStep; // Offset: 0x168
	int MaxSimulationIterations; // Offset: 0x16c
	MulticastInlineDelegateProperty OnProjectileBounce; // Offset: 0x180
	float InterpLocationTime; // Offset: 0x1a0
	MulticastInlineDelegateProperty OnProjectileStop; // Offset: 0x1a8
	float InterpLocationSnapToTargetDistance; // Offset: 0x1b8
	float ProjectileGravityScale; // Offset: 0x1dc
	SceneComponent* HomingTargetComponent; // Offset: 0x1e0
	float Friction; // Offset: 0x200
	float MaxSpeed; // Offset: 0x208
	Vector PreviousHitNormal; // Offset: 0x20c
	float InitialSpeed; // Offset: 0x224
	float PreviousHitTime; // Offset: 0x228
	float HomingAccelerationMagnitude; // Offset: 0x22c
	float Bounciness; // Offset: 0x230
	float InterpRotationTime; // Offset: 0x240
	float BounceVelocityStopSimulatingThreshold; // Offset: 0x244
	float InterpLocationMaxLagDistance; // Offset: 0x248
// ============================= //
Class XtrmTransportAircraftCarePackageAreaRectangle.Actor.Object
	BoxComponent* BoxComponent; // Offset: 0x2b8
// ============================= //
Class XtrmPassCarePackageAreaRectangle.XtrmPassAreaRectangle.Actor.Object
// ============================= //
Class XtrmPassCarePackageArea.XtrmPassArea.Actor.Object
// ============================= //
Class GraveyardCrowProcessor.Actor.Object
// ============================= //
Class RailVehicleProcessor.Actor.Object
	421b357fe2 98cdbd51ca; // Offset: 0x2b8
	Int32Range IdleRailCount; // Offset: 0x308
	bool bIsNoRailVehicle; // Offset: 0x318
	SoftObjectPath ce72ea8152; // Offset: 0x338
	DataTable* f53d14e013; // Offset: 0x358
// ============================= //
Struct bd392f72af
	TArray<FName> 02521a52b6; // Offset: 0x0
	float 56464e1661; // Offset: 0x10
// ============================= //
Class AiActingComponent.ActorComponent.Object
	TransportAircraft* TransportAircraft; // Offset: 0x110
	TArray<int> 363c2c1f90; // Offset: 0x120
	CurveFloat* 027044b633; // Offset: 0x138
	TArray<XtrmCharacter*> 6391859725; // Offset: 0x148
	54a318b1a5* dd39d820c7; // Offset: 0x158
	DataTable* FeedingDataTable; // Offset: 0x160
	TArray<XtrmAIController*> f7366f6f1b; // Offset: 0x178
	TArray<XtrmAIController*> 193ae82d3a; // Offset: 0x190
// ============================= //
Class XtrmAIController.AIController.Controller.Actor.Object
	MapProperty 4941169fe1; // Offset: 0x438
	XtrmCharacterSensingComponent* SensingComponent; // Offset: 0x558
// ============================= //
Class XtrmCharacterSensingComponent.PawnSensingComponent.ActorComponent.Object
// ============================= //
Class PawnSensingComponent.ActorComponent.Object
	float LOSHearingThreshold; // Offset: 0x104
	float SensingInterval; // Offset: 0x108
	MulticastInlineDelegateProperty OnSeePawn; // Offset: 0x110
	MulticastInlineDelegateProperty OnHearNoise; // Offset: 0x120
	bool bEnableSensingUpdates; // Offset: 0x138
	bool bOnlySensePlayers; // Offset: 0x138
	bool bSeePawns; // Offset: 0x138
	bool bHearNoises; // Offset: 0x138
	float HearingMaxSoundAge; // Offset: 0x140
	float HearingThreshold; // Offset: 0x144
	float SightRadius; // Offset: 0x148
	float PeripheralVisionAngle; // Offset: 0x14c
// ============================= //
Class TransportAircraftControllerComponent.ActorComponent.Object
	TransportAircraft* 75d60984b8; // Offset: 0x108
	TArray<TransportAircraft*> d036c3dd4c; // Offset: 0x110
// ============================= //
BlueprintGeneratedClass XtrmCharacter_C
	3aeed9dadb UberGraphFrame; // Offset: 0x1c90
// ============================= //
Class XtrmMoveOptimizeManager.Actor.Object
// ============================= //
Class XtrmSimpleCollisionManager.Actor.Object
// ============================= //
BlueprintGeneratedClass BP_XtrmTraningHUD_C
	3aeed9dadb UberGraphFrame; // Offset: 0x920
	SceneComponent* DefaultSceneRoot; // Offset: 0x928
// ============================= //
Class XtrmBattleRoyaleHUD.XtrmHUD.HUD.Actor.Object
// ============================= //
Class XtrmHUD.HUD.Actor.Object
	MapProperty 9dff5a6b8e; // Offset: 0x3c0
	Vector NextPlayzonePosition; // Offset: 0x428
	TextureRenderTarget2D* 408be271b5; // Offset: 0x450
	float NextPlayzoneRadius; // Offset: 0x458
	MapProperty 7c1fe4a391; // Offset: 0x460
	GrenadeTrajectoryLine* c05d45fce1; // Offset: 0x4b8
	GameSoundTracker* GameSoundTracker; // Offset: 0x500
	MapProperty 5461c7a3da; // Offset: 0x508
	TArray<5276879caf> 35aa3a0a1f; // Offset: 0x558
	MapProperty 1ea95497b5; // Offset: 0x568
	TArray<BlockInputUserWidget*> 6db6469279; // Offset: 0x5d8
	MapProperty 0bd9e2be2e; // Offset: 0x5f0
	MapProperty afe56e80cc; // Offset: 0x640
	TslSceneCaptureWorld* SceneCaptureWorld; // Offset: 0x690
	9e70421366 3ace51c483; // Offset: 0x698
	e491544ab0* e491544ab0; // Offset: 0x6c8
	GameSoundTracker* a059dc1c2e; // Offset: 0x6d0
	ItemStudio* 85c4aa73e5; // Offset: 0x6f0
	e491544ab0* 5d554e748e; // Offset: 0x710
	ItemStudio* OutlineStudio; // Offset: 0x740
	MapProperty d574597d8c; // Offset: 0x760
	float CurrentPlayzoneRadius; // Offset: 0x7c0
	GrenadeTrajectoryLine* GrenadeTrajectoryLine; // Offset: 0x7c8
	MapProperty b7656a0723; // Offset: 0x7d8
	MapProperty 23bd87af35; // Offset: 0x878
	63f07bee1d 2f27ba774b; // Offset: 0x8c8
	Vector CurrentPlayzonePosition; // Offset: 0x910
// ============================= //
Class TextureRenderTarget2D.TextureRenderTarget.Texture.638112bfc1.Object
	int SizeX; // Offset: 0x13c
	TEnumAsByte<TextureAddress> AddressY; // Offset: 0x140
	TEnumAsByte<TextureFilter> MipsSamplerFilter; // Offset: 0x141
	TEnumAsByte<TextureAddress> MipsAddressV; // Offset: 0x148
	bool 3f17a6c4b9; // Offset: 0x149
	bool bHDR; // Offset: 0x149
	bool bGPUSharedFlag; // Offset: 0x149
	TEnumAsByte<ETextureRenderTargetFormat> RenderTargetFormat; // Offset: 0x14a
	bool bAutoGenerateMips; // Offset: 0x14b
	LinearColor ClearColor; // Offset: 0x14c
	TEnumAsByte<TextureAddress> MipsAddressU; // Offset: 0x15c
	TEnumAsByte<TextureAddress> AddressX; // Offset: 0x15d
	int SizeY; // Offset: 0x160
// ============================= //
Class TextureRenderTarget.Texture.638112bfc1.Object
	float TargetGamma; // Offset: 0x134
// ============================= //
Enum ETextureRenderTargetFormat
	RTF_R8 = 0,
	RTF_RG8 = 1,
	RTF_RGBA8 = 2,
	RTF_RGBA8_SRGB = 3,
	RTF_R16f = 4,
	RTF_RG16f = 5,
	RTF_RGBA16f = 6,
	RTF_R32f = 7,
	RTF_RG32f = 8,
	RTF_RGBA32f = 9,
	RTF_RGB10A2 = 10,
	RTF_MAX = 11;
// ============================= //
Class GrenadeTrajectoryLine.Actor.Object
	StaticMeshComponent* fae1b04639; // Offset: 0x2b8
	MaterialInterface* 696f0a9fc4; // Offset: 0x2c0
	StaticMesh* 3bc2b0b3af; // Offset: 0x2c8
	TArray<SplineMeshComponent*> 1e0b4851b8; // Offset: 0x2d0
	Vector2D c036d383fb; // Offset: 0x2e0
	SplineComponent* SplineComponent; // Offset: 0x2e8
	FName ba1b318b4b; // Offset: 0x2f4
	FName 581711554c; // Offset: 0x2fc
	MaterialInstanceDynamic* 7b1370cbee; // Offset: 0x308
// ============================= //
Class GameSoundTracker.Object
	MapProperty dfdef525c8; // Offset: 0x68
	MapProperty 18c43a332a; // Offset: 0xb8
	MapProperty abf050ddba; // Offset: 0x108
	MapProperty f8a25c2a12; // Offset: 0x158
	MapProperty 4c85313213; // Offset: 0x1a8
	MapProperty 4e50a51412; // Offset: 0x1f8
	MapProperty 0bec5ae095; // Offset: 0x248
// ============================= //
Struct 5276879caf
	Actor* ActorClass; // Offset: 0x30
// ============================= //
Class BlockInputUserWidget.XtrmUserWidget.UserWidget.Widget.Visual.Object
	TArray<FName> BlockAxises; // Offset: 0x818
	TArray<ed91e67db7> BlockActions; // Offset: 0x828
	bool bGenerateEventOnOpen; // Offset: 0x838
	bool bCancelDragDrop; // Offset: 0x839
	TArray<FName> BlockAxisesOnDemand; // Offset: 0x840
	bool bWhiteList; // Offset: 0x850
	bool bLockMouseCursorInViewport; // Offset: 0x851
	TArray<ed91e67db7> BlockActionsOnDemand; // Offset: 0x858
// ============================= //
Struct ed91e67db7
	TEnumAsByte<EInputEvent> KeyEvent; // Offset: 0x0
	FName ActionName; // Offset: 0x4
// ============================= //
Enum EInputEvent
	IE_Pressed = 0,
	IE_Released = 1,
	IE_Repeat = 2,
	IE_DoubleClick = 3,
	IE_Axis = 4,
	IE_MAX = 5;
// ============================= //
Class TslSceneCaptureWorld.Object
	World* World; // Offset: 0x70
// ============================= //
Class e491544ab0.Object
// ============================= //
Class ItemStudio.ViewModeStudio.Actor.Object
// ============================= //
Class ViewModeStudio.Actor.Object
	FName CameraSocketName; // Offset: 0x2bc
	SceneCaptureComponent2D* SceneCaptureComponent; // Offset: 0x2c8
	CameraComponent* CameraComponent; // Offset: 0x2d0
	TextureRenderTarget2D* TextureTarget; // Offset: 0x2d8
	float MaxViewDistance; // Offset: 0x2e0
	Transform aad64d40a0; // Offset: 0x2f0
	float ViewSlaveLocationDuration; // Offset: 0x320
// ============================= //
Class SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	bool bDisableFlipCopyGLES; // Offset: 0x338
	float PostProcessBlendWeight; // Offset: 0x33c
	Matrix CustomProjectionMatrix; // Offset: 0x340
	bool bUseCustomProjectionMatrix; // Offset: 0x380
	float CustomNearClippingPlane; // Offset: 0x384
	TEnumAsByte<ECameraProjectionMode> ProjectionType; // Offset: 0x388
	PostProcessSettings PostProcessSettings; // Offset: 0x390
	bool bOverride_CustomNearClippingPlane; // Offset: 0x900
	float FOVAngle; // Offset: 0x904
	TextureRenderTarget2D* TextureTarget; // Offset: 0x908
	bool bEnableClipPlane; // Offset: 0x910
	TEnumAsByte<ESceneCaptureCompositeMode> CompositeMode; // Offset: 0x911
	Vector ClipPlaneNormal; // Offset: 0x914
	float OrthoWidth; // Offset: 0x920
	bool bCameraCutThisFrame; // Offset: 0x924
	bool bConsiderUnrenderedOpaquePixelAsFullyTranslucent; // Offset: 0x924
	Vector ClipPlaneBase; // Offset: 0x928
// ============================= //
Class SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TArray<PrimitiveComponent*> ShowOnlyComponents; // Offset: 0x288
	bool bCaptureEveryFrame; // Offset: 0x298
	bool bCaptureOnMovement; // Offset: 0x298
	float MaxViewDistanceOverride; // Offset: 0x29c
	TArray<Actor*> ShowOnlyActors; // Offset: 0x2a0
	TArray<PrimitiveComponent*> 221471bf4e; // Offset: 0x2b0
	bool bAlwaysPersistRenderingState; // Offset: 0x2c0
	TArray<Actor*> HiddenActors; // Offset: 0x2c8
	TEnumAsByte<ESceneCapturePrimitiveRenderMode> PrimitiveRenderMode; // Offset: 0x2d8
	int CaptureSortPriority; // Offset: 0x2dc
	TArray<d64f73cdfb> ShowFlagSettings; // Offset: 0x2f0
	bool bUseRayTracingIfEnabled; // Offset: 0x330
// ============================= //
Enum ESceneCapturePrimitiveRenderMode
	ESceneCapturePrimitiveRenderMode::PRM_LegacySceneCapture = 0,
	ESceneCapturePrimitiveRenderMode::PRM_RenderScenePrimitives = 1,
	ESceneCapturePrimitiveRenderMode::PRM_UseShowOnlyList = 2,
	ESceneCapturePrimitiveRenderMode::PRM_MAX = 3;
// ============================= //
Struct d64f73cdfb
	FString ShowFlagName; // Offset: 0x0
	bool Enabled; // Offset: 0x10
// ============================= //
Enum ESceneCaptureCompositeMode
	SCCM_Overwrite = 0,
	SCCM_Additive = 1,
	SCCM_Composite = 2,
	SCCM_MAX = 3;
// ============================= //
Struct 63f07bee1d
	bool bDefaultShow; // Offset: 0x0
	int ZOrder; // Offset: 0x4
	XtrmUserWidget* WidgetClassReference; // Offset: 0x8
// ============================= //
BlueprintGeneratedClass BP_GrenadeTrajectoryLine_C
